
cleaner.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010c  00800200  000039d4  00003a68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000039d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080030c  0080030c  00003b74  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00003b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000036c  00000000  00000000  00003b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c95  00000000  00000000  00003f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001e3  00000000  00000000  00004b95  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001470  00000000  00000000  00004d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a0  00000000  00000000  000061e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ae  00000000  00000000  00006488  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 6a 0a 	jmp	0x14d4	; 0x14d4 <__vector_5>
      18:	0c 94 87 0a 	jmp	0x150e	; 0x150e <__vector_6>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__vector_36>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <lcd_set_4bit+0x7b4>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	13 e0       	ldi	r17, 0x03	; 3
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	e4 ed       	ldi	r30, 0xD4	; 212
     17e:	f9 e3       	ldi	r31, 0x39	; 57
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	ac 30       	cpi	r26, 0x0C	; 12
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	13 e0       	ldi	r17, 0x03	; 3
     192:	ac e0       	ldi	r26, 0x0C	; 12
     194:	b3 e0       	ldi	r27, 0x03	; 3
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a8 32       	cpi	r26, 0x28	; 40
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 bb 12 	call	0x2576	; 0x2576 <main>
     1a4:	0c 94 e8 1c 	jmp	0x39d0	; 0x39d0 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <lcd_set_4bit>:
int i;


/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
     1ac:	0f 93       	push	r16
     1ae:	1f 93       	push	r17
     1b0:	df 93       	push	r29
     1b2:	cf 93       	push	r28
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	c0 57       	subi	r28, 0x70	; 112
     1ba:	d0 40       	sbci	r29, 0x00	; 0
     1bc:	0f b6       	in	r0, 0x3f	; 63
     1be:	f8 94       	cli
     1c0:	de bf       	out	0x3e, r29	; 62
     1c2:	0f be       	out	0x3f, r0	; 63
     1c4:	cd bf       	out	0x3d, r28	; 61
     1c6:	fe 01       	movw	r30, r28
     1c8:	e3 59       	subi	r30, 0x93	; 147
     1ca:	ff 4f       	sbci	r31, 0xFF	; 255
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	a0 e8       	ldi	r26, 0x80	; 128
     1d2:	bf e3       	ldi	r27, 0x3F	; 63
     1d4:	80 83       	st	Z, r24
     1d6:	91 83       	std	Z+1, r25	; 0x01
     1d8:	a2 83       	std	Z+2, r26	; 0x02
     1da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     1dc:	8e 01       	movw	r16, r28
     1de:	07 59       	subi	r16, 0x97	; 151
     1e0:	1f 4f       	sbci	r17, 0xFF	; 255
     1e2:	fe 01       	movw	r30, r28
     1e4:	e3 59       	subi	r30, 0x93	; 147
     1e6:	ff 4f       	sbci	r31, 0xFF	; 255
     1e8:	60 81       	ld	r22, Z
     1ea:	71 81       	ldd	r23, Z+1	; 0x01
     1ec:	82 81       	ldd	r24, Z+2	; 0x02
     1ee:	93 81       	ldd	r25, Z+3	; 0x03
     1f0:	2d ec       	ldi	r18, 0xCD	; 205
     1f2:	3c ec       	ldi	r19, 0xCC	; 204
     1f4:	4c e2       	ldi	r20, 0x2C	; 44
     1f6:	55 e4       	ldi	r21, 0x45	; 69
     1f8:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
     1fc:	dc 01       	movw	r26, r24
     1fe:	cb 01       	movw	r24, r22
     200:	f8 01       	movw	r30, r16
     202:	80 83       	st	Z, r24
     204:	91 83       	std	Z+1, r25	; 0x01
     206:	a2 83       	std	Z+2, r26	; 0x02
     208:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     20a:	fe 01       	movw	r30, r28
     20c:	e7 59       	subi	r30, 0x97	; 151
     20e:	ff 4f       	sbci	r31, 0xFF	; 255
     210:	60 81       	ld	r22, Z
     212:	71 81       	ldd	r23, Z+1	; 0x01
     214:	82 81       	ldd	r24, Z+2	; 0x02
     216:	93 81       	ldd	r25, Z+3	; 0x03
     218:	20 e0       	ldi	r18, 0x00	; 0
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	40 e8       	ldi	r20, 0x80	; 128
     21e:	5f e3       	ldi	r21, 0x3F	; 63
     220:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__ltsf2>
     224:	88 23       	and	r24, r24
     226:	44 f4       	brge	.+16     	; 0x238 <lcd_set_4bit+0x8c>
		__ticks = 1;
     228:	fe 01       	movw	r30, r28
     22a:	e9 59       	subi	r30, 0x99	; 153
     22c:	ff 4f       	sbci	r31, 0xFF	; 255
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	91 83       	std	Z+1, r25	; 0x01
     234:	80 83       	st	Z, r24
     236:	64 c0       	rjmp	.+200    	; 0x300 <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     238:	fe 01       	movw	r30, r28
     23a:	e7 59       	subi	r30, 0x97	; 151
     23c:	ff 4f       	sbci	r31, 0xFF	; 255
     23e:	60 81       	ld	r22, Z
     240:	71 81       	ldd	r23, Z+1	; 0x01
     242:	82 81       	ldd	r24, Z+2	; 0x02
     244:	93 81       	ldd	r25, Z+3	; 0x03
     246:	20 e0       	ldi	r18, 0x00	; 0
     248:	3f ef       	ldi	r19, 0xFF	; 255
     24a:	4f e7       	ldi	r20, 0x7F	; 127
     24c:	57 e4       	ldi	r21, 0x47	; 71
     24e:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <__gtsf2>
     252:	18 16       	cp	r1, r24
     254:	0c f0       	brlt	.+2      	; 0x258 <lcd_set_4bit+0xac>
     256:	43 c0       	rjmp	.+134    	; 0x2de <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     258:	fe 01       	movw	r30, r28
     25a:	e3 59       	subi	r30, 0x93	; 147
     25c:	ff 4f       	sbci	r31, 0xFF	; 255
     25e:	60 81       	ld	r22, Z
     260:	71 81       	ldd	r23, Z+1	; 0x01
     262:	82 81       	ldd	r24, Z+2	; 0x02
     264:	93 81       	ldd	r25, Z+3	; 0x03
     266:	20 e0       	ldi	r18, 0x00	; 0
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	40 e2       	ldi	r20, 0x20	; 32
     26c:	51 e4       	ldi	r21, 0x41	; 65
     26e:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
     272:	dc 01       	movw	r26, r24
     274:	cb 01       	movw	r24, r22
     276:	8e 01       	movw	r16, r28
     278:	09 59       	subi	r16, 0x99	; 153
     27a:	1f 4f       	sbci	r17, 0xFF	; 255
     27c:	bc 01       	movw	r22, r24
     27e:	cd 01       	movw	r24, r26
     280:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fixunssfsi>
     284:	dc 01       	movw	r26, r24
     286:	cb 01       	movw	r24, r22
     288:	f8 01       	movw	r30, r16
     28a:	91 83       	std	Z+1, r25	; 0x01
     28c:	80 83       	st	Z, r24
     28e:	1f c0       	rjmp	.+62     	; 0x2ce <lcd_set_4bit+0x122>
     290:	fe 01       	movw	r30, r28
     292:	eb 59       	subi	r30, 0x9B	; 155
     294:	ff 4f       	sbci	r31, 0xFF	; 255
     296:	84 e1       	ldi	r24, 0x14	; 20
     298:	91 e0       	ldi	r25, 0x01	; 1
     29a:	91 83       	std	Z+1, r25	; 0x01
     29c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     29e:	fe 01       	movw	r30, r28
     2a0:	eb 59       	subi	r30, 0x9B	; 155
     2a2:	ff 4f       	sbci	r31, 0xFF	; 255
     2a4:	80 81       	ld	r24, Z
     2a6:	91 81       	ldd	r25, Z+1	; 0x01
     2a8:	01 97       	sbiw	r24, 0x01	; 1
     2aa:	f1 f7       	brne	.-4      	; 0x2a8 <lcd_set_4bit+0xfc>
     2ac:	fe 01       	movw	r30, r28
     2ae:	eb 59       	subi	r30, 0x9B	; 155
     2b0:	ff 4f       	sbci	r31, 0xFF	; 255
     2b2:	91 83       	std	Z+1, r25	; 0x01
     2b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2b6:	de 01       	movw	r26, r28
     2b8:	a9 59       	subi	r26, 0x99	; 153
     2ba:	bf 4f       	sbci	r27, 0xFF	; 255
     2bc:	fe 01       	movw	r30, r28
     2be:	e9 59       	subi	r30, 0x99	; 153
     2c0:	ff 4f       	sbci	r31, 0xFF	; 255
     2c2:	80 81       	ld	r24, Z
     2c4:	91 81       	ldd	r25, Z+1	; 0x01
     2c6:	01 97       	sbiw	r24, 0x01	; 1
     2c8:	11 96       	adiw	r26, 0x01	; 1
     2ca:	9c 93       	st	X, r25
     2cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2ce:	fe 01       	movw	r30, r28
     2d0:	e9 59       	subi	r30, 0x99	; 153
     2d2:	ff 4f       	sbci	r31, 0xFF	; 255
     2d4:	80 81       	ld	r24, Z
     2d6:	91 81       	ldd	r25, Z+1	; 0x01
     2d8:	00 97       	sbiw	r24, 0x00	; 0
     2da:	d1 f6       	brne	.-76     	; 0x290 <lcd_set_4bit+0xe4>
     2dc:	27 c0       	rjmp	.+78     	; 0x32c <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2de:	8e 01       	movw	r16, r28
     2e0:	09 59       	subi	r16, 0x99	; 153
     2e2:	1f 4f       	sbci	r17, 0xFF	; 255
     2e4:	fe 01       	movw	r30, r28
     2e6:	e7 59       	subi	r30, 0x97	; 151
     2e8:	ff 4f       	sbci	r31, 0xFF	; 255
     2ea:	60 81       	ld	r22, Z
     2ec:	71 81       	ldd	r23, Z+1	; 0x01
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fixunssfsi>
     2f6:	dc 01       	movw	r26, r24
     2f8:	cb 01       	movw	r24, r22
     2fa:	f8 01       	movw	r30, r16
     2fc:	91 83       	std	Z+1, r25	; 0x01
     2fe:	80 83       	st	Z, r24
     300:	de 01       	movw	r26, r28
     302:	ad 59       	subi	r26, 0x9D	; 157
     304:	bf 4f       	sbci	r27, 0xFF	; 255
     306:	fe 01       	movw	r30, r28
     308:	e9 59       	subi	r30, 0x99	; 153
     30a:	ff 4f       	sbci	r31, 0xFF	; 255
     30c:	80 81       	ld	r24, Z
     30e:	91 81       	ldd	r25, Z+1	; 0x01
     310:	8d 93       	st	X+, r24
     312:	9c 93       	st	X, r25
     314:	fe 01       	movw	r30, r28
     316:	ed 59       	subi	r30, 0x9D	; 157
     318:	ff 4f       	sbci	r31, 0xFF	; 255
     31a:	80 81       	ld	r24, Z
     31c:	91 81       	ldd	r25, Z+1	; 0x01
     31e:	01 97       	sbiw	r24, 0x01	; 1
     320:	f1 f7       	brne	.-4      	; 0x31e <lcd_set_4bit+0x172>
     322:	fe 01       	movw	r30, r28
     324:	ed 59       	subi	r30, 0x9D	; 157
     326:	ff 4f       	sbci	r31, 0xFF	; 255
     328:	91 83       	std	Z+1, r25	; 0x01
     32a:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     32c:	a8 e2       	ldi	r26, 0x28	; 40
     32e:	b0 e0       	ldi	r27, 0x00	; 0
     330:	e8 e2       	ldi	r30, 0x28	; 40
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	80 81       	ld	r24, Z
     336:	8e 7f       	andi	r24, 0xFE	; 254
     338:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     33a:	a8 e2       	ldi	r26, 0x28	; 40
     33c:	b0 e0       	ldi	r27, 0x00	; 0
     33e:	e8 e2       	ldi	r30, 0x28	; 40
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	80 81       	ld	r24, Z
     344:	8d 7f       	andi	r24, 0xFD	; 253
     346:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     348:	e8 e2       	ldi	r30, 0x28	; 40
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	80 e3       	ldi	r24, 0x30	; 48
     34e:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     350:	a8 e2       	ldi	r26, 0x28	; 40
     352:	b0 e0       	ldi	r27, 0x00	; 0
     354:	e8 e2       	ldi	r30, 0x28	; 40
     356:	f0 e0       	ldi	r31, 0x00	; 0
     358:	80 81       	ld	r24, Z
     35a:	84 60       	ori	r24, 0x04	; 4
     35c:	8c 93       	st	X, r24
     35e:	fe 01       	movw	r30, r28
     360:	e1 5a       	subi	r30, 0xA1	; 161
     362:	ff 4f       	sbci	r31, 0xFF	; 255
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	a0 ea       	ldi	r26, 0xA0	; 160
     36a:	b0 e4       	ldi	r27, 0x40	; 64
     36c:	80 83       	st	Z, r24
     36e:	91 83       	std	Z+1, r25	; 0x01
     370:	a2 83       	std	Z+2, r26	; 0x02
     372:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     374:	8e 01       	movw	r16, r28
     376:	05 5a       	subi	r16, 0xA5	; 165
     378:	1f 4f       	sbci	r17, 0xFF	; 255
     37a:	fe 01       	movw	r30, r28
     37c:	e1 5a       	subi	r30, 0xA1	; 161
     37e:	ff 4f       	sbci	r31, 0xFF	; 255
     380:	60 81       	ld	r22, Z
     382:	71 81       	ldd	r23, Z+1	; 0x01
     384:	82 81       	ldd	r24, Z+2	; 0x02
     386:	93 81       	ldd	r25, Z+3	; 0x03
     388:	2d ec       	ldi	r18, 0xCD	; 205
     38a:	3c ec       	ldi	r19, 0xCC	; 204
     38c:	4c e2       	ldi	r20, 0x2C	; 44
     38e:	55 e4       	ldi	r21, 0x45	; 69
     390:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
     394:	dc 01       	movw	r26, r24
     396:	cb 01       	movw	r24, r22
     398:	f8 01       	movw	r30, r16
     39a:	80 83       	st	Z, r24
     39c:	91 83       	std	Z+1, r25	; 0x01
     39e:	a2 83       	std	Z+2, r26	; 0x02
     3a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     3a2:	fe 01       	movw	r30, r28
     3a4:	e5 5a       	subi	r30, 0xA5	; 165
     3a6:	ff 4f       	sbci	r31, 0xFF	; 255
     3a8:	60 81       	ld	r22, Z
     3aa:	71 81       	ldd	r23, Z+1	; 0x01
     3ac:	82 81       	ldd	r24, Z+2	; 0x02
     3ae:	93 81       	ldd	r25, Z+3	; 0x03
     3b0:	20 e0       	ldi	r18, 0x00	; 0
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	40 e8       	ldi	r20, 0x80	; 128
     3b6:	5f e3       	ldi	r21, 0x3F	; 63
     3b8:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__ltsf2>
     3bc:	88 23       	and	r24, r24
     3be:	44 f4       	brge	.+16     	; 0x3d0 <lcd_set_4bit+0x224>
		__ticks = 1;
     3c0:	fe 01       	movw	r30, r28
     3c2:	e7 5a       	subi	r30, 0xA7	; 167
     3c4:	ff 4f       	sbci	r31, 0xFF	; 255
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	91 83       	std	Z+1, r25	; 0x01
     3cc:	80 83       	st	Z, r24
     3ce:	64 c0       	rjmp	.+200    	; 0x498 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     3d0:	fe 01       	movw	r30, r28
     3d2:	e5 5a       	subi	r30, 0xA5	; 165
     3d4:	ff 4f       	sbci	r31, 0xFF	; 255
     3d6:	60 81       	ld	r22, Z
     3d8:	71 81       	ldd	r23, Z+1	; 0x01
     3da:	82 81       	ldd	r24, Z+2	; 0x02
     3dc:	93 81       	ldd	r25, Z+3	; 0x03
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	3f ef       	ldi	r19, 0xFF	; 255
     3e2:	4f e7       	ldi	r20, 0x7F	; 127
     3e4:	57 e4       	ldi	r21, 0x47	; 71
     3e6:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <__gtsf2>
     3ea:	18 16       	cp	r1, r24
     3ec:	0c f0       	brlt	.+2      	; 0x3f0 <lcd_set_4bit+0x244>
     3ee:	43 c0       	rjmp	.+134    	; 0x476 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3f0:	fe 01       	movw	r30, r28
     3f2:	e1 5a       	subi	r30, 0xA1	; 161
     3f4:	ff 4f       	sbci	r31, 0xFF	; 255
     3f6:	60 81       	ld	r22, Z
     3f8:	71 81       	ldd	r23, Z+1	; 0x01
     3fa:	82 81       	ldd	r24, Z+2	; 0x02
     3fc:	93 81       	ldd	r25, Z+3	; 0x03
     3fe:	20 e0       	ldi	r18, 0x00	; 0
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	40 e2       	ldi	r20, 0x20	; 32
     404:	51 e4       	ldi	r21, 0x41	; 65
     406:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
     40a:	dc 01       	movw	r26, r24
     40c:	cb 01       	movw	r24, r22
     40e:	8e 01       	movw	r16, r28
     410:	07 5a       	subi	r16, 0xA7	; 167
     412:	1f 4f       	sbci	r17, 0xFF	; 255
     414:	bc 01       	movw	r22, r24
     416:	cd 01       	movw	r24, r26
     418:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fixunssfsi>
     41c:	dc 01       	movw	r26, r24
     41e:	cb 01       	movw	r24, r22
     420:	f8 01       	movw	r30, r16
     422:	91 83       	std	Z+1, r25	; 0x01
     424:	80 83       	st	Z, r24
     426:	1f c0       	rjmp	.+62     	; 0x466 <lcd_set_4bit+0x2ba>
     428:	fe 01       	movw	r30, r28
     42a:	e9 5a       	subi	r30, 0xA9	; 169
     42c:	ff 4f       	sbci	r31, 0xFF	; 255
     42e:	84 e1       	ldi	r24, 0x14	; 20
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	91 83       	std	Z+1, r25	; 0x01
     434:	80 83       	st	Z, r24
     436:	fe 01       	movw	r30, r28
     438:	e9 5a       	subi	r30, 0xA9	; 169
     43a:	ff 4f       	sbci	r31, 0xFF	; 255
     43c:	80 81       	ld	r24, Z
     43e:	91 81       	ldd	r25, Z+1	; 0x01
     440:	01 97       	sbiw	r24, 0x01	; 1
     442:	f1 f7       	brne	.-4      	; 0x440 <lcd_set_4bit+0x294>
     444:	fe 01       	movw	r30, r28
     446:	e9 5a       	subi	r30, 0xA9	; 169
     448:	ff 4f       	sbci	r31, 0xFF	; 255
     44a:	91 83       	std	Z+1, r25	; 0x01
     44c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     44e:	de 01       	movw	r26, r28
     450:	a7 5a       	subi	r26, 0xA7	; 167
     452:	bf 4f       	sbci	r27, 0xFF	; 255
     454:	fe 01       	movw	r30, r28
     456:	e7 5a       	subi	r30, 0xA7	; 167
     458:	ff 4f       	sbci	r31, 0xFF	; 255
     45a:	80 81       	ld	r24, Z
     45c:	91 81       	ldd	r25, Z+1	; 0x01
     45e:	01 97       	sbiw	r24, 0x01	; 1
     460:	11 96       	adiw	r26, 0x01	; 1
     462:	9c 93       	st	X, r25
     464:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     466:	fe 01       	movw	r30, r28
     468:	e7 5a       	subi	r30, 0xA7	; 167
     46a:	ff 4f       	sbci	r31, 0xFF	; 255
     46c:	80 81       	ld	r24, Z
     46e:	91 81       	ldd	r25, Z+1	; 0x01
     470:	00 97       	sbiw	r24, 0x00	; 0
     472:	d1 f6       	brne	.-76     	; 0x428 <lcd_set_4bit+0x27c>
     474:	27 c0       	rjmp	.+78     	; 0x4c4 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     476:	8e 01       	movw	r16, r28
     478:	07 5a       	subi	r16, 0xA7	; 167
     47a:	1f 4f       	sbci	r17, 0xFF	; 255
     47c:	fe 01       	movw	r30, r28
     47e:	e5 5a       	subi	r30, 0xA5	; 165
     480:	ff 4f       	sbci	r31, 0xFF	; 255
     482:	60 81       	ld	r22, Z
     484:	71 81       	ldd	r23, Z+1	; 0x01
     486:	82 81       	ldd	r24, Z+2	; 0x02
     488:	93 81       	ldd	r25, Z+3	; 0x03
     48a:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fixunssfsi>
     48e:	dc 01       	movw	r26, r24
     490:	cb 01       	movw	r24, r22
     492:	f8 01       	movw	r30, r16
     494:	91 83       	std	Z+1, r25	; 0x01
     496:	80 83       	st	Z, r24
     498:	de 01       	movw	r26, r28
     49a:	ab 5a       	subi	r26, 0xAB	; 171
     49c:	bf 4f       	sbci	r27, 0xFF	; 255
     49e:	fe 01       	movw	r30, r28
     4a0:	e7 5a       	subi	r30, 0xA7	; 167
     4a2:	ff 4f       	sbci	r31, 0xFF	; 255
     4a4:	80 81       	ld	r24, Z
     4a6:	91 81       	ldd	r25, Z+1	; 0x01
     4a8:	8d 93       	st	X+, r24
     4aa:	9c 93       	st	X, r25
     4ac:	fe 01       	movw	r30, r28
     4ae:	eb 5a       	subi	r30, 0xAB	; 171
     4b0:	ff 4f       	sbci	r31, 0xFF	; 255
     4b2:	80 81       	ld	r24, Z
     4b4:	91 81       	ldd	r25, Z+1	; 0x01
     4b6:	01 97       	sbiw	r24, 0x01	; 1
     4b8:	f1 f7       	brne	.-4      	; 0x4b6 <lcd_set_4bit+0x30a>
     4ba:	fe 01       	movw	r30, r28
     4bc:	eb 5a       	subi	r30, 0xAB	; 171
     4be:	ff 4f       	sbci	r31, 0xFF	; 255
     4c0:	91 83       	std	Z+1, r25	; 0x01
     4c2:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     4c4:	a8 e2       	ldi	r26, 0x28	; 40
     4c6:	b0 e0       	ldi	r27, 0x00	; 0
     4c8:	e8 e2       	ldi	r30, 0x28	; 40
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	80 81       	ld	r24, Z
     4ce:	8b 7f       	andi	r24, 0xFB	; 251
     4d0:	8c 93       	st	X, r24
     4d2:	fe 01       	movw	r30, r28
     4d4:	ef 5a       	subi	r30, 0xAF	; 175
     4d6:	ff 4f       	sbci	r31, 0xFF	; 255
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	a0 e8       	ldi	r26, 0x80	; 128
     4de:	bf e3       	ldi	r27, 0x3F	; 63
     4e0:	80 83       	st	Z, r24
     4e2:	91 83       	std	Z+1, r25	; 0x01
     4e4:	a2 83       	std	Z+2, r26	; 0x02
     4e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     4e8:	8e 01       	movw	r16, r28
     4ea:	03 5b       	subi	r16, 0xB3	; 179
     4ec:	1f 4f       	sbci	r17, 0xFF	; 255
     4ee:	fe 01       	movw	r30, r28
     4f0:	ef 5a       	subi	r30, 0xAF	; 175
     4f2:	ff 4f       	sbci	r31, 0xFF	; 255
     4f4:	60 81       	ld	r22, Z
     4f6:	71 81       	ldd	r23, Z+1	; 0x01
     4f8:	82 81       	ldd	r24, Z+2	; 0x02
     4fa:	93 81       	ldd	r25, Z+3	; 0x03
     4fc:	2d ec       	ldi	r18, 0xCD	; 205
     4fe:	3c ec       	ldi	r19, 0xCC	; 204
     500:	4c e2       	ldi	r20, 0x2C	; 44
     502:	55 e4       	ldi	r21, 0x45	; 69
     504:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
     508:	dc 01       	movw	r26, r24
     50a:	cb 01       	movw	r24, r22
     50c:	f8 01       	movw	r30, r16
     50e:	80 83       	st	Z, r24
     510:	91 83       	std	Z+1, r25	; 0x01
     512:	a2 83       	std	Z+2, r26	; 0x02
     514:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     516:	fe 01       	movw	r30, r28
     518:	e3 5b       	subi	r30, 0xB3	; 179
     51a:	ff 4f       	sbci	r31, 0xFF	; 255
     51c:	60 81       	ld	r22, Z
     51e:	71 81       	ldd	r23, Z+1	; 0x01
     520:	82 81       	ldd	r24, Z+2	; 0x02
     522:	93 81       	ldd	r25, Z+3	; 0x03
     524:	20 e0       	ldi	r18, 0x00	; 0
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	40 e8       	ldi	r20, 0x80	; 128
     52a:	5f e3       	ldi	r21, 0x3F	; 63
     52c:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__ltsf2>
     530:	88 23       	and	r24, r24
     532:	44 f4       	brge	.+16     	; 0x544 <lcd_set_4bit+0x398>
		__ticks = 1;
     534:	fe 01       	movw	r30, r28
     536:	e5 5b       	subi	r30, 0xB5	; 181
     538:	ff 4f       	sbci	r31, 0xFF	; 255
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	91 83       	std	Z+1, r25	; 0x01
     540:	80 83       	st	Z, r24
     542:	64 c0       	rjmp	.+200    	; 0x60c <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     544:	fe 01       	movw	r30, r28
     546:	e3 5b       	subi	r30, 0xB3	; 179
     548:	ff 4f       	sbci	r31, 0xFF	; 255
     54a:	60 81       	ld	r22, Z
     54c:	71 81       	ldd	r23, Z+1	; 0x01
     54e:	82 81       	ldd	r24, Z+2	; 0x02
     550:	93 81       	ldd	r25, Z+3	; 0x03
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	3f ef       	ldi	r19, 0xFF	; 255
     556:	4f e7       	ldi	r20, 0x7F	; 127
     558:	57 e4       	ldi	r21, 0x47	; 71
     55a:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <__gtsf2>
     55e:	18 16       	cp	r1, r24
     560:	0c f0       	brlt	.+2      	; 0x564 <lcd_set_4bit+0x3b8>
     562:	43 c0       	rjmp	.+134    	; 0x5ea <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     564:	fe 01       	movw	r30, r28
     566:	ef 5a       	subi	r30, 0xAF	; 175
     568:	ff 4f       	sbci	r31, 0xFF	; 255
     56a:	60 81       	ld	r22, Z
     56c:	71 81       	ldd	r23, Z+1	; 0x01
     56e:	82 81       	ldd	r24, Z+2	; 0x02
     570:	93 81       	ldd	r25, Z+3	; 0x03
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	40 e2       	ldi	r20, 0x20	; 32
     578:	51 e4       	ldi	r21, 0x41	; 65
     57a:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
     57e:	dc 01       	movw	r26, r24
     580:	cb 01       	movw	r24, r22
     582:	8e 01       	movw	r16, r28
     584:	05 5b       	subi	r16, 0xB5	; 181
     586:	1f 4f       	sbci	r17, 0xFF	; 255
     588:	bc 01       	movw	r22, r24
     58a:	cd 01       	movw	r24, r26
     58c:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fixunssfsi>
     590:	dc 01       	movw	r26, r24
     592:	cb 01       	movw	r24, r22
     594:	f8 01       	movw	r30, r16
     596:	91 83       	std	Z+1, r25	; 0x01
     598:	80 83       	st	Z, r24
     59a:	1f c0       	rjmp	.+62     	; 0x5da <lcd_set_4bit+0x42e>
     59c:	fe 01       	movw	r30, r28
     59e:	e7 5b       	subi	r30, 0xB7	; 183
     5a0:	ff 4f       	sbci	r31, 0xFF	; 255
     5a2:	84 e1       	ldi	r24, 0x14	; 20
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	91 83       	std	Z+1, r25	; 0x01
     5a8:	80 83       	st	Z, r24
     5aa:	fe 01       	movw	r30, r28
     5ac:	e7 5b       	subi	r30, 0xB7	; 183
     5ae:	ff 4f       	sbci	r31, 0xFF	; 255
     5b0:	80 81       	ld	r24, Z
     5b2:	91 81       	ldd	r25, Z+1	; 0x01
     5b4:	01 97       	sbiw	r24, 0x01	; 1
     5b6:	f1 f7       	brne	.-4      	; 0x5b4 <lcd_set_4bit+0x408>
     5b8:	fe 01       	movw	r30, r28
     5ba:	e7 5b       	subi	r30, 0xB7	; 183
     5bc:	ff 4f       	sbci	r31, 0xFF	; 255
     5be:	91 83       	std	Z+1, r25	; 0x01
     5c0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5c2:	de 01       	movw	r26, r28
     5c4:	a5 5b       	subi	r26, 0xB5	; 181
     5c6:	bf 4f       	sbci	r27, 0xFF	; 255
     5c8:	fe 01       	movw	r30, r28
     5ca:	e5 5b       	subi	r30, 0xB5	; 181
     5cc:	ff 4f       	sbci	r31, 0xFF	; 255
     5ce:	80 81       	ld	r24, Z
     5d0:	91 81       	ldd	r25, Z+1	; 0x01
     5d2:	01 97       	sbiw	r24, 0x01	; 1
     5d4:	11 96       	adiw	r26, 0x01	; 1
     5d6:	9c 93       	st	X, r25
     5d8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5da:	fe 01       	movw	r30, r28
     5dc:	e5 5b       	subi	r30, 0xB5	; 181
     5de:	ff 4f       	sbci	r31, 0xFF	; 255
     5e0:	80 81       	ld	r24, Z
     5e2:	91 81       	ldd	r25, Z+1	; 0x01
     5e4:	00 97       	sbiw	r24, 0x00	; 0
     5e6:	d1 f6       	brne	.-76     	; 0x59c <lcd_set_4bit+0x3f0>
     5e8:	27 c0       	rjmp	.+78     	; 0x638 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5ea:	8e 01       	movw	r16, r28
     5ec:	05 5b       	subi	r16, 0xB5	; 181
     5ee:	1f 4f       	sbci	r17, 0xFF	; 255
     5f0:	fe 01       	movw	r30, r28
     5f2:	e3 5b       	subi	r30, 0xB3	; 179
     5f4:	ff 4f       	sbci	r31, 0xFF	; 255
     5f6:	60 81       	ld	r22, Z
     5f8:	71 81       	ldd	r23, Z+1	; 0x01
     5fa:	82 81       	ldd	r24, Z+2	; 0x02
     5fc:	93 81       	ldd	r25, Z+3	; 0x03
     5fe:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fixunssfsi>
     602:	dc 01       	movw	r26, r24
     604:	cb 01       	movw	r24, r22
     606:	f8 01       	movw	r30, r16
     608:	91 83       	std	Z+1, r25	; 0x01
     60a:	80 83       	st	Z, r24
     60c:	de 01       	movw	r26, r28
     60e:	a9 5b       	subi	r26, 0xB9	; 185
     610:	bf 4f       	sbci	r27, 0xFF	; 255
     612:	fe 01       	movw	r30, r28
     614:	e5 5b       	subi	r30, 0xB5	; 181
     616:	ff 4f       	sbci	r31, 0xFF	; 255
     618:	80 81       	ld	r24, Z
     61a:	91 81       	ldd	r25, Z+1	; 0x01
     61c:	8d 93       	st	X+, r24
     61e:	9c 93       	st	X, r25
     620:	fe 01       	movw	r30, r28
     622:	e9 5b       	subi	r30, 0xB9	; 185
     624:	ff 4f       	sbci	r31, 0xFF	; 255
     626:	80 81       	ld	r24, Z
     628:	91 81       	ldd	r25, Z+1	; 0x01
     62a:	01 97       	sbiw	r24, 0x01	; 1
     62c:	f1 f7       	brne	.-4      	; 0x62a <lcd_set_4bit+0x47e>
     62e:	fe 01       	movw	r30, r28
     630:	e9 5b       	subi	r30, 0xB9	; 185
     632:	ff 4f       	sbci	r31, 0xFF	; 255
     634:	91 83       	std	Z+1, r25	; 0x01
     636:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     638:	a8 e2       	ldi	r26, 0x28	; 40
     63a:	b0 e0       	ldi	r27, 0x00	; 0
     63c:	e8 e2       	ldi	r30, 0x28	; 40
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	80 81       	ld	r24, Z
     642:	8e 7f       	andi	r24, 0xFE	; 254
     644:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     646:	a8 e2       	ldi	r26, 0x28	; 40
     648:	b0 e0       	ldi	r27, 0x00	; 0
     64a:	e8 e2       	ldi	r30, 0x28	; 40
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	80 81       	ld	r24, Z
     650:	8d 7f       	andi	r24, 0xFD	; 253
     652:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     654:	e8 e2       	ldi	r30, 0x28	; 40
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	80 e3       	ldi	r24, 0x30	; 48
     65a:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     65c:	a8 e2       	ldi	r26, 0x28	; 40
     65e:	b0 e0       	ldi	r27, 0x00	; 0
     660:	e8 e2       	ldi	r30, 0x28	; 40
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	80 81       	ld	r24, Z
     666:	84 60       	ori	r24, 0x04	; 4
     668:	8c 93       	st	X, r24
     66a:	fe 01       	movw	r30, r28
     66c:	ed 5b       	subi	r30, 0xBD	; 189
     66e:	ff 4f       	sbci	r31, 0xFF	; 255
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	a0 ea       	ldi	r26, 0xA0	; 160
     676:	b0 e4       	ldi	r27, 0x40	; 64
     678:	80 83       	st	Z, r24
     67a:	91 83       	std	Z+1, r25	; 0x01
     67c:	a2 83       	std	Z+2, r26	; 0x02
     67e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     680:	8e 01       	movw	r16, r28
     682:	01 5c       	subi	r16, 0xC1	; 193
     684:	1f 4f       	sbci	r17, 0xFF	; 255
     686:	fe 01       	movw	r30, r28
     688:	ed 5b       	subi	r30, 0xBD	; 189
     68a:	ff 4f       	sbci	r31, 0xFF	; 255
     68c:	60 81       	ld	r22, Z
     68e:	71 81       	ldd	r23, Z+1	; 0x01
     690:	82 81       	ldd	r24, Z+2	; 0x02
     692:	93 81       	ldd	r25, Z+3	; 0x03
     694:	2d ec       	ldi	r18, 0xCD	; 205
     696:	3c ec       	ldi	r19, 0xCC	; 204
     698:	4c e2       	ldi	r20, 0x2C	; 44
     69a:	55 e4       	ldi	r21, 0x45	; 69
     69c:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
     6a0:	dc 01       	movw	r26, r24
     6a2:	cb 01       	movw	r24, r22
     6a4:	f8 01       	movw	r30, r16
     6a6:	80 83       	st	Z, r24
     6a8:	91 83       	std	Z+1, r25	; 0x01
     6aa:	a2 83       	std	Z+2, r26	; 0x02
     6ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     6ae:	fe 01       	movw	r30, r28
     6b0:	ff 96       	adiw	r30, 0x3f	; 63
     6b2:	60 81       	ld	r22, Z
     6b4:	71 81       	ldd	r23, Z+1	; 0x01
     6b6:	82 81       	ldd	r24, Z+2	; 0x02
     6b8:	93 81       	ldd	r25, Z+3	; 0x03
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	40 e8       	ldi	r20, 0x80	; 128
     6c0:	5f e3       	ldi	r21, 0x3F	; 63
     6c2:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__ltsf2>
     6c6:	88 23       	and	r24, r24
     6c8:	2c f4       	brge	.+10     	; 0x6d4 <lcd_set_4bit+0x528>
		__ticks = 1;
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	9e af       	std	Y+62, r25	; 0x3e
     6d0:	8d af       	std	Y+61, r24	; 0x3d
     6d2:	46 c0       	rjmp	.+140    	; 0x760 <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     6d4:	fe 01       	movw	r30, r28
     6d6:	ff 96       	adiw	r30, 0x3f	; 63
     6d8:	60 81       	ld	r22, Z
     6da:	71 81       	ldd	r23, Z+1	; 0x01
     6dc:	82 81       	ldd	r24, Z+2	; 0x02
     6de:	93 81       	ldd	r25, Z+3	; 0x03
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	3f ef       	ldi	r19, 0xFF	; 255
     6e4:	4f e7       	ldi	r20, 0x7F	; 127
     6e6:	57 e4       	ldi	r21, 0x47	; 71
     6e8:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <__gtsf2>
     6ec:	18 16       	cp	r1, r24
     6ee:	64 f5       	brge	.+88     	; 0x748 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6f0:	fe 01       	movw	r30, r28
     6f2:	ed 5b       	subi	r30, 0xBD	; 189
     6f4:	ff 4f       	sbci	r31, 0xFF	; 255
     6f6:	60 81       	ld	r22, Z
     6f8:	71 81       	ldd	r23, Z+1	; 0x01
     6fa:	82 81       	ldd	r24, Z+2	; 0x02
     6fc:	93 81       	ldd	r25, Z+3	; 0x03
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	40 e2       	ldi	r20, 0x20	; 32
     704:	51 e4       	ldi	r21, 0x41	; 65
     706:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
     70a:	dc 01       	movw	r26, r24
     70c:	cb 01       	movw	r24, r22
     70e:	bc 01       	movw	r22, r24
     710:	cd 01       	movw	r24, r26
     712:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fixunssfsi>
     716:	dc 01       	movw	r26, r24
     718:	cb 01       	movw	r24, r22
     71a:	9e af       	std	Y+62, r25	; 0x3e
     71c:	8d af       	std	Y+61, r24	; 0x3d
     71e:	0f c0       	rjmp	.+30     	; 0x73e <lcd_set_4bit+0x592>
     720:	84 e1       	ldi	r24, 0x14	; 20
     722:	91 e0       	ldi	r25, 0x01	; 1
     724:	9c af       	std	Y+60, r25	; 0x3c
     726:	8b af       	std	Y+59, r24	; 0x3b
     728:	8b ad       	ldd	r24, Y+59	; 0x3b
     72a:	9c ad       	ldd	r25, Y+60	; 0x3c
     72c:	01 97       	sbiw	r24, 0x01	; 1
     72e:	f1 f7       	brne	.-4      	; 0x72c <lcd_set_4bit+0x580>
     730:	9c af       	std	Y+60, r25	; 0x3c
     732:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     734:	8d ad       	ldd	r24, Y+61	; 0x3d
     736:	9e ad       	ldd	r25, Y+62	; 0x3e
     738:	01 97       	sbiw	r24, 0x01	; 1
     73a:	9e af       	std	Y+62, r25	; 0x3e
     73c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     73e:	8d ad       	ldd	r24, Y+61	; 0x3d
     740:	9e ad       	ldd	r25, Y+62	; 0x3e
     742:	00 97       	sbiw	r24, 0x00	; 0
     744:	69 f7       	brne	.-38     	; 0x720 <lcd_set_4bit+0x574>
     746:	16 c0       	rjmp	.+44     	; 0x774 <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     748:	fe 01       	movw	r30, r28
     74a:	ff 96       	adiw	r30, 0x3f	; 63
     74c:	60 81       	ld	r22, Z
     74e:	71 81       	ldd	r23, Z+1	; 0x01
     750:	82 81       	ldd	r24, Z+2	; 0x02
     752:	93 81       	ldd	r25, Z+3	; 0x03
     754:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fixunssfsi>
     758:	dc 01       	movw	r26, r24
     75a:	cb 01       	movw	r24, r22
     75c:	9e af       	std	Y+62, r25	; 0x3e
     75e:	8d af       	std	Y+61, r24	; 0x3d
     760:	8d ad       	ldd	r24, Y+61	; 0x3d
     762:	9e ad       	ldd	r25, Y+62	; 0x3e
     764:	9a af       	std	Y+58, r25	; 0x3a
     766:	89 af       	std	Y+57, r24	; 0x39
     768:	89 ad       	ldd	r24, Y+57	; 0x39
     76a:	9a ad       	ldd	r25, Y+58	; 0x3a
     76c:	01 97       	sbiw	r24, 0x01	; 1
     76e:	f1 f7       	brne	.-4      	; 0x76c <lcd_set_4bit+0x5c0>
     770:	9a af       	std	Y+58, r25	; 0x3a
     772:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     774:	a8 e2       	ldi	r26, 0x28	; 40
     776:	b0 e0       	ldi	r27, 0x00	; 0
     778:	e8 e2       	ldi	r30, 0x28	; 40
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	80 81       	ld	r24, Z
     77e:	8b 7f       	andi	r24, 0xFB	; 251
     780:	8c 93       	st	X, r24
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	a0 e8       	ldi	r26, 0x80	; 128
     788:	bf e3       	ldi	r27, 0x3F	; 63
     78a:	8d ab       	std	Y+53, r24	; 0x35
     78c:	9e ab       	std	Y+54, r25	; 0x36
     78e:	af ab       	std	Y+55, r26	; 0x37
     790:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     792:	6d a9       	ldd	r22, Y+53	; 0x35
     794:	7e a9       	ldd	r23, Y+54	; 0x36
     796:	8f a9       	ldd	r24, Y+55	; 0x37
     798:	98 ad       	ldd	r25, Y+56	; 0x38
     79a:	2d ec       	ldi	r18, 0xCD	; 205
     79c:	3c ec       	ldi	r19, 0xCC	; 204
     79e:	4c e2       	ldi	r20, 0x2C	; 44
     7a0:	55 e4       	ldi	r21, 0x45	; 69
     7a2:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
     7a6:	dc 01       	movw	r26, r24
     7a8:	cb 01       	movw	r24, r22
     7aa:	89 ab       	std	Y+49, r24	; 0x31
     7ac:	9a ab       	std	Y+50, r25	; 0x32
     7ae:	ab ab       	std	Y+51, r26	; 0x33
     7b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     7b2:	69 a9       	ldd	r22, Y+49	; 0x31
     7b4:	7a a9       	ldd	r23, Y+50	; 0x32
     7b6:	8b a9       	ldd	r24, Y+51	; 0x33
     7b8:	9c a9       	ldd	r25, Y+52	; 0x34
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	40 e8       	ldi	r20, 0x80	; 128
     7c0:	5f e3       	ldi	r21, 0x3F	; 63
     7c2:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__ltsf2>
     7c6:	88 23       	and	r24, r24
     7c8:	2c f4       	brge	.+10     	; 0x7d4 <lcd_set_4bit+0x628>
		__ticks = 1;
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	98 ab       	std	Y+48, r25	; 0x30
     7d0:	8f a7       	std	Y+47, r24	; 0x2f
     7d2:	3f c0       	rjmp	.+126    	; 0x852 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     7d4:	69 a9       	ldd	r22, Y+49	; 0x31
     7d6:	7a a9       	ldd	r23, Y+50	; 0x32
     7d8:	8b a9       	ldd	r24, Y+51	; 0x33
     7da:	9c a9       	ldd	r25, Y+52	; 0x34
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f e7       	ldi	r20, 0x7F	; 127
     7e2:	57 e4       	ldi	r21, 0x47	; 71
     7e4:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <__gtsf2>
     7e8:	18 16       	cp	r1, r24
     7ea:	4c f5       	brge	.+82     	; 0x83e <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7ec:	6d a9       	ldd	r22, Y+53	; 0x35
     7ee:	7e a9       	ldd	r23, Y+54	; 0x36
     7f0:	8f a9       	ldd	r24, Y+55	; 0x37
     7f2:	98 ad       	ldd	r25, Y+56	; 0x38
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	40 e2       	ldi	r20, 0x20	; 32
     7fa:	51 e4       	ldi	r21, 0x41	; 65
     7fc:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
     800:	dc 01       	movw	r26, r24
     802:	cb 01       	movw	r24, r22
     804:	bc 01       	movw	r22, r24
     806:	cd 01       	movw	r24, r26
     808:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fixunssfsi>
     80c:	dc 01       	movw	r26, r24
     80e:	cb 01       	movw	r24, r22
     810:	98 ab       	std	Y+48, r25	; 0x30
     812:	8f a7       	std	Y+47, r24	; 0x2f
     814:	0f c0       	rjmp	.+30     	; 0x834 <lcd_set_4bit+0x688>
     816:	84 e1       	ldi	r24, 0x14	; 20
     818:	91 e0       	ldi	r25, 0x01	; 1
     81a:	9e a7       	std	Y+46, r25	; 0x2e
     81c:	8d a7       	std	Y+45, r24	; 0x2d
     81e:	8d a5       	ldd	r24, Y+45	; 0x2d
     820:	9e a5       	ldd	r25, Y+46	; 0x2e
     822:	01 97       	sbiw	r24, 0x01	; 1
     824:	f1 f7       	brne	.-4      	; 0x822 <lcd_set_4bit+0x676>
     826:	9e a7       	std	Y+46, r25	; 0x2e
     828:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     82a:	8f a5       	ldd	r24, Y+47	; 0x2f
     82c:	98 a9       	ldd	r25, Y+48	; 0x30
     82e:	01 97       	sbiw	r24, 0x01	; 1
     830:	98 ab       	std	Y+48, r25	; 0x30
     832:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     834:	8f a5       	ldd	r24, Y+47	; 0x2f
     836:	98 a9       	ldd	r25, Y+48	; 0x30
     838:	00 97       	sbiw	r24, 0x00	; 0
     83a:	69 f7       	brne	.-38     	; 0x816 <lcd_set_4bit+0x66a>
     83c:	14 c0       	rjmp	.+40     	; 0x866 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     83e:	69 a9       	ldd	r22, Y+49	; 0x31
     840:	7a a9       	ldd	r23, Y+50	; 0x32
     842:	8b a9       	ldd	r24, Y+51	; 0x33
     844:	9c a9       	ldd	r25, Y+52	; 0x34
     846:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fixunssfsi>
     84a:	dc 01       	movw	r26, r24
     84c:	cb 01       	movw	r24, r22
     84e:	98 ab       	std	Y+48, r25	; 0x30
     850:	8f a7       	std	Y+47, r24	; 0x2f
     852:	8f a5       	ldd	r24, Y+47	; 0x2f
     854:	98 a9       	ldd	r25, Y+48	; 0x30
     856:	9c a7       	std	Y+44, r25	; 0x2c
     858:	8b a7       	std	Y+43, r24	; 0x2b
     85a:	8b a5       	ldd	r24, Y+43	; 0x2b
     85c:	9c a5       	ldd	r25, Y+44	; 0x2c
     85e:	01 97       	sbiw	r24, 0x01	; 1
     860:	f1 f7       	brne	.-4      	; 0x85e <lcd_set_4bit+0x6b2>
     862:	9c a7       	std	Y+44, r25	; 0x2c
     864:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     866:	a8 e2       	ldi	r26, 0x28	; 40
     868:	b0 e0       	ldi	r27, 0x00	; 0
     86a:	e8 e2       	ldi	r30, 0x28	; 40
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	80 81       	ld	r24, Z
     870:	8e 7f       	andi	r24, 0xFE	; 254
     872:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     874:	a8 e2       	ldi	r26, 0x28	; 40
     876:	b0 e0       	ldi	r27, 0x00	; 0
     878:	e8 e2       	ldi	r30, 0x28	; 40
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	80 81       	ld	r24, Z
     87e:	8d 7f       	andi	r24, 0xFD	; 253
     880:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     882:	e8 e2       	ldi	r30, 0x28	; 40
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	80 e3       	ldi	r24, 0x30	; 48
     888:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     88a:	a8 e2       	ldi	r26, 0x28	; 40
     88c:	b0 e0       	ldi	r27, 0x00	; 0
     88e:	e8 e2       	ldi	r30, 0x28	; 40
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	80 81       	ld	r24, Z
     894:	84 60       	ori	r24, 0x04	; 4
     896:	8c 93       	st	X, r24
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	a0 ea       	ldi	r26, 0xA0	; 160
     89e:	b0 e4       	ldi	r27, 0x40	; 64
     8a0:	8f a3       	std	Y+39, r24	; 0x27
     8a2:	98 a7       	std	Y+40, r25	; 0x28
     8a4:	a9 a7       	std	Y+41, r26	; 0x29
     8a6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8a8:	6f a1       	ldd	r22, Y+39	; 0x27
     8aa:	78 a5       	ldd	r23, Y+40	; 0x28
     8ac:	89 a5       	ldd	r24, Y+41	; 0x29
     8ae:	9a a5       	ldd	r25, Y+42	; 0x2a
     8b0:	2d ec       	ldi	r18, 0xCD	; 205
     8b2:	3c ec       	ldi	r19, 0xCC	; 204
     8b4:	4c e2       	ldi	r20, 0x2C	; 44
     8b6:	55 e4       	ldi	r21, 0x45	; 69
     8b8:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
     8bc:	dc 01       	movw	r26, r24
     8be:	cb 01       	movw	r24, r22
     8c0:	8b a3       	std	Y+35, r24	; 0x23
     8c2:	9c a3       	std	Y+36, r25	; 0x24
     8c4:	ad a3       	std	Y+37, r26	; 0x25
     8c6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     8c8:	6b a1       	ldd	r22, Y+35	; 0x23
     8ca:	7c a1       	ldd	r23, Y+36	; 0x24
     8cc:	8d a1       	ldd	r24, Y+37	; 0x25
     8ce:	9e a1       	ldd	r25, Y+38	; 0x26
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	40 e8       	ldi	r20, 0x80	; 128
     8d6:	5f e3       	ldi	r21, 0x3F	; 63
     8d8:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__ltsf2>
     8dc:	88 23       	and	r24, r24
     8de:	2c f4       	brge	.+10     	; 0x8ea <lcd_set_4bit+0x73e>
		__ticks = 1;
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	9a a3       	std	Y+34, r25	; 0x22
     8e6:	89 a3       	std	Y+33, r24	; 0x21
     8e8:	3f c0       	rjmp	.+126    	; 0x968 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     8ea:	6b a1       	ldd	r22, Y+35	; 0x23
     8ec:	7c a1       	ldd	r23, Y+36	; 0x24
     8ee:	8d a1       	ldd	r24, Y+37	; 0x25
     8f0:	9e a1       	ldd	r25, Y+38	; 0x26
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	3f ef       	ldi	r19, 0xFF	; 255
     8f6:	4f e7       	ldi	r20, 0x7F	; 127
     8f8:	57 e4       	ldi	r21, 0x47	; 71
     8fa:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <__gtsf2>
     8fe:	18 16       	cp	r1, r24
     900:	4c f5       	brge	.+82     	; 0x954 <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     902:	6f a1       	ldd	r22, Y+39	; 0x27
     904:	78 a5       	ldd	r23, Y+40	; 0x28
     906:	89 a5       	ldd	r24, Y+41	; 0x29
     908:	9a a5       	ldd	r25, Y+42	; 0x2a
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 e2       	ldi	r20, 0x20	; 32
     910:	51 e4       	ldi	r21, 0x41	; 65
     912:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
     916:	dc 01       	movw	r26, r24
     918:	cb 01       	movw	r24, r22
     91a:	bc 01       	movw	r22, r24
     91c:	cd 01       	movw	r24, r26
     91e:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fixunssfsi>
     922:	dc 01       	movw	r26, r24
     924:	cb 01       	movw	r24, r22
     926:	9a a3       	std	Y+34, r25	; 0x22
     928:	89 a3       	std	Y+33, r24	; 0x21
     92a:	0f c0       	rjmp	.+30     	; 0x94a <lcd_set_4bit+0x79e>
     92c:	84 e1       	ldi	r24, 0x14	; 20
     92e:	91 e0       	ldi	r25, 0x01	; 1
     930:	98 a3       	std	Y+32, r25	; 0x20
     932:	8f 8f       	std	Y+31, r24	; 0x1f
     934:	8f 8d       	ldd	r24, Y+31	; 0x1f
     936:	98 a1       	ldd	r25, Y+32	; 0x20
     938:	01 97       	sbiw	r24, 0x01	; 1
     93a:	f1 f7       	brne	.-4      	; 0x938 <lcd_set_4bit+0x78c>
     93c:	98 a3       	std	Y+32, r25	; 0x20
     93e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     940:	89 a1       	ldd	r24, Y+33	; 0x21
     942:	9a a1       	ldd	r25, Y+34	; 0x22
     944:	01 97       	sbiw	r24, 0x01	; 1
     946:	9a a3       	std	Y+34, r25	; 0x22
     948:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     94a:	89 a1       	ldd	r24, Y+33	; 0x21
     94c:	9a a1       	ldd	r25, Y+34	; 0x22
     94e:	00 97       	sbiw	r24, 0x00	; 0
     950:	69 f7       	brne	.-38     	; 0x92c <lcd_set_4bit+0x780>
     952:	14 c0       	rjmp	.+40     	; 0x97c <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     954:	6b a1       	ldd	r22, Y+35	; 0x23
     956:	7c a1       	ldd	r23, Y+36	; 0x24
     958:	8d a1       	ldd	r24, Y+37	; 0x25
     95a:	9e a1       	ldd	r25, Y+38	; 0x26
     95c:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fixunssfsi>
     960:	dc 01       	movw	r26, r24
     962:	cb 01       	movw	r24, r22
     964:	9a a3       	std	Y+34, r25	; 0x22
     966:	89 a3       	std	Y+33, r24	; 0x21
     968:	89 a1       	ldd	r24, Y+33	; 0x21
     96a:	9a a1       	ldd	r25, Y+34	; 0x22
     96c:	9e 8f       	std	Y+30, r25	; 0x1e
     96e:	8d 8f       	std	Y+29, r24	; 0x1d
     970:	8d 8d       	ldd	r24, Y+29	; 0x1d
     972:	9e 8d       	ldd	r25, Y+30	; 0x1e
     974:	01 97       	sbiw	r24, 0x01	; 1
     976:	f1 f7       	brne	.-4      	; 0x974 <lcd_set_4bit+0x7c8>
     978:	9e 8f       	std	Y+30, r25	; 0x1e
     97a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     97c:	a8 e2       	ldi	r26, 0x28	; 40
     97e:	b0 e0       	ldi	r27, 0x00	; 0
     980:	e8 e2       	ldi	r30, 0x28	; 40
     982:	f0 e0       	ldi	r31, 0x00	; 0
     984:	80 81       	ld	r24, Z
     986:	8b 7f       	andi	r24, 0xFB	; 251
     988:	8c 93       	st	X, r24
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	a0 e8       	ldi	r26, 0x80	; 128
     990:	bf e3       	ldi	r27, 0x3F	; 63
     992:	89 8f       	std	Y+25, r24	; 0x19
     994:	9a 8f       	std	Y+26, r25	; 0x1a
     996:	ab 8f       	std	Y+27, r26	; 0x1b
     998:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     99a:	69 8d       	ldd	r22, Y+25	; 0x19
     99c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     99e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9a2:	2d ec       	ldi	r18, 0xCD	; 205
     9a4:	3c ec       	ldi	r19, 0xCC	; 204
     9a6:	4c e2       	ldi	r20, 0x2C	; 44
     9a8:	55 e4       	ldi	r21, 0x45	; 69
     9aa:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
     9ae:	dc 01       	movw	r26, r24
     9b0:	cb 01       	movw	r24, r22
     9b2:	8d 8b       	std	Y+21, r24	; 0x15
     9b4:	9e 8b       	std	Y+22, r25	; 0x16
     9b6:	af 8b       	std	Y+23, r26	; 0x17
     9b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     9ba:	6d 89       	ldd	r22, Y+21	; 0x15
     9bc:	7e 89       	ldd	r23, Y+22	; 0x16
     9be:	8f 89       	ldd	r24, Y+23	; 0x17
     9c0:	98 8d       	ldd	r25, Y+24	; 0x18
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	40 e8       	ldi	r20, 0x80	; 128
     9c8:	5f e3       	ldi	r21, 0x3F	; 63
     9ca:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__ltsf2>
     9ce:	88 23       	and	r24, r24
     9d0:	2c f4       	brge	.+10     	; 0x9dc <lcd_set_4bit+0x830>
		__ticks = 1;
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	9c 8b       	std	Y+20, r25	; 0x14
     9d8:	8b 8b       	std	Y+19, r24	; 0x13
     9da:	3f c0       	rjmp	.+126    	; 0xa5a <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     9dc:	6d 89       	ldd	r22, Y+21	; 0x15
     9de:	7e 89       	ldd	r23, Y+22	; 0x16
     9e0:	8f 89       	ldd	r24, Y+23	; 0x17
     9e2:	98 8d       	ldd	r25, Y+24	; 0x18
     9e4:	20 e0       	ldi	r18, 0x00	; 0
     9e6:	3f ef       	ldi	r19, 0xFF	; 255
     9e8:	4f e7       	ldi	r20, 0x7F	; 127
     9ea:	57 e4       	ldi	r21, 0x47	; 71
     9ec:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <__gtsf2>
     9f0:	18 16       	cp	r1, r24
     9f2:	4c f5       	brge	.+82     	; 0xa46 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9f4:	69 8d       	ldd	r22, Y+25	; 0x19
     9f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     9f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	40 e2       	ldi	r20, 0x20	; 32
     a02:	51 e4       	ldi	r21, 0x41	; 65
     a04:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
     a08:	dc 01       	movw	r26, r24
     a0a:	cb 01       	movw	r24, r22
     a0c:	bc 01       	movw	r22, r24
     a0e:	cd 01       	movw	r24, r26
     a10:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fixunssfsi>
     a14:	dc 01       	movw	r26, r24
     a16:	cb 01       	movw	r24, r22
     a18:	9c 8b       	std	Y+20, r25	; 0x14
     a1a:	8b 8b       	std	Y+19, r24	; 0x13
     a1c:	0f c0       	rjmp	.+30     	; 0xa3c <lcd_set_4bit+0x890>
     a1e:	84 e1       	ldi	r24, 0x14	; 20
     a20:	91 e0       	ldi	r25, 0x01	; 1
     a22:	9a 8b       	std	Y+18, r25	; 0x12
     a24:	89 8b       	std	Y+17, r24	; 0x11
     a26:	89 89       	ldd	r24, Y+17	; 0x11
     a28:	9a 89       	ldd	r25, Y+18	; 0x12
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	f1 f7       	brne	.-4      	; 0xa2a <lcd_set_4bit+0x87e>
     a2e:	9a 8b       	std	Y+18, r25	; 0x12
     a30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a32:	8b 89       	ldd	r24, Y+19	; 0x13
     a34:	9c 89       	ldd	r25, Y+20	; 0x14
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	9c 8b       	std	Y+20, r25	; 0x14
     a3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a3c:	8b 89       	ldd	r24, Y+19	; 0x13
     a3e:	9c 89       	ldd	r25, Y+20	; 0x14
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	69 f7       	brne	.-38     	; 0xa1e <lcd_set_4bit+0x872>
     a44:	14 c0       	rjmp	.+40     	; 0xa6e <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a46:	6d 89       	ldd	r22, Y+21	; 0x15
     a48:	7e 89       	ldd	r23, Y+22	; 0x16
     a4a:	8f 89       	ldd	r24, Y+23	; 0x17
     a4c:	98 8d       	ldd	r25, Y+24	; 0x18
     a4e:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fixunssfsi>
     a52:	dc 01       	movw	r26, r24
     a54:	cb 01       	movw	r24, r22
     a56:	9c 8b       	std	Y+20, r25	; 0x14
     a58:	8b 8b       	std	Y+19, r24	; 0x13
     a5a:	8b 89       	ldd	r24, Y+19	; 0x13
     a5c:	9c 89       	ldd	r25, Y+20	; 0x14
     a5e:	98 8b       	std	Y+16, r25	; 0x10
     a60:	8f 87       	std	Y+15, r24	; 0x0f
     a62:	8f 85       	ldd	r24, Y+15	; 0x0f
     a64:	98 89       	ldd	r25, Y+16	; 0x10
     a66:	01 97       	sbiw	r24, 0x01	; 1
     a68:	f1 f7       	brne	.-4      	; 0xa66 <lcd_set_4bit+0x8ba>
     a6a:	98 8b       	std	Y+16, r25	; 0x10
     a6c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     a6e:	a8 e2       	ldi	r26, 0x28	; 40
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	e8 e2       	ldi	r30, 0x28	; 40
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	80 81       	ld	r24, Z
     a78:	8e 7f       	andi	r24, 0xFE	; 254
     a7a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     a7c:	a8 e2       	ldi	r26, 0x28	; 40
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	e8 e2       	ldi	r30, 0x28	; 40
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	80 81       	ld	r24, Z
     a86:	8d 7f       	andi	r24, 0xFD	; 253
     a88:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     a8a:	e8 e2       	ldi	r30, 0x28	; 40
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	80 e2       	ldi	r24, 0x20	; 32
     a90:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     a92:	a8 e2       	ldi	r26, 0x28	; 40
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	e8 e2       	ldi	r30, 0x28	; 40
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	80 81       	ld	r24, Z
     a9c:	84 60       	ori	r24, 0x04	; 4
     a9e:	8c 93       	st	X, r24
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 ea       	ldi	r26, 0xA0	; 160
     aa6:	b0 e4       	ldi	r27, 0x40	; 64
     aa8:	8b 87       	std	Y+11, r24	; 0x0b
     aaa:	9c 87       	std	Y+12, r25	; 0x0c
     aac:	ad 87       	std	Y+13, r26	; 0x0d
     aae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ab0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ab2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ab4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ab6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ab8:	2d ec       	ldi	r18, 0xCD	; 205
     aba:	3c ec       	ldi	r19, 0xCC	; 204
     abc:	4c e2       	ldi	r20, 0x2C	; 44
     abe:	55 e4       	ldi	r21, 0x45	; 69
     ac0:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
     ac4:	dc 01       	movw	r26, r24
     ac6:	cb 01       	movw	r24, r22
     ac8:	8f 83       	std	Y+7, r24	; 0x07
     aca:	98 87       	std	Y+8, r25	; 0x08
     acc:	a9 87       	std	Y+9, r26	; 0x09
     ace:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ad0:	6f 81       	ldd	r22, Y+7	; 0x07
     ad2:	78 85       	ldd	r23, Y+8	; 0x08
     ad4:	89 85       	ldd	r24, Y+9	; 0x09
     ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ad8:	20 e0       	ldi	r18, 0x00	; 0
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	40 e8       	ldi	r20, 0x80	; 128
     ade:	5f e3       	ldi	r21, 0x3F	; 63
     ae0:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__ltsf2>
     ae4:	88 23       	and	r24, r24
     ae6:	2c f4       	brge	.+10     	; 0xaf2 <lcd_set_4bit+0x946>
		__ticks = 1;
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	9e 83       	std	Y+6, r25	; 0x06
     aee:	8d 83       	std	Y+5, r24	; 0x05
     af0:	3f c0       	rjmp	.+126    	; 0xb70 <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
     af2:	6f 81       	ldd	r22, Y+7	; 0x07
     af4:	78 85       	ldd	r23, Y+8	; 0x08
     af6:	89 85       	ldd	r24, Y+9	; 0x09
     af8:	9a 85       	ldd	r25, Y+10	; 0x0a
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	3f ef       	ldi	r19, 0xFF	; 255
     afe:	4f e7       	ldi	r20, 0x7F	; 127
     b00:	57 e4       	ldi	r21, 0x47	; 71
     b02:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <__gtsf2>
     b06:	18 16       	cp	r1, r24
     b08:	4c f5       	brge	.+82     	; 0xb5c <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b0a:	6b 85       	ldd	r22, Y+11	; 0x0b
     b0c:	7c 85       	ldd	r23, Y+12	; 0x0c
     b0e:	8d 85       	ldd	r24, Y+13	; 0x0d
     b10:	9e 85       	ldd	r25, Y+14	; 0x0e
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	40 e2       	ldi	r20, 0x20	; 32
     b18:	51 e4       	ldi	r21, 0x41	; 65
     b1a:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
     b1e:	dc 01       	movw	r26, r24
     b20:	cb 01       	movw	r24, r22
     b22:	bc 01       	movw	r22, r24
     b24:	cd 01       	movw	r24, r26
     b26:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fixunssfsi>
     b2a:	dc 01       	movw	r26, r24
     b2c:	cb 01       	movw	r24, r22
     b2e:	9e 83       	std	Y+6, r25	; 0x06
     b30:	8d 83       	std	Y+5, r24	; 0x05
     b32:	0f c0       	rjmp	.+30     	; 0xb52 <lcd_set_4bit+0x9a6>
     b34:	84 e1       	ldi	r24, 0x14	; 20
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	9c 83       	std	Y+4, r25	; 0x04
     b3a:	8b 83       	std	Y+3, r24	; 0x03
     b3c:	8b 81       	ldd	r24, Y+3	; 0x03
     b3e:	9c 81       	ldd	r25, Y+4	; 0x04
     b40:	01 97       	sbiw	r24, 0x01	; 1
     b42:	f1 f7       	brne	.-4      	; 0xb40 <lcd_set_4bit+0x994>
     b44:	9c 83       	std	Y+4, r25	; 0x04
     b46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b48:	8d 81       	ldd	r24, Y+5	; 0x05
     b4a:	9e 81       	ldd	r25, Y+6	; 0x06
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	9e 83       	std	Y+6, r25	; 0x06
     b50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b52:	8d 81       	ldd	r24, Y+5	; 0x05
     b54:	9e 81       	ldd	r25, Y+6	; 0x06
     b56:	00 97       	sbiw	r24, 0x00	; 0
     b58:	69 f7       	brne	.-38     	; 0xb34 <lcd_set_4bit+0x988>
     b5a:	14 c0       	rjmp	.+40     	; 0xb84 <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b5c:	6f 81       	ldd	r22, Y+7	; 0x07
     b5e:	78 85       	ldd	r23, Y+8	; 0x08
     b60:	89 85       	ldd	r24, Y+9	; 0x09
     b62:	9a 85       	ldd	r25, Y+10	; 0x0a
     b64:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fixunssfsi>
     b68:	dc 01       	movw	r26, r24
     b6a:	cb 01       	movw	r24, r22
     b6c:	9e 83       	std	Y+6, r25	; 0x06
     b6e:	8d 83       	std	Y+5, r24	; 0x05
     b70:	8d 81       	ldd	r24, Y+5	; 0x05
     b72:	9e 81       	ldd	r25, Y+6	; 0x06
     b74:	9a 83       	std	Y+2, r25	; 0x02
     b76:	89 83       	std	Y+1, r24	; 0x01
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	9a 81       	ldd	r25, Y+2	; 0x02
     b7c:	01 97       	sbiw	r24, 0x01	; 1
     b7e:	f1 f7       	brne	.-4      	; 0xb7c <lcd_set_4bit+0x9d0>
     b80:	9a 83       	std	Y+2, r25	; 0x02
     b82:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     b84:	a8 e2       	ldi	r26, 0x28	; 40
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	e8 e2       	ldi	r30, 0x28	; 40
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	8b 7f       	andi	r24, 0xFB	; 251
     b90:	8c 93       	st	X, r24

	
}
     b92:	c0 59       	subi	r28, 0x90	; 144
     b94:	df 4f       	sbci	r29, 0xFF	; 255
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	cf 91       	pop	r28
     ba2:	df 91       	pop	r29
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	08 95       	ret

00000baa <lcd_init>:

/*****Function to Initialize LCD*****/
void lcd_init()
{
     baa:	df 93       	push	r29
     bac:	cf 93       	push	r28
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	2e 97       	sbiw	r28, 0x0e	; 14
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	cd bf       	out	0x3d, r28	; 61
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	a0 e8       	ldi	r26, 0x80	; 128
     bc4:	bf e3       	ldi	r27, 0x3F	; 63
     bc6:	8b 87       	std	Y+11, r24	; 0x0b
     bc8:	9c 87       	std	Y+12, r25	; 0x0c
     bca:	ad 87       	std	Y+13, r26	; 0x0d
     bcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bce:	6b 85       	ldd	r22, Y+11	; 0x0b
     bd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd6:	2d ec       	ldi	r18, 0xCD	; 205
     bd8:	3c ec       	ldi	r19, 0xCC	; 204
     bda:	4c e2       	ldi	r20, 0x2C	; 44
     bdc:	55 e4       	ldi	r21, 0x45	; 69
     bde:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
     be2:	dc 01       	movw	r26, r24
     be4:	cb 01       	movw	r24, r22
     be6:	8f 83       	std	Y+7, r24	; 0x07
     be8:	98 87       	std	Y+8, r25	; 0x08
     bea:	a9 87       	std	Y+9, r26	; 0x09
     bec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bee:	6f 81       	ldd	r22, Y+7	; 0x07
     bf0:	78 85       	ldd	r23, Y+8	; 0x08
     bf2:	89 85       	ldd	r24, Y+9	; 0x09
     bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf6:	20 e0       	ldi	r18, 0x00	; 0
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	40 e8       	ldi	r20, 0x80	; 128
     bfc:	5f e3       	ldi	r21, 0x3F	; 63
     bfe:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__ltsf2>
     c02:	88 23       	and	r24, r24
     c04:	2c f4       	brge	.+10     	; 0xc10 <lcd_init+0x66>
		__ticks = 1;
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	9e 83       	std	Y+6, r25	; 0x06
     c0c:	8d 83       	std	Y+5, r24	; 0x05
     c0e:	3f c0       	rjmp	.+126    	; 0xc8e <lcd_init+0xe4>
	else if (__tmp > 65535)
     c10:	6f 81       	ldd	r22, Y+7	; 0x07
     c12:	78 85       	ldd	r23, Y+8	; 0x08
     c14:	89 85       	ldd	r24, Y+9	; 0x09
     c16:	9a 85       	ldd	r25, Y+10	; 0x0a
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	3f ef       	ldi	r19, 0xFF	; 255
     c1c:	4f e7       	ldi	r20, 0x7F	; 127
     c1e:	57 e4       	ldi	r21, 0x47	; 71
     c20:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <__gtsf2>
     c24:	18 16       	cp	r1, r24
     c26:	4c f5       	brge	.+82     	; 0xc7a <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c28:	6b 85       	ldd	r22, Y+11	; 0x0b
     c2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     c2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	40 e2       	ldi	r20, 0x20	; 32
     c36:	51 e4       	ldi	r21, 0x41	; 65
     c38:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
     c3c:	dc 01       	movw	r26, r24
     c3e:	cb 01       	movw	r24, r22
     c40:	bc 01       	movw	r22, r24
     c42:	cd 01       	movw	r24, r26
     c44:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fixunssfsi>
     c48:	dc 01       	movw	r26, r24
     c4a:	cb 01       	movw	r24, r22
     c4c:	9e 83       	std	Y+6, r25	; 0x06
     c4e:	8d 83       	std	Y+5, r24	; 0x05
     c50:	0f c0       	rjmp	.+30     	; 0xc70 <lcd_init+0xc6>
     c52:	84 e1       	ldi	r24, 0x14	; 20
     c54:	91 e0       	ldi	r25, 0x01	; 1
     c56:	9c 83       	std	Y+4, r25	; 0x04
     c58:	8b 83       	std	Y+3, r24	; 0x03
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
     c5c:	9c 81       	ldd	r25, Y+4	; 0x04
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <lcd_init+0xb4>
     c62:	9c 83       	std	Y+4, r25	; 0x04
     c64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c66:	8d 81       	ldd	r24, Y+5	; 0x05
     c68:	9e 81       	ldd	r25, Y+6	; 0x06
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	9e 83       	std	Y+6, r25	; 0x06
     c6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c70:	8d 81       	ldd	r24, Y+5	; 0x05
     c72:	9e 81       	ldd	r25, Y+6	; 0x06
     c74:	00 97       	sbiw	r24, 0x00	; 0
     c76:	69 f7       	brne	.-38     	; 0xc52 <lcd_init+0xa8>
     c78:	14 c0       	rjmp	.+40     	; 0xca2 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c7a:	6f 81       	ldd	r22, Y+7	; 0x07
     c7c:	78 85       	ldd	r23, Y+8	; 0x08
     c7e:	89 85       	ldd	r24, Y+9	; 0x09
     c80:	9a 85       	ldd	r25, Y+10	; 0x0a
     c82:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fixunssfsi>
     c86:	dc 01       	movw	r26, r24
     c88:	cb 01       	movw	r24, r22
     c8a:	9e 83       	std	Y+6, r25	; 0x06
     c8c:	8d 83       	std	Y+5, r24	; 0x05
     c8e:	8d 81       	ldd	r24, Y+5	; 0x05
     c90:	9e 81       	ldd	r25, Y+6	; 0x06
     c92:	9a 83       	std	Y+2, r25	; 0x02
     c94:	89 83       	std	Y+1, r24	; 0x01
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	9a 81       	ldd	r25, Y+2	; 0x02
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	f1 f7       	brne	.-4      	; 0xc9a <lcd_init+0xf0>
     c9e:	9a 83       	std	Y+2, r25	; 0x02
     ca0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     ca2:	88 e2       	ldi	r24, 0x28	; 40
     ca4:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
	lcd_wr_command(0x01);
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
	lcd_wr_command(0x06);
     cae:	86 e0       	ldi	r24, 0x06	; 6
     cb0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
	lcd_wr_command(0x0E);
     cb4:	8e e0       	ldi	r24, 0x0E	; 14
     cb6:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
	lcd_wr_command(0x80);
     cba:	80 e8       	ldi	r24, 0x80	; 128
     cbc:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
		
}
     cc0:	2e 96       	adiw	r28, 0x0e	; 14
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	f8 94       	cli
     cc6:	de bf       	out	0x3e, r29	; 62
     cc8:	0f be       	out	0x3f, r0	; 63
     cca:	cd bf       	out	0x3d, r28	; 61
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <lcd_wr_command>:

	 
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	6e 97       	sbiw	r28, 0x1e	; 30
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	cd bf       	out	0x3d, r28	; 61
     ce6:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     ce8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cea:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
     cec:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cee:	80 7f       	andi	r24, 0xF0	; 240
     cf0:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     cf2:	a8 e2       	ldi	r26, 0x28	; 40
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e8 e2       	ldi	r30, 0x28	; 40
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	8f 70       	andi	r24, 0x0F	; 15
     cfe:	8c 93       	st	X, r24
	lcd_port |= temp;
     d00:	a8 e2       	ldi	r26, 0x28	; 40
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e8 e2       	ldi	r30, 0x28	; 40
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	90 81       	ld	r25, Z
     d0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d0c:	89 2b       	or	r24, r25
     d0e:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     d10:	a8 e2       	ldi	r26, 0x28	; 40
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e8 e2       	ldi	r30, 0x28	; 40
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	8e 7f       	andi	r24, 0xFE	; 254
     d1c:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     d1e:	a8 e2       	ldi	r26, 0x28	; 40
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e8 e2       	ldi	r30, 0x28	; 40
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	8d 7f       	andi	r24, 0xFD	; 253
     d2a:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     d2c:	a8 e2       	ldi	r26, 0x28	; 40
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e8 e2       	ldi	r30, 0x28	; 40
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	84 60       	ori	r24, 0x04	; 4
     d38:	8c 93       	st	X, r24
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	a0 ea       	ldi	r26, 0xA0	; 160
     d40:	b0 e4       	ldi	r27, 0x40	; 64
     d42:	89 8f       	std	Y+25, r24	; 0x19
     d44:	9a 8f       	std	Y+26, r25	; 0x1a
     d46:	ab 8f       	std	Y+27, r26	; 0x1b
     d48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d4a:	69 8d       	ldd	r22, Y+25	; 0x19
     d4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d50:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d52:	2d ec       	ldi	r18, 0xCD	; 205
     d54:	3c ec       	ldi	r19, 0xCC	; 204
     d56:	4c e2       	ldi	r20, 0x2C	; 44
     d58:	55 e4       	ldi	r21, 0x45	; 69
     d5a:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
     d5e:	dc 01       	movw	r26, r24
     d60:	cb 01       	movw	r24, r22
     d62:	8d 8b       	std	Y+21, r24	; 0x15
     d64:	9e 8b       	std	Y+22, r25	; 0x16
     d66:	af 8b       	std	Y+23, r26	; 0x17
     d68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d6a:	6d 89       	ldd	r22, Y+21	; 0x15
     d6c:	7e 89       	ldd	r23, Y+22	; 0x16
     d6e:	8f 89       	ldd	r24, Y+23	; 0x17
     d70:	98 8d       	ldd	r25, Y+24	; 0x18
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	40 e8       	ldi	r20, 0x80	; 128
     d78:	5f e3       	ldi	r21, 0x3F	; 63
     d7a:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__ltsf2>
     d7e:	88 23       	and	r24, r24
     d80:	2c f4       	brge	.+10     	; 0xd8c <lcd_wr_command+0xba>
		__ticks = 1;
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	9c 8b       	std	Y+20, r25	; 0x14
     d88:	8b 8b       	std	Y+19, r24	; 0x13
     d8a:	3f c0       	rjmp	.+126    	; 0xe0a <lcd_wr_command+0x138>
	else if (__tmp > 65535)
     d8c:	6d 89       	ldd	r22, Y+21	; 0x15
     d8e:	7e 89       	ldd	r23, Y+22	; 0x16
     d90:	8f 89       	ldd	r24, Y+23	; 0x17
     d92:	98 8d       	ldd	r25, Y+24	; 0x18
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	3f ef       	ldi	r19, 0xFF	; 255
     d98:	4f e7       	ldi	r20, 0x7F	; 127
     d9a:	57 e4       	ldi	r21, 0x47	; 71
     d9c:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <__gtsf2>
     da0:	18 16       	cp	r1, r24
     da2:	4c f5       	brge	.+82     	; 0xdf6 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     da4:	69 8d       	ldd	r22, Y+25	; 0x19
     da6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     da8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     daa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	40 e2       	ldi	r20, 0x20	; 32
     db2:	51 e4       	ldi	r21, 0x41	; 65
     db4:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
     db8:	dc 01       	movw	r26, r24
     dba:	cb 01       	movw	r24, r22
     dbc:	bc 01       	movw	r22, r24
     dbe:	cd 01       	movw	r24, r26
     dc0:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fixunssfsi>
     dc4:	dc 01       	movw	r26, r24
     dc6:	cb 01       	movw	r24, r22
     dc8:	9c 8b       	std	Y+20, r25	; 0x14
     dca:	8b 8b       	std	Y+19, r24	; 0x13
     dcc:	0f c0       	rjmp	.+30     	; 0xdec <lcd_wr_command+0x11a>
     dce:	84 e1       	ldi	r24, 0x14	; 20
     dd0:	91 e0       	ldi	r25, 0x01	; 1
     dd2:	9a 8b       	std	Y+18, r25	; 0x12
     dd4:	89 8b       	std	Y+17, r24	; 0x11
     dd6:	89 89       	ldd	r24, Y+17	; 0x11
     dd8:	9a 89       	ldd	r25, Y+18	; 0x12
     dda:	01 97       	sbiw	r24, 0x01	; 1
     ddc:	f1 f7       	brne	.-4      	; 0xdda <lcd_wr_command+0x108>
     dde:	9a 8b       	std	Y+18, r25	; 0x12
     de0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     de2:	8b 89       	ldd	r24, Y+19	; 0x13
     de4:	9c 89       	ldd	r25, Y+20	; 0x14
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	9c 8b       	std	Y+20, r25	; 0x14
     dea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dec:	8b 89       	ldd	r24, Y+19	; 0x13
     dee:	9c 89       	ldd	r25, Y+20	; 0x14
     df0:	00 97       	sbiw	r24, 0x00	; 0
     df2:	69 f7       	brne	.-38     	; 0xdce <lcd_wr_command+0xfc>
     df4:	14 c0       	rjmp	.+40     	; 0xe1e <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     df6:	6d 89       	ldd	r22, Y+21	; 0x15
     df8:	7e 89       	ldd	r23, Y+22	; 0x16
     dfa:	8f 89       	ldd	r24, Y+23	; 0x17
     dfc:	98 8d       	ldd	r25, Y+24	; 0x18
     dfe:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fixunssfsi>
     e02:	dc 01       	movw	r26, r24
     e04:	cb 01       	movw	r24, r22
     e06:	9c 8b       	std	Y+20, r25	; 0x14
     e08:	8b 8b       	std	Y+19, r24	; 0x13
     e0a:	8b 89       	ldd	r24, Y+19	; 0x13
     e0c:	9c 89       	ldd	r25, Y+20	; 0x14
     e0e:	98 8b       	std	Y+16, r25	; 0x10
     e10:	8f 87       	std	Y+15, r24	; 0x0f
     e12:	8f 85       	ldd	r24, Y+15	; 0x0f
     e14:	98 89       	ldd	r25, Y+16	; 0x10
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	f1 f7       	brne	.-4      	; 0xe16 <lcd_wr_command+0x144>
     e1a:	98 8b       	std	Y+16, r25	; 0x10
     e1c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
     e1e:	a8 e2       	ldi	r26, 0x28	; 40
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e8 e2       	ldi	r30, 0x28	; 40
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	8b 7f       	andi	r24, 0xFB	; 251
     e2a:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
     e2c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e2e:	8f 70       	andi	r24, 0x0F	; 15
     e30:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
     e32:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e34:	82 95       	swap	r24
     e36:	80 7f       	andi	r24, 0xF0	; 240
     e38:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
     e3a:	a8 e2       	ldi	r26, 0x28	; 40
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e8 e2       	ldi	r30, 0x28	; 40
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	8f 70       	andi	r24, 0x0F	; 15
     e46:	8c 93       	st	X, r24
	lcd_port |= cmd;
     e48:	a8 e2       	ldi	r26, 0x28	; 40
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e8 e2       	ldi	r30, 0x28	; 40
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	90 81       	ld	r25, Z
     e52:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e54:	89 2b       	or	r24, r25
     e56:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     e58:	a8 e2       	ldi	r26, 0x28	; 40
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e8 e2       	ldi	r30, 0x28	; 40
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	8e 7f       	andi	r24, 0xFE	; 254
     e64:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     e66:	a8 e2       	ldi	r26, 0x28	; 40
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e8 e2       	ldi	r30, 0x28	; 40
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	8d 7f       	andi	r24, 0xFD	; 253
     e72:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     e74:	a8 e2       	ldi	r26, 0x28	; 40
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e8 e2       	ldi	r30, 0x28	; 40
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	84 60       	ori	r24, 0x04	; 4
     e80:	8c 93       	st	X, r24
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	a0 ea       	ldi	r26, 0xA0	; 160
     e88:	b0 e4       	ldi	r27, 0x40	; 64
     e8a:	8b 87       	std	Y+11, r24	; 0x0b
     e8c:	9c 87       	std	Y+12, r25	; 0x0c
     e8e:	ad 87       	std	Y+13, r26	; 0x0d
     e90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e92:	6b 85       	ldd	r22, Y+11	; 0x0b
     e94:	7c 85       	ldd	r23, Y+12	; 0x0c
     e96:	8d 85       	ldd	r24, Y+13	; 0x0d
     e98:	9e 85       	ldd	r25, Y+14	; 0x0e
     e9a:	2d ec       	ldi	r18, 0xCD	; 205
     e9c:	3c ec       	ldi	r19, 0xCC	; 204
     e9e:	4c e2       	ldi	r20, 0x2C	; 44
     ea0:	55 e4       	ldi	r21, 0x45	; 69
     ea2:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
     ea6:	dc 01       	movw	r26, r24
     ea8:	cb 01       	movw	r24, r22
     eaa:	8f 83       	std	Y+7, r24	; 0x07
     eac:	98 87       	std	Y+8, r25	; 0x08
     eae:	a9 87       	std	Y+9, r26	; 0x09
     eb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     eb2:	6f 81       	ldd	r22, Y+7	; 0x07
     eb4:	78 85       	ldd	r23, Y+8	; 0x08
     eb6:	89 85       	ldd	r24, Y+9	; 0x09
     eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	40 e8       	ldi	r20, 0x80	; 128
     ec0:	5f e3       	ldi	r21, 0x3F	; 63
     ec2:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__ltsf2>
     ec6:	88 23       	and	r24, r24
     ec8:	2c f4       	brge	.+10     	; 0xed4 <lcd_wr_command+0x202>
		__ticks = 1;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	9e 83       	std	Y+6, r25	; 0x06
     ed0:	8d 83       	std	Y+5, r24	; 0x05
     ed2:	3f c0       	rjmp	.+126    	; 0xf52 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
     ed4:	6f 81       	ldd	r22, Y+7	; 0x07
     ed6:	78 85       	ldd	r23, Y+8	; 0x08
     ed8:	89 85       	ldd	r24, Y+9	; 0x09
     eda:	9a 85       	ldd	r25, Y+10	; 0x0a
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	3f ef       	ldi	r19, 0xFF	; 255
     ee0:	4f e7       	ldi	r20, 0x7F	; 127
     ee2:	57 e4       	ldi	r21, 0x47	; 71
     ee4:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <__gtsf2>
     ee8:	18 16       	cp	r1, r24
     eea:	4c f5       	brge	.+82     	; 0xf3e <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eec:	6b 85       	ldd	r22, Y+11	; 0x0b
     eee:	7c 85       	ldd	r23, Y+12	; 0x0c
     ef0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 e2       	ldi	r20, 0x20	; 32
     efa:	51 e4       	ldi	r21, 0x41	; 65
     efc:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	bc 01       	movw	r22, r24
     f06:	cd 01       	movw	r24, r26
     f08:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fixunssfsi>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	9e 83       	std	Y+6, r25	; 0x06
     f12:	8d 83       	std	Y+5, r24	; 0x05
     f14:	0f c0       	rjmp	.+30     	; 0xf34 <lcd_wr_command+0x262>
     f16:	84 e1       	ldi	r24, 0x14	; 20
     f18:	91 e0       	ldi	r25, 0x01	; 1
     f1a:	9c 83       	std	Y+4, r25	; 0x04
     f1c:	8b 83       	std	Y+3, r24	; 0x03
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	9c 81       	ldd	r25, Y+4	; 0x04
     f22:	01 97       	sbiw	r24, 0x01	; 1
     f24:	f1 f7       	brne	.-4      	; 0xf22 <lcd_wr_command+0x250>
     f26:	9c 83       	std	Y+4, r25	; 0x04
     f28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f2a:	8d 81       	ldd	r24, Y+5	; 0x05
     f2c:	9e 81       	ldd	r25, Y+6	; 0x06
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	9e 83       	std	Y+6, r25	; 0x06
     f32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f34:	8d 81       	ldd	r24, Y+5	; 0x05
     f36:	9e 81       	ldd	r25, Y+6	; 0x06
     f38:	00 97       	sbiw	r24, 0x00	; 0
     f3a:	69 f7       	brne	.-38     	; 0xf16 <lcd_wr_command+0x244>
     f3c:	14 c0       	rjmp	.+40     	; 0xf66 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f3e:	6f 81       	ldd	r22, Y+7	; 0x07
     f40:	78 85       	ldd	r23, Y+8	; 0x08
     f42:	89 85       	ldd	r24, Y+9	; 0x09
     f44:	9a 85       	ldd	r25, Y+10	; 0x0a
     f46:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fixunssfsi>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	9e 83       	std	Y+6, r25	; 0x06
     f50:	8d 83       	std	Y+5, r24	; 0x05
     f52:	8d 81       	ldd	r24, Y+5	; 0x05
     f54:	9e 81       	ldd	r25, Y+6	; 0x06
     f56:	9a 83       	std	Y+2, r25	; 0x02
     f58:	89 83       	std	Y+1, r24	; 0x01
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	9a 81       	ldd	r25, Y+2	; 0x02
     f5e:	01 97       	sbiw	r24, 0x01	; 1
     f60:	f1 f7       	brne	.-4      	; 0xf5e <lcd_wr_command+0x28c>
     f62:	9a 83       	std	Y+2, r25	; 0x02
     f64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
     f66:	a8 e2       	ldi	r26, 0x28	; 40
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e8 e2       	ldi	r30, 0x28	; 40
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	8b 7f       	andi	r24, 0xFB	; 251
     f72:	8c 93       	st	X, r24
}
     f74:	6e 96       	adiw	r28, 0x1e	; 30
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	f8 94       	cli
     f7a:	de bf       	out	0x3e, r29	; 62
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	cd bf       	out	0x3d, r28	; 61
     f80:	cf 91       	pop	r28
     f82:	df 91       	pop	r29
     f84:	08 95       	ret

00000f86 <lcd_wr_char>:

/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
     f86:	df 93       	push	r29
     f88:	cf 93       	push	r28
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	6e 97       	sbiw	r28, 0x1e	; 30
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	cd bf       	out	0x3d, r28	; 61
     f9a:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
     f9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f9e:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
     fa0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fa2:	80 7f       	andi	r24, 0xF0	; 240
     fa4:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     fa6:	a8 e2       	ldi	r26, 0x28	; 40
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e8 e2       	ldi	r30, 0x28	; 40
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	8f 70       	andi	r24, 0x0F	; 15
     fb2:	8c 93       	st	X, r24
	lcd_port |= temp;
     fb4:	a8 e2       	ldi	r26, 0x28	; 40
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e8 e2       	ldi	r30, 0x28	; 40
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	90 81       	ld	r25, Z
     fbe:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fc0:	89 2b       	or	r24, r25
     fc2:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
     fc4:	a8 e2       	ldi	r26, 0x28	; 40
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e8 e2       	ldi	r30, 0x28	; 40
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	81 60       	ori	r24, 0x01	; 1
     fd0:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     fd2:	a8 e2       	ldi	r26, 0x28	; 40
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e8 e2       	ldi	r30, 0x28	; 40
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	8d 7f       	andi	r24, 0xFD	; 253
     fde:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     fe0:	a8 e2       	ldi	r26, 0x28	; 40
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e8 e2       	ldi	r30, 0x28	; 40
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	84 60       	ori	r24, 0x04	; 4
     fec:	8c 93       	st	X, r24
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	a0 ea       	ldi	r26, 0xA0	; 160
     ff4:	b0 e4       	ldi	r27, 0x40	; 64
     ff6:	89 8f       	std	Y+25, r24	; 0x19
     ff8:	9a 8f       	std	Y+26, r25	; 0x1a
     ffa:	ab 8f       	std	Y+27, r26	; 0x1b
     ffc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ffe:	69 8d       	ldd	r22, Y+25	; 0x19
    1000:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1002:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1004:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1006:	2d ec       	ldi	r18, 0xCD	; 205
    1008:	3c ec       	ldi	r19, 0xCC	; 204
    100a:	4c e2       	ldi	r20, 0x2C	; 44
    100c:	55 e4       	ldi	r21, 0x45	; 69
    100e:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	8d 8b       	std	Y+21, r24	; 0x15
    1018:	9e 8b       	std	Y+22, r25	; 0x16
    101a:	af 8b       	std	Y+23, r26	; 0x17
    101c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    101e:	6d 89       	ldd	r22, Y+21	; 0x15
    1020:	7e 89       	ldd	r23, Y+22	; 0x16
    1022:	8f 89       	ldd	r24, Y+23	; 0x17
    1024:	98 8d       	ldd	r25, Y+24	; 0x18
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	40 e8       	ldi	r20, 0x80	; 128
    102c:	5f e3       	ldi	r21, 0x3F	; 63
    102e:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__ltsf2>
    1032:	88 23       	and	r24, r24
    1034:	2c f4       	brge	.+10     	; 0x1040 <lcd_wr_char+0xba>
		__ticks = 1;
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	9c 8b       	std	Y+20, r25	; 0x14
    103c:	8b 8b       	std	Y+19, r24	; 0x13
    103e:	3f c0       	rjmp	.+126    	; 0x10be <lcd_wr_char+0x138>
	else if (__tmp > 65535)
    1040:	6d 89       	ldd	r22, Y+21	; 0x15
    1042:	7e 89       	ldd	r23, Y+22	; 0x16
    1044:	8f 89       	ldd	r24, Y+23	; 0x17
    1046:	98 8d       	ldd	r25, Y+24	; 0x18
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	3f ef       	ldi	r19, 0xFF	; 255
    104c:	4f e7       	ldi	r20, 0x7F	; 127
    104e:	57 e4       	ldi	r21, 0x47	; 71
    1050:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <__gtsf2>
    1054:	18 16       	cp	r1, r24
    1056:	4c f5       	brge	.+82     	; 0x10aa <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1058:	69 8d       	ldd	r22, Y+25	; 0x19
    105a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    105c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    105e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	40 e2       	ldi	r20, 0x20	; 32
    1066:	51 e4       	ldi	r21, 0x41	; 65
    1068:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	bc 01       	movw	r22, r24
    1072:	cd 01       	movw	r24, r26
    1074:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fixunssfsi>
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	9c 8b       	std	Y+20, r25	; 0x14
    107e:	8b 8b       	std	Y+19, r24	; 0x13
    1080:	0f c0       	rjmp	.+30     	; 0x10a0 <lcd_wr_char+0x11a>
    1082:	84 e1       	ldi	r24, 0x14	; 20
    1084:	91 e0       	ldi	r25, 0x01	; 1
    1086:	9a 8b       	std	Y+18, r25	; 0x12
    1088:	89 8b       	std	Y+17, r24	; 0x11
    108a:	89 89       	ldd	r24, Y+17	; 0x11
    108c:	9a 89       	ldd	r25, Y+18	; 0x12
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	f1 f7       	brne	.-4      	; 0x108e <lcd_wr_char+0x108>
    1092:	9a 8b       	std	Y+18, r25	; 0x12
    1094:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1096:	8b 89       	ldd	r24, Y+19	; 0x13
    1098:	9c 89       	ldd	r25, Y+20	; 0x14
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	9c 8b       	std	Y+20, r25	; 0x14
    109e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10a0:	8b 89       	ldd	r24, Y+19	; 0x13
    10a2:	9c 89       	ldd	r25, Y+20	; 0x14
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	69 f7       	brne	.-38     	; 0x1082 <lcd_wr_char+0xfc>
    10a8:	14 c0       	rjmp	.+40     	; 0x10d2 <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10aa:	6d 89       	ldd	r22, Y+21	; 0x15
    10ac:	7e 89       	ldd	r23, Y+22	; 0x16
    10ae:	8f 89       	ldd	r24, Y+23	; 0x17
    10b0:	98 8d       	ldd	r25, Y+24	; 0x18
    10b2:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fixunssfsi>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	9c 8b       	std	Y+20, r25	; 0x14
    10bc:	8b 8b       	std	Y+19, r24	; 0x13
    10be:	8b 89       	ldd	r24, Y+19	; 0x13
    10c0:	9c 89       	ldd	r25, Y+20	; 0x14
    10c2:	98 8b       	std	Y+16, r25	; 0x10
    10c4:	8f 87       	std	Y+15, r24	; 0x0f
    10c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    10c8:	98 89       	ldd	r25, Y+16	; 0x10
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	f1 f7       	brne	.-4      	; 0x10ca <lcd_wr_char+0x144>
    10ce:	98 8b       	std	Y+16, r25	; 0x10
    10d0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    10d2:	a8 e2       	ldi	r26, 0x28	; 40
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e8 e2       	ldi	r30, 0x28	; 40
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	8b 7f       	andi	r24, 0xFB	; 251
    10de:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    10e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10e2:	8f 70       	andi	r24, 0x0F	; 15
    10e4:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    10e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10e8:	82 95       	swap	r24
    10ea:	80 7f       	andi	r24, 0xF0	; 240
    10ec:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    10ee:	a8 e2       	ldi	r26, 0x28	; 40
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e8 e2       	ldi	r30, 0x28	; 40
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	8f 70       	andi	r24, 0x0F	; 15
    10fa:	8c 93       	st	X, r24
	lcd_port |= letter;
    10fc:	a8 e2       	ldi	r26, 0x28	; 40
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e8 e2       	ldi	r30, 0x28	; 40
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	90 81       	ld	r25, Z
    1106:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1108:	89 2b       	or	r24, r25
    110a:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    110c:	a8 e2       	ldi	r26, 0x28	; 40
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e8 e2       	ldi	r30, 0x28	; 40
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	81 60       	ori	r24, 0x01	; 1
    1118:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    111a:	a8 e2       	ldi	r26, 0x28	; 40
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e8 e2       	ldi	r30, 0x28	; 40
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	8d 7f       	andi	r24, 0xFD	; 253
    1126:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1128:	a8 e2       	ldi	r26, 0x28	; 40
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e8 e2       	ldi	r30, 0x28	; 40
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	84 60       	ori	r24, 0x04	; 4
    1134:	8c 93       	st	X, r24
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	a0 ea       	ldi	r26, 0xA0	; 160
    113c:	b0 e4       	ldi	r27, 0x40	; 64
    113e:	8b 87       	std	Y+11, r24	; 0x0b
    1140:	9c 87       	std	Y+12, r25	; 0x0c
    1142:	ad 87       	std	Y+13, r26	; 0x0d
    1144:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1146:	6b 85       	ldd	r22, Y+11	; 0x0b
    1148:	7c 85       	ldd	r23, Y+12	; 0x0c
    114a:	8d 85       	ldd	r24, Y+13	; 0x0d
    114c:	9e 85       	ldd	r25, Y+14	; 0x0e
    114e:	2d ec       	ldi	r18, 0xCD	; 205
    1150:	3c ec       	ldi	r19, 0xCC	; 204
    1152:	4c e2       	ldi	r20, 0x2C	; 44
    1154:	55 e4       	ldi	r21, 0x45	; 69
    1156:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	8f 83       	std	Y+7, r24	; 0x07
    1160:	98 87       	std	Y+8, r25	; 0x08
    1162:	a9 87       	std	Y+9, r26	; 0x09
    1164:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1166:	6f 81       	ldd	r22, Y+7	; 0x07
    1168:	78 85       	ldd	r23, Y+8	; 0x08
    116a:	89 85       	ldd	r24, Y+9	; 0x09
    116c:	9a 85       	ldd	r25, Y+10	; 0x0a
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	40 e8       	ldi	r20, 0x80	; 128
    1174:	5f e3       	ldi	r21, 0x3F	; 63
    1176:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__ltsf2>
    117a:	88 23       	and	r24, r24
    117c:	2c f4       	brge	.+10     	; 0x1188 <lcd_wr_char+0x202>
		__ticks = 1;
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	9e 83       	std	Y+6, r25	; 0x06
    1184:	8d 83       	std	Y+5, r24	; 0x05
    1186:	3f c0       	rjmp	.+126    	; 0x1206 <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    1188:	6f 81       	ldd	r22, Y+7	; 0x07
    118a:	78 85       	ldd	r23, Y+8	; 0x08
    118c:	89 85       	ldd	r24, Y+9	; 0x09
    118e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	3f ef       	ldi	r19, 0xFF	; 255
    1194:	4f e7       	ldi	r20, 0x7F	; 127
    1196:	57 e4       	ldi	r21, 0x47	; 71
    1198:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <__gtsf2>
    119c:	18 16       	cp	r1, r24
    119e:	4c f5       	brge	.+82     	; 0x11f2 <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    11a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	40 e2       	ldi	r20, 0x20	; 32
    11ae:	51 e4       	ldi	r21, 0x41	; 65
    11b0:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	bc 01       	movw	r22, r24
    11ba:	cd 01       	movw	r24, r26
    11bc:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fixunssfsi>
    11c0:	dc 01       	movw	r26, r24
    11c2:	cb 01       	movw	r24, r22
    11c4:	9e 83       	std	Y+6, r25	; 0x06
    11c6:	8d 83       	std	Y+5, r24	; 0x05
    11c8:	0f c0       	rjmp	.+30     	; 0x11e8 <lcd_wr_char+0x262>
    11ca:	84 e1       	ldi	r24, 0x14	; 20
    11cc:	91 e0       	ldi	r25, 0x01	; 1
    11ce:	9c 83       	std	Y+4, r25	; 0x04
    11d0:	8b 83       	std	Y+3, r24	; 0x03
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	9c 81       	ldd	r25, Y+4	; 0x04
    11d6:	01 97       	sbiw	r24, 0x01	; 1
    11d8:	f1 f7       	brne	.-4      	; 0x11d6 <lcd_wr_char+0x250>
    11da:	9c 83       	std	Y+4, r25	; 0x04
    11dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11de:	8d 81       	ldd	r24, Y+5	; 0x05
    11e0:	9e 81       	ldd	r25, Y+6	; 0x06
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	9e 83       	std	Y+6, r25	; 0x06
    11e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ea:	9e 81       	ldd	r25, Y+6	; 0x06
    11ec:	00 97       	sbiw	r24, 0x00	; 0
    11ee:	69 f7       	brne	.-38     	; 0x11ca <lcd_wr_char+0x244>
    11f0:	14 c0       	rjmp	.+40     	; 0x121a <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11f2:	6f 81       	ldd	r22, Y+7	; 0x07
    11f4:	78 85       	ldd	r23, Y+8	; 0x08
    11f6:	89 85       	ldd	r24, Y+9	; 0x09
    11f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11fa:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fixunssfsi>
    11fe:	dc 01       	movw	r26, r24
    1200:	cb 01       	movw	r24, r22
    1202:	9e 83       	std	Y+6, r25	; 0x06
    1204:	8d 83       	std	Y+5, r24	; 0x05
    1206:	8d 81       	ldd	r24, Y+5	; 0x05
    1208:	9e 81       	ldd	r25, Y+6	; 0x06
    120a:	9a 83       	std	Y+2, r25	; 0x02
    120c:	89 83       	std	Y+1, r24	; 0x01
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	9a 81       	ldd	r25, Y+2	; 0x02
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	f1 f7       	brne	.-4      	; 0x1212 <lcd_wr_char+0x28c>
    1216:	9a 83       	std	Y+2, r25	; 0x02
    1218:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    121a:	a8 e2       	ldi	r26, 0x28	; 40
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e8 e2       	ldi	r30, 0x28	; 40
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	8b 7f       	andi	r24, 0xFB	; 251
    1226:	8c 93       	st	X, r24
}
    1228:	6e 96       	adiw	r28, 0x1e	; 30
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <lcd_home>:


void lcd_home()
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    1242:	80 e8       	ldi	r24, 0x80	; 128
    1244:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
}
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	0f 92       	push	r0
    1254:	0f 92       	push	r0
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	9a 83       	std	Y+2, r25	; 0x02
    125c:	89 83       	std	Y+1, r24	; 0x01
    125e:	0a c0       	rjmp	.+20     	; 0x1274 <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    1260:	e9 81       	ldd	r30, Y+1	; 0x01
    1262:	fa 81       	ldd	r31, Y+2	; 0x02
    1264:	80 81       	ld	r24, Z
    1266:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
		str++;
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	9a 81       	ldd	r25, Y+2	; 0x02
    126e:	01 96       	adiw	r24, 0x01	; 1
    1270:	9a 83       	std	Y+2, r25	; 0x02
    1272:	89 83       	std	Y+1, r24	; 0x01


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
    1274:	e9 81       	ldd	r30, Y+1	; 0x01
    1276:	fa 81       	ldd	r31, Y+2	; 0x02
    1278:	80 81       	ld	r24, Z
    127a:	88 23       	and	r24, r24
    127c:	89 f7       	brne	.-30     	; 0x1260 <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	00 d0       	rcall	.+0      	; 0x128e <lcd_cursor+0x6>
    128e:	0f 92       	push	r0
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
    1294:	89 83       	std	Y+1, r24	; 0x01
    1296:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	3c 83       	std	Y+4, r19	; 0x04
    12a0:	2b 83       	std	Y+3, r18	; 0x03
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	9c 81       	ldd	r25, Y+4	; 0x04
    12a6:	82 30       	cpi	r24, 0x02	; 2
    12a8:	91 05       	cpc	r25, r1
    12aa:	d9 f0       	breq	.+54     	; 0x12e2 <lcd_cursor+0x5a>
    12ac:	2b 81       	ldd	r18, Y+3	; 0x03
    12ae:	3c 81       	ldd	r19, Y+4	; 0x04
    12b0:	23 30       	cpi	r18, 0x03	; 3
    12b2:	31 05       	cpc	r19, r1
    12b4:	34 f4       	brge	.+12     	; 0x12c2 <lcd_cursor+0x3a>
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ba:	81 30       	cpi	r24, 0x01	; 1
    12bc:	91 05       	cpc	r25, r1
    12be:	61 f0       	breq	.+24     	; 0x12d8 <lcd_cursor+0x50>
    12c0:	1e c0       	rjmp	.+60     	; 0x12fe <lcd_cursor+0x76>
    12c2:	2b 81       	ldd	r18, Y+3	; 0x03
    12c4:	3c 81       	ldd	r19, Y+4	; 0x04
    12c6:	23 30       	cpi	r18, 0x03	; 3
    12c8:	31 05       	cpc	r19, r1
    12ca:	81 f0       	breq	.+32     	; 0x12ec <lcd_cursor+0x64>
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	9c 81       	ldd	r25, Y+4	; 0x04
    12d0:	84 30       	cpi	r24, 0x04	; 4
    12d2:	91 05       	cpc	r25, r1
    12d4:	81 f0       	breq	.+32     	; 0x12f6 <lcd_cursor+0x6e>
    12d6:	13 c0       	rjmp	.+38     	; 0x12fe <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	81 58       	subi	r24, 0x81	; 129
    12dc:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
    12e0:	0e c0       	rjmp	.+28     	; 0x12fe <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	81 54       	subi	r24, 0x41	; 65
    12e6:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
    12ea:	09 c0       	rjmp	.+18     	; 0x12fe <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	8d 56       	subi	r24, 0x6D	; 109
    12f0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
    12f4:	04 c0       	rjmp	.+8      	; 0x12fe <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	8d 52       	subi	r24, 0x2D	; 45
    12fa:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
		default: break;
	}
}
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
    1314:	27 97       	sbiw	r28, 0x07	; 7
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	de bf       	out	0x3e, r29	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	cd bf       	out	0x3d, r28	; 61
    1320:	8a 83       	std	Y+2, r24	; 0x02
    1322:	6b 83       	std	Y+3, r22	; 0x03
    1324:	5d 83       	std	Y+5, r21	; 0x05
    1326:	4c 83       	std	Y+4, r20	; 0x04
    1328:	3f 83       	std	Y+7, r19	; 0x07
    132a:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    132c:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	88 23       	and	r24, r24
    1332:	19 f0       	breq	.+6      	; 0x133a <lcd_print+0x2e>
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	88 23       	and	r24, r24
    1338:	19 f4       	brne	.+6      	; 0x1340 <lcd_print+0x34>
	{
		lcd_home();
    133a:	0e 94 1d 09 	call	0x123a	; 0x123a <lcd_home>
    133e:	04 c0       	rjmp	.+8      	; 0x1348 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	6b 81       	ldd	r22, Y+3	; 0x03
    1344:	0e 94 44 09 	call	0x1288	; 0x1288 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    1348:	8e 81       	ldd	r24, Y+6	; 0x06
    134a:	9f 81       	ldd	r25, Y+7	; 0x07
    134c:	85 30       	cpi	r24, 0x05	; 5
    134e:	91 05       	cpc	r25, r1
    1350:	19 f0       	breq	.+6      	; 0x1358 <lcd_print+0x4c>
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	a9 f4       	brne	.+42     	; 0x1382 <lcd_print+0x76>
	{
		million=value/10000+48;
    1358:	8c 81       	ldd	r24, Y+4	; 0x04
    135a:	9d 81       	ldd	r25, Y+5	; 0x05
    135c:	20 e1       	ldi	r18, 0x10	; 16
    135e:	37 e2       	ldi	r19, 0x27	; 39
    1360:	b9 01       	movw	r22, r18
    1362:	0e 94 13 1a 	call	0x3426	; 0x3426 <__udivmodhi4>
    1366:	cb 01       	movw	r24, r22
    1368:	c0 96       	adiw	r24, 0x30	; 48
    136a:	90 93 1b 03 	sts	0x031B, r25
    136e:	80 93 1a 03 	sts	0x031A, r24
		lcd_wr_char(million);
    1372:	80 91 1a 03 	lds	r24, 0x031A
    1376:	90 91 1b 03 	lds	r25, 0x031B
    137a:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
		flag=1;
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    1382:	8e 81       	ldd	r24, Y+6	; 0x06
    1384:	9f 81       	ldd	r25, Y+7	; 0x07
    1386:	84 30       	cpi	r24, 0x04	; 4
    1388:	91 05       	cpc	r25, r1
    138a:	19 f0       	breq	.+6      	; 0x1392 <lcd_print+0x86>
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	11 f5       	brne	.+68     	; 0x13d6 <lcd_print+0xca>
	{
		temp = value/1000;
    1392:	8c 81       	ldd	r24, Y+4	; 0x04
    1394:	9d 81       	ldd	r25, Y+5	; 0x05
    1396:	28 ee       	ldi	r18, 0xE8	; 232
    1398:	33 e0       	ldi	r19, 0x03	; 3
    139a:	b9 01       	movw	r22, r18
    139c:	0e 94 13 1a 	call	0x3426	; 0x3426 <__udivmodhi4>
    13a0:	cb 01       	movw	r24, r22
    13a2:	90 93 1d 03 	sts	0x031D, r25
    13a6:	80 93 1c 03 	sts	0x031C, r24
		thousand = temp%10 + 48;
    13aa:	80 91 1c 03 	lds	r24, 0x031C
    13ae:	90 91 1d 03 	lds	r25, 0x031D
    13b2:	2a e0       	ldi	r18, 0x0A	; 10
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	b9 01       	movw	r22, r18
    13b8:	0e 94 13 1a 	call	0x3426	; 0x3426 <__udivmodhi4>
    13bc:	c0 96       	adiw	r24, 0x30	; 48
    13be:	90 93 27 03 	sts	0x0327, r25
    13c2:	80 93 26 03 	sts	0x0326, r24
		lcd_wr_char(thousand);
    13c6:	80 91 26 03 	lds	r24, 0x0326
    13ca:	90 91 27 03 	lds	r25, 0x0327
    13ce:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
		flag=1;
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    13d6:	8e 81       	ldd	r24, Y+6	; 0x06
    13d8:	9f 81       	ldd	r25, Y+7	; 0x07
    13da:	83 30       	cpi	r24, 0x03	; 3
    13dc:	91 05       	cpc	r25, r1
    13de:	19 f0       	breq	.+6      	; 0x13e6 <lcd_print+0xda>
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	81 30       	cpi	r24, 0x01	; 1
    13e4:	11 f5       	brne	.+68     	; 0x142a <lcd_print+0x11e>
	{
		temp = value/100;
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04
    13e8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ea:	24 e6       	ldi	r18, 0x64	; 100
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	b9 01       	movw	r22, r18
    13f0:	0e 94 13 1a 	call	0x3426	; 0x3426 <__udivmodhi4>
    13f4:	cb 01       	movw	r24, r22
    13f6:	90 93 1d 03 	sts	0x031D, r25
    13fa:	80 93 1c 03 	sts	0x031C, r24
		hundred = temp%10 + 48;
    13fe:	80 91 1c 03 	lds	r24, 0x031C
    1402:	90 91 1d 03 	lds	r25, 0x031D
    1406:	2a e0       	ldi	r18, 0x0A	; 10
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	b9 01       	movw	r22, r18
    140c:	0e 94 13 1a 	call	0x3426	; 0x3426 <__udivmodhi4>
    1410:	c0 96       	adiw	r24, 0x30	; 48
    1412:	90 93 23 03 	sts	0x0323, r25
    1416:	80 93 22 03 	sts	0x0322, r24
		lcd_wr_char(hundred);
    141a:	80 91 22 03 	lds	r24, 0x0322
    141e:	90 91 23 03 	lds	r25, 0x0323
    1422:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
		flag=1;
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    142a:	8e 81       	ldd	r24, Y+6	; 0x06
    142c:	9f 81       	ldd	r25, Y+7	; 0x07
    142e:	82 30       	cpi	r24, 0x02	; 2
    1430:	91 05       	cpc	r25, r1
    1432:	19 f0       	breq	.+6      	; 0x143a <lcd_print+0x12e>
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	81 30       	cpi	r24, 0x01	; 1
    1438:	11 f5       	brne	.+68     	; 0x147e <lcd_print+0x172>
	{
		temp = value/10;
    143a:	8c 81       	ldd	r24, Y+4	; 0x04
    143c:	9d 81       	ldd	r25, Y+5	; 0x05
    143e:	2a e0       	ldi	r18, 0x0A	; 10
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	b9 01       	movw	r22, r18
    1444:	0e 94 13 1a 	call	0x3426	; 0x3426 <__udivmodhi4>
    1448:	cb 01       	movw	r24, r22
    144a:	90 93 1d 03 	sts	0x031D, r25
    144e:	80 93 1c 03 	sts	0x031C, r24
		tens = temp%10 + 48;
    1452:	80 91 1c 03 	lds	r24, 0x031C
    1456:	90 91 1d 03 	lds	r25, 0x031D
    145a:	2a e0       	ldi	r18, 0x0A	; 10
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	b9 01       	movw	r22, r18
    1460:	0e 94 13 1a 	call	0x3426	; 0x3426 <__udivmodhi4>
    1464:	c0 96       	adiw	r24, 0x30	; 48
    1466:	90 93 21 03 	sts	0x0321, r25
    146a:	80 93 20 03 	sts	0x0320, r24
		lcd_wr_char(tens);
    146e:	80 91 20 03 	lds	r24, 0x0320
    1472:	90 91 21 03 	lds	r25, 0x0321
    1476:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
		flag=1;
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    147e:	8e 81       	ldd	r24, Y+6	; 0x06
    1480:	9f 81       	ldd	r25, Y+7	; 0x07
    1482:	81 30       	cpi	r24, 0x01	; 1
    1484:	91 05       	cpc	r25, r1
    1486:	19 f0       	breq	.+6      	; 0x148e <lcd_print+0x182>
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	81 30       	cpi	r24, 0x01	; 1
    148c:	91 f4       	brne	.+36     	; 0x14b2 <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    148e:	8c 81       	ldd	r24, Y+4	; 0x04
    1490:	9d 81       	ldd	r25, Y+5	; 0x05
    1492:	2a e0       	ldi	r18, 0x0A	; 10
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	b9 01       	movw	r22, r18
    1498:	0e 94 13 1a 	call	0x3426	; 0x3426 <__udivmodhi4>
    149c:	c0 96       	adiw	r24, 0x30	; 48
    149e:	90 93 25 03 	sts	0x0325, r25
    14a2:	80 93 24 03 	sts	0x0324, r24
		lcd_wr_char(unit);
    14a6:	80 91 24 03 	lds	r24, 0x0324
    14aa:	90 91 25 03 	lds	r25, 0x0325
    14ae:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
	}
	if(digits>5)
    14b2:	8e 81       	ldd	r24, Y+6	; 0x06
    14b4:	9f 81       	ldd	r25, Y+7	; 0x07
    14b6:	86 30       	cpi	r24, 0x06	; 6
    14b8:	91 05       	cpc	r25, r1
    14ba:	1c f0       	brlt	.+6      	; 0x14c2 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    14bc:	85 e4       	ldi	r24, 0x45	; 69
    14be:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
	}
	
}
    14c2:	27 96       	adiw	r28, 0x07	; 7
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	de bf       	out	0x3e, r29	; 62
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	cd bf       	out	0x3d, r28	; 61
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	08 95       	ret

000014d4 <__vector_5>:

unsigned int rightShaftCount = 0;
unsigned int leftShaftCount = 0;

ISR(INT4_vect)
{
    14d4:	1f 92       	push	r1
    14d6:	0f 92       	push	r0
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	0f 92       	push	r0
    14dc:	11 24       	eor	r1, r1
    14de:	8f 93       	push	r24
    14e0:	9f 93       	push	r25
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	cd b7       	in	r28, 0x3d	; 61
    14e8:	de b7       	in	r29, 0x3e	; 62
	leftShaftCount++;
    14ea:	80 91 0e 03 	lds	r24, 0x030E
    14ee:	90 91 0f 03 	lds	r25, 0x030F
    14f2:	01 96       	adiw	r24, 0x01	; 1
    14f4:	90 93 0f 03 	sts	0x030F, r25
    14f8:	80 93 0e 03 	sts	0x030E, r24
}
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	9f 91       	pop	r25
    1502:	8f 91       	pop	r24
    1504:	0f 90       	pop	r0
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	0f 90       	pop	r0
    150a:	1f 90       	pop	r1
    150c:	18 95       	reti

0000150e <__vector_6>:

ISR(INT5_vect)
{
    150e:	1f 92       	push	r1
    1510:	0f 92       	push	r0
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	0f 92       	push	r0
    1516:	11 24       	eor	r1, r1
    1518:	8f 93       	push	r24
    151a:	9f 93       	push	r25
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
	rightShaftCount++;
    1524:	80 91 0c 03 	lds	r24, 0x030C
    1528:	90 91 0d 03 	lds	r25, 0x030D
    152c:	01 96       	adiw	r24, 0x01	; 1
    152e:	90 93 0d 03 	sts	0x030D, r25
    1532:	80 93 0c 03 	sts	0x030C, r24
}
    1536:	cf 91       	pop	r28
    1538:	df 91       	pop	r29
    153a:	9f 91       	pop	r25
    153c:	8f 91       	pop	r24
    153e:	0f 90       	pop	r0
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	0f 90       	pop	r0
    1544:	1f 90       	pop	r1
    1546:	18 95       	reti

00001548 <motion_pin_config>:

void motion_pin_config()
{
    1548:	df 93       	push	r29
    154a:	cf 93       	push	r28
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
	//init motion control ports
	DDRA = 0x0F; // 0000 1111, lower 4 bits are output
    1550:	e1 e2       	ldi	r30, 0x21	; 33
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	8f e0       	ldi	r24, 0x0F	; 15
    1556:	80 83       	st	Z, r24
	PORTA = 0x00; // initialize
    1558:	e2 e2       	ldi	r30, 0x22	; 34
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	10 82       	st	Z, r1
	
	//init  velocity control ports
	DDRL = 0x18; // 0001 1000, 3rd and 4th bit are set for output
    155e:	ea e0       	ldi	r30, 0x0A	; 10
    1560:	f1 e0       	ldi	r31, 0x01	; 1
    1562:	88 e1       	ldi	r24, 0x18	; 24
    1564:	80 83       	st	Z, r24
	PORTL = 0x18; // initialize
    1566:	eb e0       	ldi	r30, 0x0B	; 11
    1568:	f1 e0       	ldi	r31, 0x01	; 1
    156a:	88 e1       	ldi	r24, 0x18	; 24
    156c:	80 83       	st	Z, r24

	//init interrupt control ports, 4 is for left, 5 is for right
	cli(); //clear interrupts
    156e:	f8 94       	cli
	EICRB = EICRB | 0x0A; //for contol register B,4th and 5th interrupts 0000 1010 (falling edge)
    1570:	aa e6       	ldi	r26, 0x6A	; 106
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	ea e6       	ldi	r30, 0x6A	; 106
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	8a 60       	ori	r24, 0x0A	; 10
    157c:	8c 93       	st	X, r24
	EIMSK = EIMSK | 0x30; //mask for 8 interuts, we use 4 and 5, so 00110000
    157e:	ad e3       	ldi	r26, 0x3D	; 61
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	ed e3       	ldi	r30, 0x3D	; 61
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	80 63       	ori	r24, 0x30	; 48
    158a:	8c 93       	st	X, r24
	sei(); //enable global interrupts
    158c:	78 94       	sei

	//init PORTE, PE4 and PE5 is for interrupt
	DDRE = 0xCF; // 4th and 5th are for input, 1100 1111
    158e:	ed e2       	ldi	r30, 0x2D	; 45
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	8f ec       	ldi	r24, 0xCF	; 207
    1594:	80 83       	st	Z, r24
	PORTE = 0x00; // initialize to zero
    1596:	ee e2       	ldi	r30, 0x2E	; 46
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	10 82       	st	Z, r1

	rightShaftCount = 0;
    159c:	10 92 0d 03 	sts	0x030D, r1
    15a0:	10 92 0c 03 	sts	0x030C, r1
	leftShaftCount = 0;
    15a4:	10 92 0f 03 	sts	0x030F, r1
    15a8:	10 92 0e 03 	sts	0x030E, r1
}
    15ac:	cf 91       	pop	r28
    15ae:	df 91       	pop	r29
    15b0:	08 95       	ret

000015b2 <forward>:

void forward()
{
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x06;
    15ba:	e2 e2       	ldi	r30, 0x22	; 34
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	86 e0       	ldi	r24, 0x06	; 6
    15c0:	80 83       	st	Z, r24
}
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <backward>:

void backward()
{
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x09;
    15d0:	e2 e2       	ldi	r30, 0x22	; 34
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	89 e0       	ldi	r24, 0x09	; 9
    15d6:	80 83       	st	Z, r24
}
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	08 95       	ret

000015de <hard_left>:

void hard_left()
{
    15de:	df 93       	push	r29
    15e0:	cf 93       	push	r28
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x05;
    15e6:	e2 e2       	ldi	r30, 0x22	; 34
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	85 e0       	ldi	r24, 0x05	; 5
    15ec:	80 83       	st	Z, r24
}
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	08 95       	ret

000015f4 <hard_right>:

void hard_right()
{
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
	PORTA =  0x0A;
    15fc:	e2 e2       	ldi	r30, 0x22	; 34
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	8a e0       	ldi	r24, 0x0A	; 10
    1602:	80 83       	st	Z, r24
}
    1604:	cf 91       	pop	r28
    1606:	df 91       	pop	r29
    1608:	08 95       	ret

0000160a <soft_left>:

void soft_left()
{
    160a:	df 93       	push	r29
    160c:	cf 93       	push	r28
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x04;
    1612:	e2 e2       	ldi	r30, 0x22	; 34
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	84 e0       	ldi	r24, 0x04	; 4
    1618:	80 83       	st	Z, r24
}
    161a:	cf 91       	pop	r28
    161c:	df 91       	pop	r29
    161e:	08 95       	ret

00001620 <soft_right>:

void soft_right()
{
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x02;
    1628:	e2 e2       	ldi	r30, 0x22	; 34
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	82 e0       	ldi	r24, 0x02	; 2
    162e:	80 83       	st	Z, r24
}
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <stop>:


void stop()
{
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x00;
    163e:	e2 e2       	ldi	r30, 0x22	; 34
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	10 82       	st	Z, r1
}
    1644:	cf 91       	pop	r28
    1646:	df 91       	pop	r29
    1648:	08 95       	ret

0000164a <move_forward>:

void move_forward(int d) //d in mm
{
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	00 d0       	rcall	.+0      	; 0x1650 <move_forward+0x6>
    1650:	0f 92       	push	r0
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
    1656:	9c 83       	std	Y+4, r25	; 0x04
    1658:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int reqdLeftShaftCount=0;
    165a:	1a 82       	std	Y+2, r1	; 0x02
    165c:	19 82       	std	Y+1, r1	; 0x01

	reqdLeftShaftCount = d/5;
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	9c 81       	ldd	r25, Y+4	; 0x04
    1662:	25 e0       	ldi	r18, 0x05	; 5
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	b9 01       	movw	r22, r18
    1668:	0e 94 27 1a 	call	0x344e	; 0x344e <__divmodhi4>
    166c:	cb 01       	movw	r24, r22
    166e:	9a 83       	std	Y+2, r25	; 0x02
    1670:	89 83       	std	Y+1, r24	; 0x01
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <move_forward+0x2e>

	while( leftShaftCount < reqdLeftShaftCount) {
		forward();
    1674:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <forward>
{
	unsigned int reqdLeftShaftCount=0;

	reqdLeftShaftCount = d/5;

	while( leftShaftCount < reqdLeftShaftCount) {
    1678:	20 91 0e 03 	lds	r18, 0x030E
    167c:	30 91 0f 03 	lds	r19, 0x030F
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	9a 81       	ldd	r25, Y+2	; 0x02
    1684:	28 17       	cp	r18, r24
    1686:	39 07       	cpc	r19, r25
    1688:	a8 f3       	brcs	.-22     	; 0x1674 <move_forward+0x2a>
		forward();
	}
	stop();
    168a:	0e 94 1b 0b 	call	0x1636	; 0x1636 <stop>
}
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	08 95       	ret

0000169c <move_backward>:

void move_backward(int d) //d in mm
{
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <move_backward+0x6>
    16a2:	0f 92       	push	r0
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
    16a8:	9c 83       	std	Y+4, r25	; 0x04
    16aa:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int reqdLeftShaftCount=0;
    16ac:	1a 82       	std	Y+2, r1	; 0x02
    16ae:	19 82       	std	Y+1, r1	; 0x01

	reqdLeftShaftCount = d/5;
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	9c 81       	ldd	r25, Y+4	; 0x04
    16b4:	25 e0       	ldi	r18, 0x05	; 5
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	b9 01       	movw	r22, r18
    16ba:	0e 94 27 1a 	call	0x344e	; 0x344e <__divmodhi4>
    16be:	cb 01       	movw	r24, r22
    16c0:	9a 83       	std	Y+2, r25	; 0x02
    16c2:	89 83       	std	Y+1, r24	; 0x01
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <move_backward+0x2e>

	while( leftShaftCount < reqdLeftShaftCount) {
		backward();
    16c6:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <backward>
{
	unsigned int reqdLeftShaftCount=0;

	reqdLeftShaftCount = d/5;

	while( leftShaftCount < reqdLeftShaftCount) {
    16ca:	20 91 0e 03 	lds	r18, 0x030E
    16ce:	30 91 0f 03 	lds	r19, 0x030F
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	9a 81       	ldd	r25, Y+2	; 0x02
    16d6:	28 17       	cp	r18, r24
    16d8:	39 07       	cpc	r19, r25
    16da:	a8 f3       	brcs	.-22     	; 0x16c6 <move_backward+0x2a>
		backward();
	}
	stop();
    16dc:	0e 94 1b 0b 	call	0x1636	; 0x1636 <stop>
}
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	08 95       	ret

000016ee <turn_soft_right>:
	
void turn_soft_right(int degree)
{
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	00 d0       	rcall	.+0      	; 0x16f4 <turn_soft_right+0x6>
    16f4:	00 d0       	rcall	.+0      	; 0x16f6 <turn_soft_right+0x8>
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
    16fa:	9c 83       	std	Y+4, r25	; 0x04
    16fc:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int reqdLeftShaftCount = 0;
    16fe:	1a 82       	std	Y+2, r1	; 0x02
    1700:	19 82       	std	Y+1, r1	; 0x01
	reqdLeftShaftCount = degree/2;
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	9c 81       	ldd	r25, Y+4	; 0x04
    1706:	9e 83       	std	Y+6, r25	; 0x06
    1708:	8d 83       	std	Y+5, r24	; 0x05
    170a:	8d 81       	ldd	r24, Y+5	; 0x05
    170c:	9e 81       	ldd	r25, Y+6	; 0x06
    170e:	99 23       	and	r25, r25
    1710:	2c f4       	brge	.+10     	; 0x171c <turn_soft_right+0x2e>
    1712:	8d 81       	ldd	r24, Y+5	; 0x05
    1714:	9e 81       	ldd	r25, Y+6	; 0x06
    1716:	01 96       	adiw	r24, 0x01	; 1
    1718:	9e 83       	std	Y+6, r25	; 0x06
    171a:	8d 83       	std	Y+5, r24	; 0x05
    171c:	8d 81       	ldd	r24, Y+5	; 0x05
    171e:	9e 81       	ldd	r25, Y+6	; 0x06
    1720:	95 95       	asr	r25
    1722:	87 95       	ror	r24
    1724:	9a 83       	std	Y+2, r25	; 0x02
    1726:	89 83       	std	Y+1, r24	; 0x01
    1728:	02 c0       	rjmp	.+4      	; 0x172e <turn_soft_right+0x40>

	while(leftShaftCount < reqdLeftShaftCount) {
		soft_right();
    172a:	0e 94 10 0b 	call	0x1620	; 0x1620 <soft_right>
void turn_soft_right(int degree)
{
	unsigned int reqdLeftShaftCount = 0;
	reqdLeftShaftCount = degree/2;

	while(leftShaftCount < reqdLeftShaftCount) {
    172e:	20 91 0e 03 	lds	r18, 0x030E
    1732:	30 91 0f 03 	lds	r19, 0x030F
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	9a 81       	ldd	r25, Y+2	; 0x02
    173a:	28 17       	cp	r18, r24
    173c:	39 07       	cpc	r19, r25
    173e:	a8 f3       	brcs	.-22     	; 0x172a <turn_soft_right+0x3c>
		soft_right();
	}
	stop();
    1740:	0e 94 1b 0b 	call	0x1636	; 0x1636 <stop>
}
    1744:	26 96       	adiw	r28, 0x06	; 6
    1746:	0f b6       	in	r0, 0x3f	; 63
    1748:	f8 94       	cli
    174a:	de bf       	out	0x3e, r29	; 62
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	cd bf       	out	0x3d, r28	; 61
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret

00001756 <turn_soft_left>:

void turn_soft_left(int degree)
{
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	00 d0       	rcall	.+0      	; 0x175c <turn_soft_left+0x6>
    175c:	00 d0       	rcall	.+0      	; 0x175e <turn_soft_left+0x8>
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
    1762:	9c 83       	std	Y+4, r25	; 0x04
    1764:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int reqdRightShaftCount = 0;
    1766:	1a 82       	std	Y+2, r1	; 0x02
    1768:	19 82       	std	Y+1, r1	; 0x01
	reqdRightShaftCount = degree/2;
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	9c 81       	ldd	r25, Y+4	; 0x04
    176e:	9e 83       	std	Y+6, r25	; 0x06
    1770:	8d 83       	std	Y+5, r24	; 0x05
    1772:	8d 81       	ldd	r24, Y+5	; 0x05
    1774:	9e 81       	ldd	r25, Y+6	; 0x06
    1776:	99 23       	and	r25, r25
    1778:	2c f4       	brge	.+10     	; 0x1784 <turn_soft_left+0x2e>
    177a:	8d 81       	ldd	r24, Y+5	; 0x05
    177c:	9e 81       	ldd	r25, Y+6	; 0x06
    177e:	01 96       	adiw	r24, 0x01	; 1
    1780:	9e 83       	std	Y+6, r25	; 0x06
    1782:	8d 83       	std	Y+5, r24	; 0x05
    1784:	8d 81       	ldd	r24, Y+5	; 0x05
    1786:	9e 81       	ldd	r25, Y+6	; 0x06
    1788:	95 95       	asr	r25
    178a:	87 95       	ror	r24
    178c:	9a 83       	std	Y+2, r25	; 0x02
    178e:	89 83       	std	Y+1, r24	; 0x01
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <turn_soft_left+0x40>

	while(rightShaftCount < reqdRightShaftCount) {
		soft_left();
    1792:	0e 94 05 0b 	call	0x160a	; 0x160a <soft_left>
void turn_soft_left(int degree)
{
	unsigned int reqdRightShaftCount = 0;
	reqdRightShaftCount = degree/2;

	while(rightShaftCount < reqdRightShaftCount) {
    1796:	20 91 0c 03 	lds	r18, 0x030C
    179a:	30 91 0d 03 	lds	r19, 0x030D
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	9a 81       	ldd	r25, Y+2	; 0x02
    17a2:	28 17       	cp	r18, r24
    17a4:	39 07       	cpc	r19, r25
    17a6:	a8 f3       	brcs	.-22     	; 0x1792 <turn_soft_left+0x3c>
		soft_left();
	}
	stop();
    17a8:	0e 94 1b 0b 	call	0x1636	; 0x1636 <stop>
}
    17ac:	26 96       	adiw	r28, 0x06	; 6
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	f8 94       	cli
    17b2:	de bf       	out	0x3e, r29	; 62
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	cd bf       	out	0x3d, r28	; 61
    17b8:	cf 91       	pop	r28
    17ba:	df 91       	pop	r29
    17bc:	08 95       	ret

000017be <turn_hard_right>:

void turn_hard_right(int degree)
{
    17be:	df 93       	push	r29
    17c0:	cf 93       	push	r28
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
    17c6:	2a 97       	sbiw	r28, 0x0a	; 10
    17c8:	0f b6       	in	r0, 0x3f	; 63
    17ca:	f8 94       	cli
    17cc:	de bf       	out	0x3e, r29	; 62
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	cd bf       	out	0x3d, r28	; 61
    17d2:	9e 83       	std	Y+6, r25	; 0x06
    17d4:	8d 83       	std	Y+5, r24	; 0x05
	unsigned int reqdRightShaftCount = 0;
    17d6:	1c 82       	std	Y+4, r1	; 0x04
    17d8:	1b 82       	std	Y+3, r1	; 0x03
	unsigned int reqdLeftShaftCount = 0;
    17da:	1a 82       	std	Y+2, r1	; 0x02
    17dc:	19 82       	std	Y+1, r1	; 0x01

	reqdRightShaftCount = degree/4;
    17de:	8d 81       	ldd	r24, Y+5	; 0x05
    17e0:	9e 81       	ldd	r25, Y+6	; 0x06
    17e2:	98 87       	std	Y+8, r25	; 0x08
    17e4:	8f 83       	std	Y+7, r24	; 0x07
    17e6:	8f 81       	ldd	r24, Y+7	; 0x07
    17e8:	98 85       	ldd	r25, Y+8	; 0x08
    17ea:	99 23       	and	r25, r25
    17ec:	2c f4       	brge	.+10     	; 0x17f8 <turn_hard_right+0x3a>
    17ee:	8f 81       	ldd	r24, Y+7	; 0x07
    17f0:	98 85       	ldd	r25, Y+8	; 0x08
    17f2:	03 96       	adiw	r24, 0x03	; 3
    17f4:	98 87       	std	Y+8, r25	; 0x08
    17f6:	8f 83       	std	Y+7, r24	; 0x07
    17f8:	8f 81       	ldd	r24, Y+7	; 0x07
    17fa:	98 85       	ldd	r25, Y+8	; 0x08
    17fc:	95 95       	asr	r25
    17fe:	87 95       	ror	r24
    1800:	95 95       	asr	r25
    1802:	87 95       	ror	r24
    1804:	9c 83       	std	Y+4, r25	; 0x04
    1806:	8b 83       	std	Y+3, r24	; 0x03
	reqdLeftShaftCount = degree/4;
    1808:	8d 81       	ldd	r24, Y+5	; 0x05
    180a:	9e 81       	ldd	r25, Y+6	; 0x06
    180c:	9a 87       	std	Y+10, r25	; 0x0a
    180e:	89 87       	std	Y+9, r24	; 0x09
    1810:	89 85       	ldd	r24, Y+9	; 0x09
    1812:	9a 85       	ldd	r25, Y+10	; 0x0a
    1814:	99 23       	and	r25, r25
    1816:	2c f4       	brge	.+10     	; 0x1822 <turn_hard_right+0x64>
    1818:	89 85       	ldd	r24, Y+9	; 0x09
    181a:	9a 85       	ldd	r25, Y+10	; 0x0a
    181c:	03 96       	adiw	r24, 0x03	; 3
    181e:	9a 87       	std	Y+10, r25	; 0x0a
    1820:	89 87       	std	Y+9, r24	; 0x09
    1822:	89 85       	ldd	r24, Y+9	; 0x09
    1824:	9a 85       	ldd	r25, Y+10	; 0x0a
    1826:	95 95       	asr	r25
    1828:	87 95       	ror	r24
    182a:	95 95       	asr	r25
    182c:	87 95       	ror	r24
    182e:	9a 83       	std	Y+2, r25	; 0x02
    1830:	89 83       	std	Y+1, r24	; 0x01
    1832:	02 c0       	rjmp	.+4      	; 0x1838 <turn_hard_right+0x7a>

	while((rightShaftCount < reqdRightShaftCount) && (leftShaftCount < reqdLeftShaftCount)) {
		hard_right();
    1834:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <hard_right>
	unsigned int reqdLeftShaftCount = 0;

	reqdRightShaftCount = degree/4;
	reqdLeftShaftCount = degree/4;

	while((rightShaftCount < reqdRightShaftCount) && (leftShaftCount < reqdLeftShaftCount)) {
    1838:	20 91 0c 03 	lds	r18, 0x030C
    183c:	30 91 0d 03 	lds	r19, 0x030D
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	9c 81       	ldd	r25, Y+4	; 0x04
    1844:	28 17       	cp	r18, r24
    1846:	39 07       	cpc	r19, r25
    1848:	48 f4       	brcc	.+18     	; 0x185c <turn_hard_right+0x9e>
    184a:	20 91 0e 03 	lds	r18, 0x030E
    184e:	30 91 0f 03 	lds	r19, 0x030F
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	9a 81       	ldd	r25, Y+2	; 0x02
    1856:	28 17       	cp	r18, r24
    1858:	39 07       	cpc	r19, r25
    185a:	60 f3       	brcs	.-40     	; 0x1834 <turn_hard_right+0x76>
		hard_right();
	}
	stop();
    185c:	0e 94 1b 0b 	call	0x1636	; 0x1636 <stop>
}
    1860:	2a 96       	adiw	r28, 0x0a	; 10
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	08 95       	ret

00001872 <turn_hard_left>:

void turn_hard_left(int degree)
{
    1872:	df 93       	push	r29
    1874:	cf 93       	push	r28
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    187a:	2a 97       	sbiw	r28, 0x0a	; 10
    187c:	0f b6       	in	r0, 0x3f	; 63
    187e:	f8 94       	cli
    1880:	de bf       	out	0x3e, r29	; 62
    1882:	0f be       	out	0x3f, r0	; 63
    1884:	cd bf       	out	0x3d, r28	; 61
    1886:	9e 83       	std	Y+6, r25	; 0x06
    1888:	8d 83       	std	Y+5, r24	; 0x05
	unsigned int reqdRightShaftCount = 0;
    188a:	1c 82       	std	Y+4, r1	; 0x04
    188c:	1b 82       	std	Y+3, r1	; 0x03
	unsigned int reqdLeftShaftCount = 0;
    188e:	1a 82       	std	Y+2, r1	; 0x02
    1890:	19 82       	std	Y+1, r1	; 0x01

	reqdRightShaftCount = degree/4;
    1892:	8d 81       	ldd	r24, Y+5	; 0x05
    1894:	9e 81       	ldd	r25, Y+6	; 0x06
    1896:	98 87       	std	Y+8, r25	; 0x08
    1898:	8f 83       	std	Y+7, r24	; 0x07
    189a:	8f 81       	ldd	r24, Y+7	; 0x07
    189c:	98 85       	ldd	r25, Y+8	; 0x08
    189e:	99 23       	and	r25, r25
    18a0:	2c f4       	brge	.+10     	; 0x18ac <turn_hard_left+0x3a>
    18a2:	8f 81       	ldd	r24, Y+7	; 0x07
    18a4:	98 85       	ldd	r25, Y+8	; 0x08
    18a6:	03 96       	adiw	r24, 0x03	; 3
    18a8:	98 87       	std	Y+8, r25	; 0x08
    18aa:	8f 83       	std	Y+7, r24	; 0x07
    18ac:	8f 81       	ldd	r24, Y+7	; 0x07
    18ae:	98 85       	ldd	r25, Y+8	; 0x08
    18b0:	95 95       	asr	r25
    18b2:	87 95       	ror	r24
    18b4:	95 95       	asr	r25
    18b6:	87 95       	ror	r24
    18b8:	9c 83       	std	Y+4, r25	; 0x04
    18ba:	8b 83       	std	Y+3, r24	; 0x03
	reqdLeftShaftCount = degree/4;
    18bc:	8d 81       	ldd	r24, Y+5	; 0x05
    18be:	9e 81       	ldd	r25, Y+6	; 0x06
    18c0:	9a 87       	std	Y+10, r25	; 0x0a
    18c2:	89 87       	std	Y+9, r24	; 0x09
    18c4:	89 85       	ldd	r24, Y+9	; 0x09
    18c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c8:	99 23       	and	r25, r25
    18ca:	2c f4       	brge	.+10     	; 0x18d6 <turn_hard_left+0x64>
    18cc:	89 85       	ldd	r24, Y+9	; 0x09
    18ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d0:	03 96       	adiw	r24, 0x03	; 3
    18d2:	9a 87       	std	Y+10, r25	; 0x0a
    18d4:	89 87       	std	Y+9, r24	; 0x09
    18d6:	89 85       	ldd	r24, Y+9	; 0x09
    18d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18da:	95 95       	asr	r25
    18dc:	87 95       	ror	r24
    18de:	95 95       	asr	r25
    18e0:	87 95       	ror	r24
    18e2:	9a 83       	std	Y+2, r25	; 0x02
    18e4:	89 83       	std	Y+1, r24	; 0x01
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <turn_hard_left+0x7a>

	while((rightShaftCount < reqdRightShaftCount) && (leftShaftCount < reqdLeftShaftCount)) {
		hard_left();
    18e8:	0e 94 ef 0a 	call	0x15de	; 0x15de <hard_left>
	unsigned int reqdLeftShaftCount = 0;

	reqdRightShaftCount = degree/4;
	reqdLeftShaftCount = degree/4;

	while((rightShaftCount < reqdRightShaftCount) && (leftShaftCount < reqdLeftShaftCount)) {
    18ec:	20 91 0c 03 	lds	r18, 0x030C
    18f0:	30 91 0d 03 	lds	r19, 0x030D
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	9c 81       	ldd	r25, Y+4	; 0x04
    18f8:	28 17       	cp	r18, r24
    18fa:	39 07       	cpc	r19, r25
    18fc:	48 f4       	brcc	.+18     	; 0x1910 <turn_hard_left+0x9e>
    18fe:	20 91 0e 03 	lds	r18, 0x030E
    1902:	30 91 0f 03 	lds	r19, 0x030F
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	9a 81       	ldd	r25, Y+2	; 0x02
    190a:	28 17       	cp	r18, r24
    190c:	39 07       	cpc	r19, r25
    190e:	60 f3       	brcs	.-40     	; 0x18e8 <turn_hard_left+0x76>
		hard_left();
	}
	stop();
    1910:	0e 94 1b 0b 	call	0x1636	; 0x1636 <stop>
}
    1914:	2a 96       	adiw	r28, 0x0a	; 10
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	f8 94       	cli
    191a:	de bf       	out	0x3e, r29	; 62
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	cd bf       	out	0x3d, r28	; 61
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <adc_pin_config>:
unsigned char ADC_Conversion(unsigned char);
unsigned char prevSignal='~'; //!< saves what was the previous signal

//for measuring distance
void adc_pin_config (void)
{
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
	DDRF = 0x00; 
    192e:	e0 e3       	ldi	r30, 0x30	; 48
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	10 82       	st	Z, r1
	PORTF = 0x00;
    1934:	e1 e3       	ldi	r30, 0x31	; 49
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	10 82       	st	Z, r1
	DDRK = 0x00;
    193a:	e7 e0       	ldi	r30, 0x07	; 7
    193c:	f1 e0       	ldi	r31, 0x01	; 1
    193e:	10 82       	st	Z, r1
	PORTK = 0x00;
    1940:	e8 e0       	ldi	r30, 0x08	; 8
    1942:	f1 e0       	ldi	r31, 0x01	; 1
    1944:	10 82       	st	Z, r1
}
    1946:	cf 91       	pop	r28
    1948:	df 91       	pop	r29
    194a:	08 95       	ret

0000194c <adc_init>:

void adc_init()
{
    194c:	df 93       	push	r29
    194e:	cf 93       	push	r28
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
    1954:	ea e7       	ldi	r30, 0x7A	; 122
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
    195a:	eb e7       	ldi	r30, 0x7B	; 123
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    1960:	ec e7       	ldi	r30, 0x7C	; 124
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 e2       	ldi	r24, 0x20	; 32
    1966:	80 83       	st	Z, r24
	ACSR = 0x80;
    1968:	e0 e5       	ldi	r30, 0x50	; 80
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 e8       	ldi	r24, 0x80	; 128
    196e:	80 83       	st	Z, r24
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    1970:	ea e7       	ldi	r30, 0x7A	; 122
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	86 e8       	ldi	r24, 0x86	; 134
    1976:	80 83       	st	Z, r24
}
    1978:	cf 91       	pop	r28
    197a:	df 91       	pop	r29
    197c:	08 95       	ret

0000197e <ADC_Conversion>:

unsigned char ADC_Conversion(unsigned char Ch)
{
    197e:	df 93       	push	r29
    1980:	cf 93       	push	r28
    1982:	0f 92       	push	r0
    1984:	0f 92       	push	r0
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
    198a:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	88 30       	cpi	r24, 0x08	; 8
    1990:	20 f0       	brcs	.+8      	; 0x199a <ADC_Conversion+0x1c>
	{
		ADCSRB = 0x08;			// select the ch. > 7
    1992:	eb e7       	ldi	r30, 0x7B	; 123
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	88 e0       	ldi	r24, 0x08	; 8
    1998:	80 83       	st	Z, r24
	}
	Ch = Ch & 0x07;  			
    199a:	8a 81       	ldd	r24, Y+2	; 0x02
    199c:	87 70       	andi	r24, 0x07	; 7
    199e:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;	   		//do not disturb the left adjustment
    19a0:	ec e7       	ldi	r30, 0x7C	; 124
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	8a 81       	ldd	r24, Y+2	; 0x02
    19a6:	80 62       	ori	r24, 0x20	; 32
    19a8:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    19aa:	aa e7       	ldi	r26, 0x7A	; 122
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	ea e7       	ldi	r30, 0x7A	; 122
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	80 64       	ori	r24, 0x40	; 64
    19b6:	8c 93       	st	X, r24
	while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
    19b8:	ea e7       	ldi	r30, 0x7A	; 122
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	88 2f       	mov	r24, r24
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	80 71       	andi	r24, 0x10	; 16
    19c4:	90 70       	andi	r25, 0x00	; 0
    19c6:	00 97       	sbiw	r24, 0x00	; 0
    19c8:	b9 f3       	breq	.-18     	; 0x19b8 <ADC_Conversion+0x3a>
	a=ADCH;
    19ca:	e9 e7       	ldi	r30, 0x79	; 121
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; 		//clear ADIF (ADC Interrupt Flag) by writing 1 to it
    19d2:	aa e7       	ldi	r26, 0x7A	; 122
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	ea e7       	ldi	r30, 0x7A	; 122
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	80 61       	ori	r24, 0x10	; 16
    19de:	8c 93       	st	X, r24
	ADCSRB = 0x00;
    19e0:	eb e7       	ldi	r30, 0x7B	; 123
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	10 82       	st	Z, r1
	return a;
    19e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	08 95       	ret

000019f2 <Sharp_GP2D12_estimation>:

unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
{
    19f2:	df 93       	push	r29
    19f4:	cf 93       	push	r28
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
    19fa:	27 97       	sbiw	r28, 0x07	; 7
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	cd bf       	out	0x3d, r28	; 61
    1a06:	8f 83       	std	Y+7, r24	; 0x07
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
    1a08:	8f 81       	ldd	r24, Y+7	; 0x07
    1a0a:	88 2f       	mov	r24, r24
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	a0 e0       	ldi	r26, 0x00	; 0
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	bc 01       	movw	r22, r24
    1a14:	cd 01       	movw	r24, r26
    1a16:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <__floatunsisf>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	bc 01       	movw	r22, r24
    1a20:	cd 01       	movw	r24, r26
    1a22:	2f ee       	ldi	r18, 0xEF	; 239
    1a24:	39 ec       	ldi	r19, 0xC9	; 201
    1a26:	43 e9       	ldi	r20, 0x93	; 147
    1a28:	5f e3       	ldi	r21, 0x3F	; 63
    1a2a:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <pow>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	9c 01       	movw	r18, r24
    1a34:	ad 01       	movw	r20, r26
    1a36:	60 e0       	ldi	r22, 0x00	; 0
    1a38:	70 e0       	ldi	r23, 0x00	; 0
    1a3a:	80 e8       	ldi	r24, 0x80	; 128
    1a3c:	9f e3       	ldi	r25, 0x3F	; 63
    1a3e:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__divsf3>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	bc 01       	movw	r22, r24
    1a48:	cd 01       	movw	r24, r26
    1a4a:	2a e9       	ldi	r18, 0x9A	; 154
    1a4c:	39 ef       	ldi	r19, 0xF9	; 249
    1a4e:	4e e2       	ldi	r20, 0x2E	; 46
    1a50:	55 e4       	ldi	r21, 0x45	; 69
    1a52:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	bc 01       	movw	r22, r24
    1a5c:	cd 01       	movw	r24, r26
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	40 e2       	ldi	r20, 0x20	; 32
    1a64:	51 e4       	ldi	r21, 0x41	; 65
    1a66:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	bc 01       	movw	r22, r24
    1a70:	cd 01       	movw	r24, r26
    1a72:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__fixsfsi>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	aa 27       	eor	r26, r26
    1a7c:	97 fd       	sbrc	r25, 7
    1a7e:	a0 95       	com	r26
    1a80:	ba 2f       	mov	r27, r26
    1a82:	bc 01       	movw	r22, r24
    1a84:	cd 01       	movw	r24, r26
    1a86:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <__floatsisf>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	8b 83       	std	Y+3, r24	; 0x03
    1a90:	9c 83       	std	Y+4, r25	; 0x04
    1a92:	ad 83       	std	Y+5, r26	; 0x05
    1a94:	be 83       	std	Y+6, r27	; 0x06
	distanceInt = (int)distance;
    1a96:	6b 81       	ldd	r22, Y+3	; 0x03
    1a98:	7c 81       	ldd	r23, Y+4	; 0x04
    1a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9e:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__fixsfsi>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	9a 83       	std	Y+2, r25	; 0x02
    1aa8:	89 83       	std	Y+1, r24	; 0x01
	if(distanceInt>800)
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	9a 81       	ldd	r25, Y+2	; 0x02
    1aae:	23 e0       	ldi	r18, 0x03	; 3
    1ab0:	81 32       	cpi	r24, 0x21	; 33
    1ab2:	92 07       	cpc	r25, r18
    1ab4:	20 f0       	brcs	.+8      	; 0x1abe <Sharp_GP2D12_estimation+0xcc>
	{
		distanceInt=800;
    1ab6:	80 e2       	ldi	r24, 0x20	; 32
    1ab8:	93 e0       	ldi	r25, 0x03	; 3
    1aba:	9a 83       	std	Y+2, r25	; 0x02
    1abc:	89 83       	std	Y+1, r24	; 0x01
	}
	return distanceInt;
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
    1ac0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1ac2:	27 96       	adiw	r28, 0x07	; 7
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	f8 94       	cli
    1ac8:	de bf       	out	0x3e, r29	; 62
    1aca:	0f be       	out	0x3f, r0	; 63
    1acc:	cd bf       	out	0x3d, r28	; 61
    1ace:	cf 91       	pop	r28
    1ad0:	df 91       	pop	r29
    1ad2:	08 95       	ret

00001ad4 <lcd_port_config>:

//for showing distance ON LCD
void lcd_port_config (void)
{
    1ad4:	df 93       	push	r29
    1ad6:	cf 93       	push	r28
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
	DDRC = DDRC | 0xF7; 	//all the LCD pin's direction set as output
    1adc:	a7 e2       	ldi	r26, 0x27	; 39
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e7 e2       	ldi	r30, 0x27	; 39
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	87 6f       	ori	r24, 0xF7	; 247
    1ae8:	8c 93       	st	X, r24
	PORTC = PORTC & 0x80; 	// all the LCD pins are set to logic 0 except PORTC 7
    1aea:	a8 e2       	ldi	r26, 0x28	; 40
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	e8 e2       	ldi	r30, 0x28	; 40
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	80 78       	andi	r24, 0x80	; 128
    1af6:	8c 93       	st	X, r24
}
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	08 95       	ret

00001afe <uart0_init>:
 * desired baud rate:9600
 * actual baud rate:9600 (0.0%)
 * char size: 8 bit
 */
void uart0_init(void)
{
    1afe:	df 93       	push	r29
    1b00:	cf 93       	push	r28
    1b02:	cd b7       	in	r28, 0x3d	; 61
    1b04:	de b7       	in	r29, 0x3e	; 62
 UCSR0B = 0x00; //disable while setting baud rate
    1b06:	e1 ec       	ldi	r30, 0xC1	; 193
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	10 82       	st	Z, r1
 UCSR0A = 0x00;
    1b0c:	e0 ec       	ldi	r30, 0xC0	; 192
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	10 82       	st	Z, r1
 UCSR0C = 0x06;
    1b12:	e2 ec       	ldi	r30, 0xC2	; 194
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	86 e0       	ldi	r24, 0x06	; 6
    1b18:	80 83       	st	Z, r24
 UBRR0L = 0x47; //set baud rate lo
    1b1a:	e4 ec       	ldi	r30, 0xC4	; 196
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	87 e4       	ldi	r24, 0x47	; 71
    1b20:	80 83       	st	Z, r24
 UBRR0H = 0x00; //set baud rate hi
    1b22:	e5 ec       	ldi	r30, 0xC5	; 197
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	10 82       	st	Z, r1
 UCSR0B = 0x98;
    1b28:	e1 ec       	ldi	r30, 0xC1	; 193
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	88 e9       	ldi	r24, 0x98	; 152
    1b2e:	80 83       	st	Z, r24
}
    1b30:	cf 91       	pop	r28
    1b32:	df 91       	pop	r29
    1b34:	08 95       	ret

00001b36 <uart1_init>:
* actual baud rate:9600 (0.0%)
* char size: 8 bit
* parity: Disabled
**/
void uart1_init(void)
{
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
 UCSR1B = 0x00; //disable while setting baud rate
    1b3e:	e9 ec       	ldi	r30, 0xC9	; 201
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	10 82       	st	Z, r1
 UCSR1A = 0x00;
    1b44:	e8 ec       	ldi	r30, 0xC8	; 200
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	10 82       	st	Z, r1
 UCSR1C = 0x06;
    1b4a:	ea ec       	ldi	r30, 0xCA	; 202
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	86 e0       	ldi	r24, 0x06	; 6
    1b50:	80 83       	st	Z, r24
 UBRR1L = 0x47; //set baud rate lo
    1b52:	ec ec       	ldi	r30, 0xCC	; 204
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	87 e4       	ldi	r24, 0x47	; 71
    1b58:	80 83       	st	Z, r24
 UBRR1H = 0x00; //set baud rate hi
    1b5a:	ed ec       	ldi	r30, 0xCD	; 205
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	10 82       	st	Z, r1
 UCSR1B = 0x98;
    1b60:	e9 ec       	ldi	r30, 0xC9	; 201
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	88 e9       	ldi	r24, 0x98	; 152
    1b66:	80 83       	st	Z, r24
}
    1b68:	cf 91       	pop	r28
    1b6a:	df 91       	pop	r29
    1b6c:	08 95       	ret

00001b6e <servo1_pin_config>:

//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
    1b6e:	df 93       	push	r29
    1b70:	cf 93       	push	r28
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
	DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
    1b76:	a4 e2       	ldi	r26, 0x24	; 36
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e4 e2       	ldi	r30, 0x24	; 36
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	80 62       	ori	r24, 0x20	; 32
    1b82:	8c 93       	st	X, r24
	PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
    1b84:	a5 e2       	ldi	r26, 0x25	; 37
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	e5 e2       	ldi	r30, 0x25	; 37
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	80 62       	ori	r24, 0x20	; 32
    1b90:	8c 93       	st	X, r24
}
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <port_init>:


//Initialize the ports
void port_init(void)
{
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
	servo1_pin_config(); //Configure PORTB 5 pin for servo motor 1 operation
    1ba0:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <servo1_pin_config>
	adc_pin_config();	
    1ba4:	0e 94 93 0c 	call	0x1926	; 0x1926 <adc_pin_config>
	lcd_port_config();
    1ba8:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <lcd_port_config>
	motion_pin_config(); //robot motion pins config
    1bac:	0e 94 a4 0a 	call	0x1548	; 0x1548 <motion_pin_config>
//	left_encoder_pin_config(); //left encoder pin config
// 	right_encoder_pin_config(); //right encoder pin config	

}
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	08 95       	ret

00001bb6 <timer1_init>:
//TIMER1 initialization in 10 bit fast PWM mode  
//prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 42.187Hz 
void timer1_init(void)
{
    1bb6:	df 93       	push	r29
    1bb8:	cf 93       	push	r28
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = 0x00; //stop
    1bbe:	e1 e8       	ldi	r30, 0x81	; 129
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	10 82       	st	Z, r1
	TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
    1bc4:	e5 e8       	ldi	r30, 0x85	; 133
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	8c ef       	ldi	r24, 0xFC	; 252
    1bca:	80 83       	st	Z, r24
	TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
    1bcc:	e4 e8       	ldi	r30, 0x84	; 132
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	80 83       	st	Z, r24
	OCR1AH = 0x03;	//Output compare eegister high value for servo 1
    1bd4:	e9 e8       	ldi	r30, 0x89	; 137
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	83 e0       	ldi	r24, 0x03	; 3
    1bda:	80 83       	st	Z, r24
	OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
    1bdc:	e8 e8       	ldi	r30, 0x88	; 136
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	8f ef       	ldi	r24, 0xFF	; 255
    1be2:	80 83       	st	Z, r24
	OCR1BH = 0x03;	//Output compare eegister high value for servo 2
    1be4:	eb e8       	ldi	r30, 0x8B	; 139
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	83 e0       	ldi	r24, 0x03	; 3
    1bea:	80 83       	st	Z, r24
	OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
    1bec:	ea e8       	ldi	r30, 0x8A	; 138
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	8f ef       	ldi	r24, 0xFF	; 255
    1bf2:	80 83       	st	Z, r24
	OCR1CH = 0x03;	///Output compare eegister high value for servo 3
    1bf4:	ed e8       	ldi	r30, 0x8D	; 141
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	83 e0       	ldi	r24, 0x03	; 3
    1bfa:	80 83       	st	Z, r24
	OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
    1bfc:	ec e8       	ldi	r30, 0x8C	; 140
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	8f ef       	ldi	r24, 0xFF	; 255
    1c02:	80 83       	st	Z, r24
	ICR1H  = 0x03;	
    1c04:	e7 e8       	ldi	r30, 0x87	; 135
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	83 e0       	ldi	r24, 0x03	; 3
    1c0a:	80 83       	st	Z, r24
	ICR1L  = 0xFF;
    1c0c:	e6 e8       	ldi	r30, 0x86	; 134
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	8f ef       	ldi	r24, 0xFF	; 255
    1c12:	80 83       	st	Z, r24
	TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
    1c14:	e0 e8       	ldi	r30, 0x80	; 128
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	8b ea       	ldi	r24, 0xAB	; 171
    1c1a:	80 83       	st	Z, r24
					 For Overriding normal port functionalit to OCRnA outputs.
					 {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
	TCCR1C = 0x00;
    1c1c:	e2 e8       	ldi	r30, 0x82	; 130
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	10 82       	st	Z, r1
	TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
    1c22:	e1 e8       	ldi	r30, 0x81	; 129
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	8c e0       	ldi	r24, 0x0C	; 12
    1c28:	80 83       	st	Z, r24
}
    1c2a:	cf 91       	pop	r28
    1c2c:	df 91       	pop	r29
    1c2e:	08 95       	ret

00001c30 <init_devices>:


//Function to initialize all the peripherals
void init_devices(void)
{
    1c30:	df 93       	push	r29
    1c32:	cf 93       	push	r28
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
	cli(); //disable all interrupts
    1c38:	f8 94       	cli
	port_init();
    1c3a:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <port_init>
	timer1_init();
    1c3e:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <timer1_init>
	adc_init();
    1c42:	0e 94 a6 0c 	call	0x194c	; 0x194c <adc_init>
	uart1_init(); 
    1c46:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <uart1_init>
//	left_position_encoder_interrupt_init();
// 	right_position_encoder_interrupt_init();
	sei(); //re-enable interrupts 
    1c4a:	78 94       	sei
}
    1c4c:	cf 91       	pop	r28
    1c4e:	df 91       	pop	r29
    1c50:	08 95       	ret

00001c52 <servo_1>:


//Function to rotate Servo 1 by a specified angle in the multiples of 2.25 degrees
void servo_1(unsigned char degrees)  
{
    1c52:	0f 93       	push	r16
    1c54:	1f 93       	push	r17
    1c56:	df 93       	push	r29
    1c58:	cf 93       	push	r28
    1c5a:	00 d0       	rcall	.+0      	; 0x1c5c <servo_1+0xa>
    1c5c:	0f 92       	push	r0
    1c5e:	0f 92       	push	r0
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	8d 83       	std	Y+5, r24	; 0x05
	float PositionPanServo = 0;
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	a0 e0       	ldi	r26, 0x00	; 0
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	89 83       	std	Y+1, r24	; 0x01
    1c70:	9a 83       	std	Y+2, r25	; 0x02
    1c72:	ab 83       	std	Y+3, r26	; 0x03
    1c74:	bc 83       	std	Y+4, r27	; 0x04
	PositionPanServo = ((float)degrees / 2.25) + 21.0;
    1c76:	8d 81       	ldd	r24, Y+5	; 0x05
    1c78:	88 2f       	mov	r24, r24
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	a0 e0       	ldi	r26, 0x00	; 0
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	bc 01       	movw	r22, r24
    1c82:	cd 01       	movw	r24, r26
    1c84:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <__floatunsisf>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	bc 01       	movw	r22, r24
    1c8e:	cd 01       	movw	r24, r26
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	40 e1       	ldi	r20, 0x10	; 16
    1c96:	50 e4       	ldi	r21, 0x40	; 64
    1c98:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__divsf3>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	bc 01       	movw	r22, r24
    1ca2:	cd 01       	movw	r24, r26
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	48 ea       	ldi	r20, 0xA8	; 168
    1caa:	51 e4       	ldi	r21, 0x41	; 65
    1cac:	0e 94 90 14 	call	0x2920	; 0x2920 <__addsf3>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	89 83       	std	Y+1, r24	; 0x01
    1cb6:	9a 83       	std	Y+2, r25	; 0x02
    1cb8:	ab 83       	std	Y+3, r26	; 0x03
    1cba:	bc 83       	std	Y+4, r27	; 0x04
	OCR1AH = 0x00;
    1cbc:	e9 e8       	ldi	r30, 0x89	; 137
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	10 82       	st	Z, r1
	OCR1AL = (unsigned char) PositionPanServo;
    1cc2:	08 e8       	ldi	r16, 0x88	; 136
    1cc4:	10 e0       	ldi	r17, 0x00	; 0
    1cc6:	69 81       	ldd	r22, Y+1	; 0x01
    1cc8:	7a 81       	ldd	r23, Y+2	; 0x02
    1cca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ccc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cce:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fixunssfsi>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	f8 01       	movw	r30, r16
    1cd8:	80 83       	st	Z, r24
}
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	cf 91       	pop	r28
    1ce6:	df 91       	pop	r29
    1ce8:	1f 91       	pop	r17
    1cea:	0f 91       	pop	r16
    1cec:	08 95       	ret

00001cee <servo_1_free>:
 * and make them free by giving 100% duty cycle at the PWM. This function can be used to 
 * reduce the power consumption of the motor if it is holding load against the gravity.
 */

void servo_1_free (void) //makes servo 1 free rotating
{
    1cee:	df 93       	push	r29
    1cf0:	cf 93       	push	r28
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
	OCR1AH = 0x03; 
    1cf6:	e9 e8       	ldi	r30, 0x89	; 137
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	83 e0       	ldi	r24, 0x03	; 3
    1cfc:	80 83       	st	Z, r24
	OCR1AL = 0xFF; //Servo 1 off
    1cfe:	e8 e8       	ldi	r30, 0x88	; 136
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	8f ef       	ldi	r24, 0xFF	; 255
    1d04:	80 83       	st	Z, r24
}
    1d06:	cf 91       	pop	r28
    1d08:	df 91       	pop	r29
    1d0a:	08 95       	ret

00001d0c <sendNumber>:
 * Sends the number through zigbee. 
 * When it is sending the number, matlab may or may not execute read command so sent 50 times.
 * @param number  - unsigned number to be sent
 */
void sendNumber(unsigned int number)
{
    1d0c:	df 93       	push	r29
    1d0e:	cf 93       	push	r28
    1d10:	cd b7       	in	r28, 0x3d	; 61
    1d12:	de b7       	in	r29, 0x3e	; 62
    1d14:	62 97       	sbiw	r28, 0x12	; 18
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	de bf       	out	0x3e, r29	; 62
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	cd bf       	out	0x3d, r28	; 61
    1d20:	9a 8b       	std	Y+18, r25	; 0x12
    1d22:	89 8b       	std	Y+17, r24	; 0x11
	int i;
	for(i=0; i<20; ++i) {
    1d24:	18 8a       	std	Y+16, r1	; 0x10
    1d26:	1f 86       	std	Y+15, r1	; 0x0f
    1d28:	7b c0       	rjmp	.+246    	; 0x1e20 <sendNumber+0x114>
		UDR1 = number;
    1d2a:	ee ec       	ldi	r30, 0xCE	; 206
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	89 89       	ldd	r24, Y+17	; 0x11
    1d30:	80 83       	st	Z, r24
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	a0 e2       	ldi	r26, 0x20	; 32
    1d38:	b1 e4       	ldi	r27, 0x41	; 65
    1d3a:	8b 87       	std	Y+11, r24	; 0x0b
    1d3c:	9c 87       	std	Y+12, r25	; 0x0c
    1d3e:	ad 87       	std	Y+13, r26	; 0x0d
    1d40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d4a:	2d ec       	ldi	r18, 0xCD	; 205
    1d4c:	3c ec       	ldi	r19, 0xCC	; 204
    1d4e:	4c e2       	ldi	r20, 0x2C	; 44
    1d50:	55 e4       	ldi	r21, 0x45	; 69
    1d52:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	8f 83       	std	Y+7, r24	; 0x07
    1d5c:	98 87       	std	Y+8, r25	; 0x08
    1d5e:	a9 87       	std	Y+9, r26	; 0x09
    1d60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d62:	6f 81       	ldd	r22, Y+7	; 0x07
    1d64:	78 85       	ldd	r23, Y+8	; 0x08
    1d66:	89 85       	ldd	r24, Y+9	; 0x09
    1d68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	40 e8       	ldi	r20, 0x80	; 128
    1d70:	5f e3       	ldi	r21, 0x3F	; 63
    1d72:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__ltsf2>
    1d76:	88 23       	and	r24, r24
    1d78:	2c f4       	brge	.+10     	; 0x1d84 <sendNumber+0x78>
		__ticks = 1;
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	9e 83       	std	Y+6, r25	; 0x06
    1d80:	8d 83       	std	Y+5, r24	; 0x05
    1d82:	3f c0       	rjmp	.+126    	; 0x1e02 <sendNumber+0xf6>
	else if (__tmp > 65535)
    1d84:	6f 81       	ldd	r22, Y+7	; 0x07
    1d86:	78 85       	ldd	r23, Y+8	; 0x08
    1d88:	89 85       	ldd	r24, Y+9	; 0x09
    1d8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	3f ef       	ldi	r19, 0xFF	; 255
    1d90:	4f e7       	ldi	r20, 0x7F	; 127
    1d92:	57 e4       	ldi	r21, 0x47	; 71
    1d94:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <__gtsf2>
    1d98:	18 16       	cp	r1, r24
    1d9a:	4c f5       	brge	.+82     	; 0x1dee <sendNumber+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1da0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1da2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	40 e2       	ldi	r20, 0x20	; 32
    1daa:	51 e4       	ldi	r21, 0x41	; 65
    1dac:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	bc 01       	movw	r22, r24
    1db6:	cd 01       	movw	r24, r26
    1db8:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fixunssfsi>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	9e 83       	std	Y+6, r25	; 0x06
    1dc2:	8d 83       	std	Y+5, r24	; 0x05
    1dc4:	0f c0       	rjmp	.+30     	; 0x1de4 <sendNumber+0xd8>
    1dc6:	84 e1       	ldi	r24, 0x14	; 20
    1dc8:	91 e0       	ldi	r25, 0x01	; 1
    1dca:	9c 83       	std	Y+4, r25	; 0x04
    1dcc:	8b 83       	std	Y+3, r24	; 0x03
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd2:	01 97       	sbiw	r24, 0x01	; 1
    1dd4:	f1 f7       	brne	.-4      	; 0x1dd2 <sendNumber+0xc6>
    1dd6:	9c 83       	std	Y+4, r25	; 0x04
    1dd8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dda:	8d 81       	ldd	r24, Y+5	; 0x05
    1ddc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dde:	01 97       	sbiw	r24, 0x01	; 1
    1de0:	9e 83       	std	Y+6, r25	; 0x06
    1de2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de4:	8d 81       	ldd	r24, Y+5	; 0x05
    1de6:	9e 81       	ldd	r25, Y+6	; 0x06
    1de8:	00 97       	sbiw	r24, 0x00	; 0
    1dea:	69 f7       	brne	.-38     	; 0x1dc6 <sendNumber+0xba>
    1dec:	14 c0       	rjmp	.+40     	; 0x1e16 <sendNumber+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dee:	6f 81       	ldd	r22, Y+7	; 0x07
    1df0:	78 85       	ldd	r23, Y+8	; 0x08
    1df2:	89 85       	ldd	r24, Y+9	; 0x09
    1df4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df6:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fixunssfsi>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	9e 83       	std	Y+6, r25	; 0x06
    1e00:	8d 83       	std	Y+5, r24	; 0x05
    1e02:	8d 81       	ldd	r24, Y+5	; 0x05
    1e04:	9e 81       	ldd	r25, Y+6	; 0x06
    1e06:	9a 83       	std	Y+2, r25	; 0x02
    1e08:	89 83       	std	Y+1, r24	; 0x01
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	f1 f7       	brne	.-4      	; 0x1e0e <sendNumber+0x102>
    1e12:	9a 83       	std	Y+2, r25	; 0x02
    1e14:	89 83       	std	Y+1, r24	; 0x01
 * @param number  - unsigned number to be sent
 */
void sendNumber(unsigned int number)
{
	int i;
	for(i=0; i<20; ++i) {
    1e16:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e18:	98 89       	ldd	r25, Y+16	; 0x10
    1e1a:	01 96       	adiw	r24, 0x01	; 1
    1e1c:	98 8b       	std	Y+16, r25	; 0x10
    1e1e:	8f 87       	std	Y+15, r24	; 0x0f
    1e20:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e22:	98 89       	ldd	r25, Y+16	; 0x10
    1e24:	84 31       	cpi	r24, 0x14	; 20
    1e26:	91 05       	cpc	r25, r1
    1e28:	0c f4       	brge	.+2      	; 0x1e2c <sendNumber+0x120>
    1e2a:	7f cf       	rjmp	.-258    	; 0x1d2a <sendNumber+0x1e>
		UDR1 = number;
		_delay_ms(10);
	}
}
    1e2c:	62 96       	adiw	r28, 0x12	; 18
    1e2e:	0f b6       	in	r0, 0x3f	; 63
    1e30:	f8 94       	cli
    1e32:	de bf       	out	0x3e, r29	; 62
    1e34:	0f be       	out	0x3f, r0	; 63
    1e36:	cd bf       	out	0x3d, r28	; 61
    1e38:	cf 91       	pop	r28
    1e3a:	df 91       	pop	r29
    1e3c:	08 95       	ret

00001e3e <__vector_36>:
/**
 * Receives the data through zigbee.
 * Automatically called.
 */
SIGNAL(SIG_USART1_RECV)
{
    1e3e:	1f 92       	push	r1
    1e40:	0f 92       	push	r0
    1e42:	0f b6       	in	r0, 0x3f	; 63
    1e44:	0f 92       	push	r0
    1e46:	00 90 5b 00 	lds	r0, 0x005B
    1e4a:	0f 92       	push	r0
    1e4c:	11 24       	eor	r1, r1
    1e4e:	2f 93       	push	r18
    1e50:	3f 93       	push	r19
    1e52:	4f 93       	push	r20
    1e54:	5f 93       	push	r21
    1e56:	6f 93       	push	r22
    1e58:	7f 93       	push	r23
    1e5a:	8f 93       	push	r24
    1e5c:	9f 93       	push	r25
    1e5e:	af 93       	push	r26
    1e60:	bf 93       	push	r27
    1e62:	ef 93       	push	r30
    1e64:	ff 93       	push	r31
    1e66:	df 93       	push	r29
    1e68:	cf 93       	push	r28
    1e6a:	00 d0       	rcall	.+0      	; 0x1e6c <__vector_36+0x2e>
    1e6c:	0f 92       	push	r0
    1e6e:	0f 92       	push	r0
    1e70:	cd b7       	in	r28, 0x3d	; 61
    1e72:	de b7       	in	r29, 0x3e	; 62
	unsigned char signal = '|'; ///< save received in signal variable
    1e74:	8c e7       	ldi	r24, 0x7C	; 124
    1e76:	8d 83       	std	Y+5, r24	; 0x05
	int sharp, value=0;
    1e78:	1a 82       	std	Y+2, r1	; 0x02
    1e7a:	19 82       	std	Y+1, r1	; 0x01
	signal = UDR1;
    1e7c:	ee ec       	ldi	r30, 0xCE	; 206
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
    1e82:	8d 83       	std	Y+5, r24	; 0x05
	/*
	 * if previous signal was 'n' then a number will come now.
	 */
	if (prevSignal == 'n') {
    1e84:	80 91 02 02 	lds	r24, 0x0202
    1e88:	8e 36       	cpi	r24, 0x6E	; 110
    1e8a:	61 f4       	brne	.+24     	; 0x1ea4 <__vector_36+0x66>
		prevSignal = '~';
    1e8c:	8e e7       	ldi	r24, 0x7E	; 126
    1e8e:	80 93 02 02 	sts	0x0202, r24
		saveNumber = signal; //if prev signal was n, the number is coming
    1e92:	8d 81       	ldd	r24, Y+5	; 0x05
    1e94:	88 2f       	mov	r24, r24
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	90 93 01 02 	sts	0x0201, r25
    1e9c:	80 93 00 02 	sts	0x0200, r24
		signal = '|';
    1ea0:	8c e7       	ldi	r24, 0x7C	; 124
    1ea2:	8d 83       	std	Y+5, r24	; 0x05
	 * 'v' = get value of sharp sensor (divided by 10) at any point of time (send to matlab)
	 * '2/4/5/6/8' = navigation keys
	 * '1/3' = soft left/right rotation
	 * '7/9' = hard left/right rotation
	 */
	if (signal == 's') { //stop rotation
    1ea4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea6:	83 37       	cpi	r24, 0x73	; 115
    1ea8:	29 f4       	brne	.+10     	; 0x1eb4 <__vector_36+0x76>
		rotate = 0;
    1eaa:	10 92 11 03 	sts	0x0311, r1
    1eae:	10 92 10 03 	sts	0x0310, r1
    1eb2:	cb c1       	rjmp	.+918    	; 0x224a <__stack+0x4b>
	} else if (signal == 'r') { //start rotation
    1eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb6:	82 37       	cpi	r24, 0x72	; 114
    1eb8:	39 f4       	brne	.+14     	; 0x1ec8 <__vector_36+0x8a>
		rotate = 1;
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	90 93 11 03 	sts	0x0311, r25
    1ec2:	80 93 10 03 	sts	0x0310, r24
    1ec6:	c1 c1       	rjmp	.+898    	; 0x224a <__stack+0x4b>
	} else if (signal == 'a') { // continue sending angle
    1ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eca:	81 36       	cpi	r24, 0x61	; 97
    1ecc:	39 f4       	brne	.+14     	; 0x1edc <__vector_36+0x9e>
		sendAngle = 1;
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	90 93 15 03 	sts	0x0315, r25
    1ed6:	80 93 14 03 	sts	0x0314, r24
    1eda:	b7 c1       	rjmp	.+878    	; 0x224a <__stack+0x4b>
	} else if (signal == 'd') { // continue sending next
    1edc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ede:	84 36       	cpi	r24, 0x64	; 100
    1ee0:	39 f4       	brne	.+14     	; 0x1ef0 <__vector_36+0xb2>
		sendDistance = 1;
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	90 93 13 03 	sts	0x0313, r25
    1eea:	80 93 12 03 	sts	0x0312, r24
    1eee:	ad c1       	rjmp	.+858    	; 0x224a <__stack+0x4b>
	} else if (signal == 'q') { // reset
    1ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef2:	81 37       	cpi	r24, 0x71	; 113
    1ef4:	29 f4       	brne	.+10     	; 0x1f00 <__vector_36+0xc2>
		prevI = 0;
    1ef6:	10 92 17 03 	sts	0x0317, r1
    1efa:	10 92 16 03 	sts	0x0316, r1
    1efe:	a5 c1       	rjmp	.+842    	; 0x224a <__stack+0x4b>
	} else if (signal == 'f') { //forward
    1f00:	8d 81       	ldd	r24, Y+5	; 0x05
    1f02:	86 36       	cpi	r24, 0x66	; 102
    1f04:	29 f4       	brne	.+10     	; 0x1f10 <__vector_36+0xd2>
		motion_pin_config();
    1f06:	0e 94 a4 0a 	call	0x1548	; 0x1548 <motion_pin_config>
		forward();
    1f0a:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <forward>
    1f0e:	9d c1       	rjmp	.+826    	; 0x224a <__stack+0x4b>
	} else if (signal == 'h') { //halt
    1f10:	8d 81       	ldd	r24, Y+5	; 0x05
    1f12:	88 36       	cpi	r24, 0x68	; 104
    1f14:	29 f4       	brne	.+10     	; 0x1f20 <__vector_36+0xe2>
		motion_pin_config();
    1f16:	0e 94 a4 0a 	call	0x1548	; 0x1548 <motion_pin_config>
		stop();
    1f1a:	0e 94 1b 0b 	call	0x1636	; 0x1636 <stop>
    1f1e:	95 c1       	rjmp	.+810    	; 0x224a <__stack+0x4b>
	} else if (signal == 'n') { //number will come next
    1f20:	8d 81       	ldd	r24, Y+5	; 0x05
    1f22:	8e 36       	cpi	r24, 0x6E	; 110
    1f24:	51 f4       	brne	.+20     	; 0x1f3a <__vector_36+0xfc>
			prevSignal = 'n';
    1f26:	8e e6       	ldi	r24, 0x6E	; 110
    1f28:	80 93 02 02 	sts	0x0202, r24
			saveNumber = 1000;
    1f2c:	88 ee       	ldi	r24, 0xE8	; 232
    1f2e:	93 e0       	ldi	r25, 0x03	; 3
    1f30:	90 93 01 02 	sts	0x0201, r25
    1f34:	80 93 00 02 	sts	0x0200, r24
    1f38:	88 c1       	rjmp	.+784    	; 0x224a <__stack+0x4b>
	} else if (signal == 'p') {
    1f3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3c:	80 37       	cpi	r24, 0x70	; 112
    1f3e:	c1 f4       	brne	.+48     	; 0x1f70 <__vector_36+0x132>
		if(saveNumber < 800) {
    1f40:	80 91 00 02 	lds	r24, 0x0200
    1f44:	90 91 01 02 	lds	r25, 0x0201
    1f48:	23 e0       	ldi	r18, 0x03	; 3
    1f4a:	80 32       	cpi	r24, 0x20	; 32
    1f4c:	92 07       	cpc	r25, r18
    1f4e:	08 f0       	brcs	.+2      	; 0x1f52 <__vector_36+0x114>
    1f50:	7c c1       	rjmp	.+760    	; 0x224a <__stack+0x4b>
			phase = saveNumber;
    1f52:	80 91 00 02 	lds	r24, 0x0200
    1f56:	90 91 01 02 	lds	r25, 0x0201
    1f5a:	90 93 19 03 	sts	0x0319, r25
    1f5e:	80 93 18 03 	sts	0x0318, r24
			saveNumber = 1000;
    1f62:	88 ee       	ldi	r24, 0xE8	; 232
    1f64:	93 e0       	ldi	r25, 0x03	; 3
    1f66:	90 93 01 02 	sts	0x0201, r25
    1f6a:	80 93 00 02 	sts	0x0200, r24
    1f6e:	6d c1       	rjmp	.+730    	; 0x224a <__stack+0x4b>
		}
	} else if (signal == 'm') {
    1f70:	8d 81       	ldd	r24, Y+5	; 0x05
    1f72:	8d 36       	cpi	r24, 0x6D	; 109
    1f74:	b1 f4       	brne	.+44     	; 0x1fa2 <__vector_36+0x164>
		if(saveNumber < 800) {
    1f76:	80 91 00 02 	lds	r24, 0x0200
    1f7a:	90 91 01 02 	lds	r25, 0x0201
    1f7e:	23 e0       	ldi	r18, 0x03	; 3
    1f80:	80 32       	cpi	r24, 0x20	; 32
    1f82:	92 07       	cpc	r25, r18
    1f84:	08 f0       	brcs	.+2      	; 0x1f88 <__vector_36+0x14a>
    1f86:	61 c1       	rjmp	.+706    	; 0x224a <__stack+0x4b>
			servo_1(saveNumber);
    1f88:	80 91 00 02 	lds	r24, 0x0200
    1f8c:	90 91 01 02 	lds	r25, 0x0201
    1f90:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <servo_1>
			saveNumber = 1000;
    1f94:	88 ee       	ldi	r24, 0xE8	; 232
    1f96:	93 e0       	ldi	r25, 0x03	; 3
    1f98:	90 93 01 02 	sts	0x0201, r25
    1f9c:	80 93 00 02 	sts	0x0200, r24
    1fa0:	54 c1       	rjmp	.+680    	; 0x224a <__stack+0x4b>
		}
	} else if (signal == 'v') {
    1fa2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa4:	86 37       	cpi	r24, 0x76	; 118
    1fa6:	89 f5       	brne	.+98     	; 0x200a <__vector_36+0x1cc>
		sharp = ADC_Conversion(11); //Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
    1fa8:	8b e0       	ldi	r24, 0x0B	; 11
    1faa:	0e 94 bf 0c 	call	0x197e	; 0x197e <ADC_Conversion>
    1fae:	88 2f       	mov	r24, r24
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	9c 83       	std	Y+4, r25	; 0x04
    1fb4:	8b 83       	std	Y+3, r24	; 0x03
		value = Sharp_GP2D12_estimation(sharp); //Stores Distance calculated in a variable "value".
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <Sharp_GP2D12_estimation>
    1fbc:	9a 83       	std	Y+2, r25	; 0x02
    1fbe:	89 83       	std	Y+1, r24	; 0x01
		if ((value%10) > 5) {
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc4:	2a e0       	ldi	r18, 0x0A	; 10
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	b9 01       	movw	r22, r18
    1fca:	0e 94 27 1a 	call	0x344e	; 0x344e <__divmodhi4>
    1fce:	86 30       	cpi	r24, 0x06	; 6
    1fd0:	91 05       	cpc	r25, r1
    1fd2:	64 f0       	brlt	.+24     	; 0x1fec <__vector_36+0x1ae>
			value = value/10 + 1;
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
    1fd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd8:	2a e0       	ldi	r18, 0x0A	; 10
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	b9 01       	movw	r22, r18
    1fde:	0e 94 27 1a 	call	0x344e	; 0x344e <__divmodhi4>
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	01 96       	adiw	r24, 0x01	; 1
    1fe6:	9a 83       	std	Y+2, r25	; 0x02
    1fe8:	89 83       	std	Y+1, r24	; 0x01
    1fea:	0a c0       	rjmp	.+20     	; 0x2000 <__vector_36+0x1c2>
		} else {
			value = value/10;
    1fec:	89 81       	ldd	r24, Y+1	; 0x01
    1fee:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff0:	2a e0       	ldi	r18, 0x0A	; 10
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	b9 01       	movw	r22, r18
    1ff6:	0e 94 27 1a 	call	0x344e	; 0x344e <__divmodhi4>
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	9a 83       	std	Y+2, r25	; 0x02
    1ffe:	89 83       	std	Y+1, r24	; 0x01
		}
		sendNumber(value);
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	9a 81       	ldd	r25, Y+2	; 0x02
    2004:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <sendNumber>
    2008:	20 c1       	rjmp	.+576    	; 0x224a <__stack+0x4b>
		//lcd_print(2,1,value,3);
	} else if (signal == '1') {
    200a:	8d 81       	ldd	r24, Y+5	; 0x05
    200c:	81 33       	cpi	r24, 0x31	; 49
    200e:	c1 f4       	brne	.+48     	; 0x2040 <__vector_36+0x202>
		if(saveNumber < 800) {
    2010:	80 91 00 02 	lds	r24, 0x0200
    2014:	90 91 01 02 	lds	r25, 0x0201
    2018:	23 e0       	ldi	r18, 0x03	; 3
    201a:	80 32       	cpi	r24, 0x20	; 32
    201c:	92 07       	cpc	r25, r18
    201e:	08 f0       	brcs	.+2      	; 0x2022 <__vector_36+0x1e4>
    2020:	14 c1       	rjmp	.+552    	; 0x224a <__stack+0x4b>
			motion_pin_config();
    2022:	0e 94 a4 0a 	call	0x1548	; 0x1548 <motion_pin_config>
			turn_soft_left(saveNumber);
    2026:	80 91 00 02 	lds	r24, 0x0200
    202a:	90 91 01 02 	lds	r25, 0x0201
    202e:	0e 94 ab 0b 	call	0x1756	; 0x1756 <turn_soft_left>
			saveNumber = 1000;
    2032:	88 ee       	ldi	r24, 0xE8	; 232
    2034:	93 e0       	ldi	r25, 0x03	; 3
    2036:	90 93 01 02 	sts	0x0201, r25
    203a:	80 93 00 02 	sts	0x0200, r24
    203e:	05 c1       	rjmp	.+522    	; 0x224a <__stack+0x4b>
		}
	} else if (signal == '2') {
    2040:	8d 81       	ldd	r24, Y+5	; 0x05
    2042:	82 33       	cpi	r24, 0x32	; 50
    2044:	11 f5       	brne	.+68     	; 0x208a <__vector_36+0x24c>
		if(saveNumber < 800) {
    2046:	80 91 00 02 	lds	r24, 0x0200
    204a:	90 91 01 02 	lds	r25, 0x0201
    204e:	23 e0       	ldi	r18, 0x03	; 3
    2050:	80 32       	cpi	r24, 0x20	; 32
    2052:	92 07       	cpc	r25, r18
    2054:	08 f0       	brcs	.+2      	; 0x2058 <__vector_36+0x21a>
    2056:	f9 c0       	rjmp	.+498    	; 0x224a <__stack+0x4b>
			motion_pin_config();
    2058:	0e 94 a4 0a 	call	0x1548	; 0x1548 <motion_pin_config>
			move_backward(saveNumber*10);
    205c:	80 91 00 02 	lds	r24, 0x0200
    2060:	90 91 01 02 	lds	r25, 0x0201
    2064:	9c 01       	movw	r18, r24
    2066:	22 0f       	add	r18, r18
    2068:	33 1f       	adc	r19, r19
    206a:	c9 01       	movw	r24, r18
    206c:	88 0f       	add	r24, r24
    206e:	99 1f       	adc	r25, r25
    2070:	88 0f       	add	r24, r24
    2072:	99 1f       	adc	r25, r25
    2074:	82 0f       	add	r24, r18
    2076:	93 1f       	adc	r25, r19
    2078:	0e 94 4e 0b 	call	0x169c	; 0x169c <move_backward>
			saveNumber = 1000;
    207c:	88 ee       	ldi	r24, 0xE8	; 232
    207e:	93 e0       	ldi	r25, 0x03	; 3
    2080:	90 93 01 02 	sts	0x0201, r25
    2084:	80 93 00 02 	sts	0x0200, r24
    2088:	e0 c0       	rjmp	.+448    	; 0x224a <__stack+0x4b>
		}
	} else if (signal == '3') {
    208a:	8d 81       	ldd	r24, Y+5	; 0x05
    208c:	83 33       	cpi	r24, 0x33	; 51
    208e:	c1 f4       	brne	.+48     	; 0x20c0 <__vector_36+0x282>
		if(saveNumber < 800) {
    2090:	80 91 00 02 	lds	r24, 0x0200
    2094:	90 91 01 02 	lds	r25, 0x0201
    2098:	23 e0       	ldi	r18, 0x03	; 3
    209a:	80 32       	cpi	r24, 0x20	; 32
    209c:	92 07       	cpc	r25, r18
    209e:	08 f0       	brcs	.+2      	; 0x20a2 <__vector_36+0x264>
    20a0:	d4 c0       	rjmp	.+424    	; 0x224a <__stack+0x4b>
			motion_pin_config();
    20a2:	0e 94 a4 0a 	call	0x1548	; 0x1548 <motion_pin_config>
			turn_soft_right(saveNumber);
    20a6:	80 91 00 02 	lds	r24, 0x0200
    20aa:	90 91 01 02 	lds	r25, 0x0201
    20ae:	0e 94 77 0b 	call	0x16ee	; 0x16ee <turn_soft_right>
			saveNumber = 1000;
    20b2:	88 ee       	ldi	r24, 0xE8	; 232
    20b4:	93 e0       	ldi	r25, 0x03	; 3
    20b6:	90 93 01 02 	sts	0x0201, r25
    20ba:	80 93 00 02 	sts	0x0200, r24
    20be:	c5 c0       	rjmp	.+394    	; 0x224a <__stack+0x4b>
		}
	} else if (signal == '4') {
    20c0:	8d 81       	ldd	r24, Y+5	; 0x05
    20c2:	84 33       	cpi	r24, 0x34	; 52
    20c4:	41 f5       	brne	.+80     	; 0x2116 <__vector_36+0x2d8>
		if(saveNumber < 800) {
    20c6:	80 91 00 02 	lds	r24, 0x0200
    20ca:	90 91 01 02 	lds	r25, 0x0201
    20ce:	23 e0       	ldi	r18, 0x03	; 3
    20d0:	80 32       	cpi	r24, 0x20	; 32
    20d2:	92 07       	cpc	r25, r18
    20d4:	08 f0       	brcs	.+2      	; 0x20d8 <__vector_36+0x29a>
    20d6:	b9 c0       	rjmp	.+370    	; 0x224a <__stack+0x4b>
			motion_pin_config();
    20d8:	0e 94 a4 0a 	call	0x1548	; 0x1548 <motion_pin_config>
			turn_hard_right(90);
    20dc:	8a e5       	ldi	r24, 0x5A	; 90
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	0e 94 df 0b 	call	0x17be	; 0x17be <turn_hard_right>
			motion_pin_config();
    20e4:	0e 94 a4 0a 	call	0x1548	; 0x1548 <motion_pin_config>
			move_forward(saveNumber*10);
    20e8:	80 91 00 02 	lds	r24, 0x0200
    20ec:	90 91 01 02 	lds	r25, 0x0201
    20f0:	9c 01       	movw	r18, r24
    20f2:	22 0f       	add	r18, r18
    20f4:	33 1f       	adc	r19, r19
    20f6:	c9 01       	movw	r24, r18
    20f8:	88 0f       	add	r24, r24
    20fa:	99 1f       	adc	r25, r25
    20fc:	88 0f       	add	r24, r24
    20fe:	99 1f       	adc	r25, r25
    2100:	82 0f       	add	r24, r18
    2102:	93 1f       	adc	r25, r19
    2104:	0e 94 25 0b 	call	0x164a	; 0x164a <move_forward>
			saveNumber = 1000;
    2108:	88 ee       	ldi	r24, 0xE8	; 232
    210a:	93 e0       	ldi	r25, 0x03	; 3
    210c:	90 93 01 02 	sts	0x0201, r25
    2110:	80 93 00 02 	sts	0x0200, r24
    2114:	9a c0       	rjmp	.+308    	; 0x224a <__stack+0x4b>
		}
	} else if (signal == '5') {
    2116:	8d 81       	ldd	r24, Y+5	; 0x05
    2118:	85 33       	cpi	r24, 0x35	; 53
    211a:	a1 f4       	brne	.+40     	; 0x2144 <__vector_36+0x306>
		if(saveNumber < 800) {
    211c:	80 91 00 02 	lds	r24, 0x0200
    2120:	90 91 01 02 	lds	r25, 0x0201
    2124:	23 e0       	ldi	r18, 0x03	; 3
    2126:	80 32       	cpi	r24, 0x20	; 32
    2128:	92 07       	cpc	r25, r18
    212a:	08 f0       	brcs	.+2      	; 0x212e <__vector_36+0x2f0>
    212c:	8e c0       	rjmp	.+284    	; 0x224a <__stack+0x4b>
			motion_pin_config();
    212e:	0e 94 a4 0a 	call	0x1548	; 0x1548 <motion_pin_config>
			stop();
    2132:	0e 94 1b 0b 	call	0x1636	; 0x1636 <stop>
			saveNumber = 1000;
    2136:	88 ee       	ldi	r24, 0xE8	; 232
    2138:	93 e0       	ldi	r25, 0x03	; 3
    213a:	90 93 01 02 	sts	0x0201, r25
    213e:	80 93 00 02 	sts	0x0200, r24
    2142:	83 c0       	rjmp	.+262    	; 0x224a <__stack+0x4b>
		}
	} else if (signal == '6') {
    2144:	8d 81       	ldd	r24, Y+5	; 0x05
    2146:	86 33       	cpi	r24, 0x36	; 54
    2148:	41 f5       	brne	.+80     	; 0x219a <__vector_36+0x35c>
		if(saveNumber < 800) {
    214a:	80 91 00 02 	lds	r24, 0x0200
    214e:	90 91 01 02 	lds	r25, 0x0201
    2152:	23 e0       	ldi	r18, 0x03	; 3
    2154:	80 32       	cpi	r24, 0x20	; 32
    2156:	92 07       	cpc	r25, r18
    2158:	08 f0       	brcs	.+2      	; 0x215c <__vector_36+0x31e>
    215a:	77 c0       	rjmp	.+238    	; 0x224a <__stack+0x4b>
			motion_pin_config();
    215c:	0e 94 a4 0a 	call	0x1548	; 0x1548 <motion_pin_config>
			turn_hard_right(90);
    2160:	8a e5       	ldi	r24, 0x5A	; 90
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	0e 94 df 0b 	call	0x17be	; 0x17be <turn_hard_right>
			motion_pin_config();
    2168:	0e 94 a4 0a 	call	0x1548	; 0x1548 <motion_pin_config>
			move_forward(saveNumber*10);
    216c:	80 91 00 02 	lds	r24, 0x0200
    2170:	90 91 01 02 	lds	r25, 0x0201
    2174:	9c 01       	movw	r18, r24
    2176:	22 0f       	add	r18, r18
    2178:	33 1f       	adc	r19, r19
    217a:	c9 01       	movw	r24, r18
    217c:	88 0f       	add	r24, r24
    217e:	99 1f       	adc	r25, r25
    2180:	88 0f       	add	r24, r24
    2182:	99 1f       	adc	r25, r25
    2184:	82 0f       	add	r24, r18
    2186:	93 1f       	adc	r25, r19
    2188:	0e 94 25 0b 	call	0x164a	; 0x164a <move_forward>
			saveNumber = 1000;
    218c:	88 ee       	ldi	r24, 0xE8	; 232
    218e:	93 e0       	ldi	r25, 0x03	; 3
    2190:	90 93 01 02 	sts	0x0201, r25
    2194:	80 93 00 02 	sts	0x0200, r24
    2198:	58 c0       	rjmp	.+176    	; 0x224a <__stack+0x4b>
		}
	} else if (signal == '7') {
    219a:	8d 81       	ldd	r24, Y+5	; 0x05
    219c:	87 33       	cpi	r24, 0x37	; 55
    219e:	c1 f4       	brne	.+48     	; 0x21d0 <__vector_36+0x392>
		if(saveNumber < 800) {
    21a0:	80 91 00 02 	lds	r24, 0x0200
    21a4:	90 91 01 02 	lds	r25, 0x0201
    21a8:	23 e0       	ldi	r18, 0x03	; 3
    21aa:	80 32       	cpi	r24, 0x20	; 32
    21ac:	92 07       	cpc	r25, r18
    21ae:	08 f0       	brcs	.+2      	; 0x21b2 <__vector_36+0x374>
    21b0:	4c c0       	rjmp	.+152    	; 0x224a <__stack+0x4b>
			motion_pin_config();
    21b2:	0e 94 a4 0a 	call	0x1548	; 0x1548 <motion_pin_config>
			turn_hard_left(saveNumber);
    21b6:	80 91 00 02 	lds	r24, 0x0200
    21ba:	90 91 01 02 	lds	r25, 0x0201
    21be:	0e 94 39 0c 	call	0x1872	; 0x1872 <turn_hard_left>
			saveNumber = 1000;
    21c2:	88 ee       	ldi	r24, 0xE8	; 232
    21c4:	93 e0       	ldi	r25, 0x03	; 3
    21c6:	90 93 01 02 	sts	0x0201, r25
    21ca:	80 93 00 02 	sts	0x0200, r24
    21ce:	3d c0       	rjmp	.+122    	; 0x224a <__stack+0x4b>
		}
	} else if (signal == '8') {
    21d0:	8d 81       	ldd	r24, Y+5	; 0x05
    21d2:	88 33       	cpi	r24, 0x38	; 56
    21d4:	09 f5       	brne	.+66     	; 0x2218 <__stack+0x19>
		if(saveNumber < 800) {
    21d6:	80 91 00 02 	lds	r24, 0x0200
    21da:	90 91 01 02 	lds	r25, 0x0201
    21de:	23 e0       	ldi	r18, 0x03	; 3
    21e0:	80 32       	cpi	r24, 0x20	; 32
    21e2:	92 07       	cpc	r25, r18
    21e4:	90 f5       	brcc	.+100    	; 0x224a <__stack+0x4b>
			motion_pin_config();
    21e6:	0e 94 a4 0a 	call	0x1548	; 0x1548 <motion_pin_config>
			move_forward(saveNumber*10);
    21ea:	80 91 00 02 	lds	r24, 0x0200
    21ee:	90 91 01 02 	lds	r25, 0x0201
    21f2:	9c 01       	movw	r18, r24
    21f4:	22 0f       	add	r18, r18
    21f6:	33 1f       	adc	r19, r19
    21f8:	c9 01       	movw	r24, r18
    21fa:	88 0f       	add	r24, r24
    21fc:	99 1f       	adc	r25, r25
    21fe:	88 0f       	add	r24, r24
    2200:	99 1f       	adc	r25, r25
    2202:	82 0f       	add	r24, r18
    2204:	93 1f       	adc	r25, r19
    2206:	0e 94 25 0b 	call	0x164a	; 0x164a <move_forward>
			saveNumber = 1000;
    220a:	88 ee       	ldi	r24, 0xE8	; 232
    220c:	93 e0       	ldi	r25, 0x03	; 3
    220e:	90 93 01 02 	sts	0x0201, r25
    2212:	80 93 00 02 	sts	0x0200, r24
    2216:	19 c0       	rjmp	.+50     	; 0x224a <__stack+0x4b>
		}
	} else if (signal == '9') {
    2218:	8d 81       	ldd	r24, Y+5	; 0x05
    221a:	89 33       	cpi	r24, 0x39	; 57
    221c:	b1 f4       	brne	.+44     	; 0x224a <__stack+0x4b>
		if(saveNumber < 800) {
    221e:	80 91 00 02 	lds	r24, 0x0200
    2222:	90 91 01 02 	lds	r25, 0x0201
    2226:	23 e0       	ldi	r18, 0x03	; 3
    2228:	80 32       	cpi	r24, 0x20	; 32
    222a:	92 07       	cpc	r25, r18
    222c:	70 f4       	brcc	.+28     	; 0x224a <__stack+0x4b>
			motion_pin_config();
    222e:	0e 94 a4 0a 	call	0x1548	; 0x1548 <motion_pin_config>
			turn_hard_right(saveNumber);
    2232:	80 91 00 02 	lds	r24, 0x0200
    2236:	90 91 01 02 	lds	r25, 0x0201
    223a:	0e 94 df 0b 	call	0x17be	; 0x17be <turn_hard_right>
			saveNumber = 1000;
    223e:	88 ee       	ldi	r24, 0xE8	; 232
    2240:	93 e0       	ldi	r25, 0x03	; 3
    2242:	90 93 01 02 	sts	0x0201, r25
    2246:	80 93 00 02 	sts	0x0200, r24
		}
	}
}
    224a:	0f 90       	pop	r0
    224c:	0f 90       	pop	r0
    224e:	0f 90       	pop	r0
    2250:	0f 90       	pop	r0
    2252:	0f 90       	pop	r0
    2254:	cf 91       	pop	r28
    2256:	df 91       	pop	r29
    2258:	ff 91       	pop	r31
    225a:	ef 91       	pop	r30
    225c:	bf 91       	pop	r27
    225e:	af 91       	pop	r26
    2260:	9f 91       	pop	r25
    2262:	8f 91       	pop	r24
    2264:	7f 91       	pop	r23
    2266:	6f 91       	pop	r22
    2268:	5f 91       	pop	r21
    226a:	4f 91       	pop	r20
    226c:	3f 91       	pop	r19
    226e:	2f 91       	pop	r18
    2270:	0f 90       	pop	r0
    2272:	00 92 5b 00 	sts	0x005B, r0
    2276:	0f 90       	pop	r0
    2278:	0f be       	out	0x3f, r0	; 63
    227a:	0f 90       	pop	r0
    227c:	1f 90       	pop	r1
    227e:	18 95       	reti

00002280 <locate>:

/**
 * Function called using matlab, used to detect red/green/blue poles.
 */
void locate()
{
    2280:	df 93       	push	r29
    2282:	cf 93       	push	r28
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
    2288:	a2 97       	sbiw	r28, 0x22	; 34
    228a:	0f b6       	in	r0, 0x3f	; 63
    228c:	f8 94       	cli
    228e:	de bf       	out	0x3e, r29	; 62
    2290:	0f be       	out	0x3f, r0	; 63
    2292:	cd bf       	out	0x3d, r28	; 61
	unsigned char i = 0, sharp;
    2294:	1a a2       	std	Y+34, r1	; 0x22
	unsigned int value=0, cm;
    2296:	18 a2       	std	Y+32, r1	; 0x20
    2298:	1f 8e       	std	Y+31, r1	; 0x1f
	if (rotate == 1) {
    229a:	80 91 10 03 	lds	r24, 0x0310
    229e:	90 91 11 03 	lds	r25, 0x0311
    22a2:	81 30       	cpi	r24, 0x01	; 1
    22a4:	91 05       	cpc	r25, r1
    22a6:	09 f0       	breq	.+2      	; 0x22aa <locate+0x2a>
    22a8:	5d c1       	rjmp	.+698    	; 0x2564 <locate+0x2e4>
		for (i = prevI; i < 180; i++) {
    22aa:	80 91 16 03 	lds	r24, 0x0316
    22ae:	90 91 17 03 	lds	r25, 0x0317
    22b2:	8a a3       	std	Y+34, r24	; 0x22
    22b4:	e1 c0       	rjmp	.+450    	; 0x2478 <locate+0x1f8>
			servo_1(i);
    22b6:	8a a1       	ldd	r24, Y+34	; 0x22
    22b8:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <servo_1>
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	a6 e9       	ldi	r26, 0x96	; 150
    22c2:	b3 e4       	ldi	r27, 0x43	; 67
    22c4:	89 8f       	std	Y+25, r24	; 0x19
    22c6:	9a 8f       	std	Y+26, r25	; 0x1a
    22c8:	ab 8f       	std	Y+27, r26	; 0x1b
    22ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22cc:	69 8d       	ldd	r22, Y+25	; 0x19
    22ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22d4:	2d ec       	ldi	r18, 0xCD	; 205
    22d6:	3c ec       	ldi	r19, 0xCC	; 204
    22d8:	4c e2       	ldi	r20, 0x2C	; 44
    22da:	55 e4       	ldi	r21, 0x45	; 69
    22dc:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	8d 8b       	std	Y+21, r24	; 0x15
    22e6:	9e 8b       	std	Y+22, r25	; 0x16
    22e8:	af 8b       	std	Y+23, r26	; 0x17
    22ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22ec:	6d 89       	ldd	r22, Y+21	; 0x15
    22ee:	7e 89       	ldd	r23, Y+22	; 0x16
    22f0:	8f 89       	ldd	r24, Y+23	; 0x17
    22f2:	98 8d       	ldd	r25, Y+24	; 0x18
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	40 e8       	ldi	r20, 0x80	; 128
    22fa:	5f e3       	ldi	r21, 0x3F	; 63
    22fc:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__ltsf2>
    2300:	88 23       	and	r24, r24
    2302:	2c f4       	brge	.+10     	; 0x230e <locate+0x8e>
		__ticks = 1;
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	9c 8b       	std	Y+20, r25	; 0x14
    230a:	8b 8b       	std	Y+19, r24	; 0x13
    230c:	3f c0       	rjmp	.+126    	; 0x238c <locate+0x10c>
	else if (__tmp > 65535)
    230e:	6d 89       	ldd	r22, Y+21	; 0x15
    2310:	7e 89       	ldd	r23, Y+22	; 0x16
    2312:	8f 89       	ldd	r24, Y+23	; 0x17
    2314:	98 8d       	ldd	r25, Y+24	; 0x18
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	3f ef       	ldi	r19, 0xFF	; 255
    231a:	4f e7       	ldi	r20, 0x7F	; 127
    231c:	57 e4       	ldi	r21, 0x47	; 71
    231e:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <__gtsf2>
    2322:	18 16       	cp	r1, r24
    2324:	4c f5       	brge	.+82     	; 0x2378 <locate+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2326:	69 8d       	ldd	r22, Y+25	; 0x19
    2328:	7a 8d       	ldd	r23, Y+26	; 0x1a
    232a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    232c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e2       	ldi	r20, 0x20	; 32
    2334:	51 e4       	ldi	r21, 0x41	; 65
    2336:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	bc 01       	movw	r22, r24
    2340:	cd 01       	movw	r24, r26
    2342:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fixunssfsi>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	9c 8b       	std	Y+20, r25	; 0x14
    234c:	8b 8b       	std	Y+19, r24	; 0x13
    234e:	0f c0       	rjmp	.+30     	; 0x236e <locate+0xee>
    2350:	84 e1       	ldi	r24, 0x14	; 20
    2352:	91 e0       	ldi	r25, 0x01	; 1
    2354:	9a 8b       	std	Y+18, r25	; 0x12
    2356:	89 8b       	std	Y+17, r24	; 0x11
    2358:	89 89       	ldd	r24, Y+17	; 0x11
    235a:	9a 89       	ldd	r25, Y+18	; 0x12
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	f1 f7       	brne	.-4      	; 0x235c <locate+0xdc>
    2360:	9a 8b       	std	Y+18, r25	; 0x12
    2362:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2364:	8b 89       	ldd	r24, Y+19	; 0x13
    2366:	9c 89       	ldd	r25, Y+20	; 0x14
    2368:	01 97       	sbiw	r24, 0x01	; 1
    236a:	9c 8b       	std	Y+20, r25	; 0x14
    236c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236e:	8b 89       	ldd	r24, Y+19	; 0x13
    2370:	9c 89       	ldd	r25, Y+20	; 0x14
    2372:	00 97       	sbiw	r24, 0x00	; 0
    2374:	69 f7       	brne	.-38     	; 0x2350 <locate+0xd0>
    2376:	14 c0       	rjmp	.+40     	; 0x23a0 <locate+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2378:	6d 89       	ldd	r22, Y+21	; 0x15
    237a:	7e 89       	ldd	r23, Y+22	; 0x16
    237c:	8f 89       	ldd	r24, Y+23	; 0x17
    237e:	98 8d       	ldd	r25, Y+24	; 0x18
    2380:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fixunssfsi>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	9c 8b       	std	Y+20, r25	; 0x14
    238a:	8b 8b       	std	Y+19, r24	; 0x13
    238c:	8b 89       	ldd	r24, Y+19	; 0x13
    238e:	9c 89       	ldd	r25, Y+20	; 0x14
    2390:	98 8b       	std	Y+16, r25	; 0x10
    2392:	8f 87       	std	Y+15, r24	; 0x0f
    2394:	8f 85       	ldd	r24, Y+15	; 0x0f
    2396:	98 89       	ldd	r25, Y+16	; 0x10
    2398:	01 97       	sbiw	r24, 0x01	; 1
    239a:	f1 f7       	brne	.-4      	; 0x2398 <locate+0x118>
    239c:	98 8b       	std	Y+16, r25	; 0x10
    239e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(300);
			sharp = ADC_Conversion(11); //Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
    23a0:	8b e0       	ldi	r24, 0x0B	; 11
    23a2:	0e 94 bf 0c 	call	0x197e	; 0x197e <ADC_Conversion>
    23a6:	89 a3       	std	Y+33, r24	; 0x21
			value = Sharp_GP2D12_estimation(sharp); //Stores Distance calculated in a variable "value".
    23a8:	89 a1       	ldd	r24, Y+33	; 0x21
    23aa:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <Sharp_GP2D12_estimation>
    23ae:	98 a3       	std	Y+32, r25	; 0x20
    23b0:	8f 8f       	std	Y+31, r24	; 0x1f
			lcd_print(2,1,value,3);
    23b2:	2f 8d       	ldd	r18, Y+31	; 0x1f
    23b4:	38 a1       	ldd	r19, Y+32	; 0x20
    23b6:	82 e0       	ldi	r24, 0x02	; 2
    23b8:	61 e0       	ldi	r22, 0x01	; 1
    23ba:	a9 01       	movw	r20, r18
    23bc:	23 e0       	ldi	r18, 0x03	; 3
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
			lcd_print(2,6,i,3);
    23c4:	8a a1       	ldd	r24, Y+34	; 0x22
    23c6:	28 2f       	mov	r18, r24
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	82 e0       	ldi	r24, 0x02	; 2
    23cc:	66 e0       	ldi	r22, 0x06	; 6
    23ce:	a9 01       	movw	r20, r18
    23d0:	23 e0       	ldi	r18, 0x03	; 3
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
			if (rotate == 0) {
    23d8:	80 91 10 03 	lds	r24, 0x0310
    23dc:	90 91 11 03 	lds	r25, 0x0311
    23e0:	00 97       	sbiw	r24, 0x00	; 0
    23e2:	09 f0       	breq	.+2      	; 0x23e6 <locate+0x166>
    23e4:	3f c0       	rjmp	.+126    	; 0x2464 <locate+0x1e4>
				prevI = i;
    23e6:	8a a1       	ldd	r24, Y+34	; 0x22
    23e8:	88 2f       	mov	r24, r24
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	90 93 17 03 	sts	0x0317, r25
    23f0:	80 93 16 03 	sts	0x0316, r24
				/*
				 * Distance measured by sharp sensor is in mm, convert to cm for sending send.
				 * for example 230 is send as 23; 233 as 230; 238 as 24 so max error is 5 mm
				 */
				cm = value/10;
    23f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23f6:	98 a1       	ldd	r25, Y+32	; 0x20
    23f8:	2a e0       	ldi	r18, 0x0A	; 10
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	b9 01       	movw	r22, r18
    23fe:	0e 94 13 1a 	call	0x3426	; 0x3426 <__udivmodhi4>
    2402:	cb 01       	movw	r24, r22
    2404:	9e 8f       	std	Y+30, r25	; 0x1e
    2406:	8d 8f       	std	Y+29, r24	; 0x1d
				if (value%10 > 5) {
    2408:	8f 8d       	ldd	r24, Y+31	; 0x1f
    240a:	98 a1       	ldd	r25, Y+32	; 0x20
    240c:	2a e0       	ldi	r18, 0x0A	; 10
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	b9 01       	movw	r22, r18
    2412:	0e 94 13 1a 	call	0x3426	; 0x3426 <__udivmodhi4>
    2416:	86 30       	cpi	r24, 0x06	; 6
    2418:	91 05       	cpc	r25, r1
    241a:	28 f0       	brcs	.+10     	; 0x2426 <locate+0x1a6>
					cm += 1;
    241c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    241e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2420:	01 96       	adiw	r24, 0x01	; 1
    2422:	9e 8f       	std	Y+30, r25	; 0x1e
    2424:	8d 8f       	std	Y+29, r24	; 0x1d
				}
				while (sendDistance==0); //wait till matlab is ready to accept distance
    2426:	80 91 12 03 	lds	r24, 0x0312
    242a:	90 91 13 03 	lds	r25, 0x0313
    242e:	00 97       	sbiw	r24, 0x00	; 0
    2430:	d1 f3       	breq	.-12     	; 0x2426 <locate+0x1a6>
				sendNumber(cm);
    2432:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2434:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2436:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <sendNumber>
				sendDistance = 0;
    243a:	10 92 13 03 	sts	0x0313, r1
    243e:	10 92 12 03 	sts	0x0312, r1
				while (sendAngle==0); // wait till matlab is ready to receive angle.
    2442:	80 91 14 03 	lds	r24, 0x0314
    2446:	90 91 15 03 	lds	r25, 0x0315
    244a:	00 97       	sbiw	r24, 0x00	; 0
    244c:	d1 f3       	breq	.-12     	; 0x2442 <locate+0x1c2>
				sendNumber(i);
    244e:	8a a1       	ldd	r24, Y+34	; 0x22
    2450:	88 2f       	mov	r24, r24
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <sendNumber>
				sendAngle = 0; // disable sendNext, 
    2458:	10 92 15 03 	sts	0x0315, r1
    245c:	10 92 14 03 	sts	0x0314, r1
				i=180; //any random number to get us out of for loop
    2460:	84 eb       	ldi	r24, 0xB4	; 180
    2462:	8a a3       	std	Y+34, r24	; 0x22
			}
			if (i == 179) {
    2464:	8a a1       	ldd	r24, Y+34	; 0x22
    2466:	83 3b       	cpi	r24, 0xB3	; 179
    2468:	21 f4       	brne	.+8      	; 0x2472 <locate+0x1f2>
				prevI = 0;
    246a:	10 92 17 03 	sts	0x0317, r1
    246e:	10 92 16 03 	sts	0x0316, r1
void locate()
{
	unsigned char i = 0, sharp;
	unsigned int value=0, cm;
	if (rotate == 1) {
		for (i = prevI; i < 180; i++) {
    2472:	8a a1       	ldd	r24, Y+34	; 0x22
    2474:	8f 5f       	subi	r24, 0xFF	; 255
    2476:	8a a3       	std	Y+34, r24	; 0x22
    2478:	8a a1       	ldd	r24, Y+34	; 0x22
    247a:	84 3b       	cpi	r24, 0xB4	; 180
    247c:	08 f4       	brcc	.+2      	; 0x2480 <locate+0x200>
    247e:	1b cf       	rjmp	.-458    	; 0x22b6 <locate+0x36>
    2480:	80 e0       	ldi	r24, 0x00	; 0
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	aa ef       	ldi	r26, 0xFA	; 250
    2486:	b3 e4       	ldi	r27, 0x43	; 67
    2488:	8b 87       	std	Y+11, r24	; 0x0b
    248a:	9c 87       	std	Y+12, r25	; 0x0c
    248c:	ad 87       	std	Y+13, r26	; 0x0d
    248e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2490:	6b 85       	ldd	r22, Y+11	; 0x0b
    2492:	7c 85       	ldd	r23, Y+12	; 0x0c
    2494:	8d 85       	ldd	r24, Y+13	; 0x0d
    2496:	9e 85       	ldd	r25, Y+14	; 0x0e
    2498:	2d ec       	ldi	r18, 0xCD	; 205
    249a:	3c ec       	ldi	r19, 0xCC	; 204
    249c:	4c e2       	ldi	r20, 0x2C	; 44
    249e:	55 e4       	ldi	r21, 0x45	; 69
    24a0:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	8f 83       	std	Y+7, r24	; 0x07
    24aa:	98 87       	std	Y+8, r25	; 0x08
    24ac:	a9 87       	std	Y+9, r26	; 0x09
    24ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24b0:	6f 81       	ldd	r22, Y+7	; 0x07
    24b2:	78 85       	ldd	r23, Y+8	; 0x08
    24b4:	89 85       	ldd	r24, Y+9	; 0x09
    24b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	40 e8       	ldi	r20, 0x80	; 128
    24be:	5f e3       	ldi	r21, 0x3F	; 63
    24c0:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__ltsf2>
    24c4:	88 23       	and	r24, r24
    24c6:	2c f4       	brge	.+10     	; 0x24d2 <locate+0x252>
		__ticks = 1;
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	9e 83       	std	Y+6, r25	; 0x06
    24ce:	8d 83       	std	Y+5, r24	; 0x05
    24d0:	3f c0       	rjmp	.+126    	; 0x2550 <locate+0x2d0>
	else if (__tmp > 65535)
    24d2:	6f 81       	ldd	r22, Y+7	; 0x07
    24d4:	78 85       	ldd	r23, Y+8	; 0x08
    24d6:	89 85       	ldd	r24, Y+9	; 0x09
    24d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	3f ef       	ldi	r19, 0xFF	; 255
    24de:	4f e7       	ldi	r20, 0x7F	; 127
    24e0:	57 e4       	ldi	r21, 0x47	; 71
    24e2:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <__gtsf2>
    24e6:	18 16       	cp	r1, r24
    24e8:	4c f5       	brge	.+82     	; 0x253c <locate+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	40 e2       	ldi	r20, 0x20	; 32
    24f8:	51 e4       	ldi	r21, 0x41	; 65
    24fa:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	bc 01       	movw	r22, r24
    2504:	cd 01       	movw	r24, r26
    2506:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fixunssfsi>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	9e 83       	std	Y+6, r25	; 0x06
    2510:	8d 83       	std	Y+5, r24	; 0x05
    2512:	0f c0       	rjmp	.+30     	; 0x2532 <locate+0x2b2>
    2514:	84 e1       	ldi	r24, 0x14	; 20
    2516:	91 e0       	ldi	r25, 0x01	; 1
    2518:	9c 83       	std	Y+4, r25	; 0x04
    251a:	8b 83       	std	Y+3, r24	; 0x03
    251c:	8b 81       	ldd	r24, Y+3	; 0x03
    251e:	9c 81       	ldd	r25, Y+4	; 0x04
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	f1 f7       	brne	.-4      	; 0x2520 <locate+0x2a0>
    2524:	9c 83       	std	Y+4, r25	; 0x04
    2526:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2528:	8d 81       	ldd	r24, Y+5	; 0x05
    252a:	9e 81       	ldd	r25, Y+6	; 0x06
    252c:	01 97       	sbiw	r24, 0x01	; 1
    252e:	9e 83       	std	Y+6, r25	; 0x06
    2530:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2532:	8d 81       	ldd	r24, Y+5	; 0x05
    2534:	9e 81       	ldd	r25, Y+6	; 0x06
    2536:	00 97       	sbiw	r24, 0x00	; 0
    2538:	69 f7       	brne	.-38     	; 0x2514 <locate+0x294>
    253a:	14 c0       	rjmp	.+40     	; 0x2564 <locate+0x2e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    253c:	6f 81       	ldd	r22, Y+7	; 0x07
    253e:	78 85       	ldd	r23, Y+8	; 0x08
    2540:	89 85       	ldd	r24, Y+9	; 0x09
    2542:	9a 85       	ldd	r25, Y+10	; 0x0a
    2544:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fixunssfsi>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	9e 83       	std	Y+6, r25	; 0x06
    254e:	8d 83       	std	Y+5, r24	; 0x05
    2550:	8d 81       	ldd	r24, Y+5	; 0x05
    2552:	9e 81       	ldd	r25, Y+6	; 0x06
    2554:	9a 83       	std	Y+2, r25	; 0x02
    2556:	89 83       	std	Y+1, r24	; 0x01
    2558:	89 81       	ldd	r24, Y+1	; 0x01
    255a:	9a 81       	ldd	r25, Y+2	; 0x02
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	f1 f7       	brne	.-4      	; 0x255c <locate+0x2dc>
    2560:	9a 83       	std	Y+2, r25	; 0x02
    2562:	89 83       	std	Y+1, r24	; 0x01
				prevI = 0;
			}
		}
	_delay_ms(500);
	}
}
    2564:	a2 96       	adiw	r28, 0x22	; 34
    2566:	0f b6       	in	r0, 0x3f	; 63
    2568:	f8 94       	cli
    256a:	de bf       	out	0x3e, r29	; 62
    256c:	0f be       	out	0x3f, r0	; 63
    256e:	cd bf       	out	0x3d, r28	; 61
    2570:	cf 91       	pop	r28
    2572:	df 91       	pop	r29
    2574:	08 95       	ret

00002576 <main>:

/*
 * Main function, will call different phases, locate/clean
 */
int main(void)
{
    2576:	df 93       	push	r29
    2578:	cf 93       	push	r28
    257a:	00 d0       	rcall	.+0      	; 0x257c <main+0x6>
    257c:	cd b7       	in	r28, 0x3d	; 61
    257e:	de b7       	in	r29, 0x3e	; 62
	unsigned char sharp;
	unsigned int value=0;
    2580:	1a 82       	std	Y+2, r1	; 0x02
    2582:	19 82       	std	Y+1, r1	; 0x01
	init_devices();
    2584:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <init_devices>
	lcd_set_4bit();
    2588:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_set_4bit>
	lcd_init();
    258c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <lcd_init>
	lcd_wr_command(0x0C);// Display ON Cursor OFF
    2590:	8c e0       	ldi	r24, 0x0C	; 12
    2592:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
	while(1) {
		if (phase == 1) {
    2596:	80 91 18 03 	lds	r24, 0x0318
    259a:	90 91 19 03 	lds	r25, 0x0319
    259e:	81 30       	cpi	r24, 0x01	; 1
    25a0:	91 05       	cpc	r25, r1
    25a2:	11 f4       	brne	.+4      	; 0x25a8 <main+0x32>
			locate();	
    25a4:	0e 94 40 11 	call	0x2280	; 0x2280 <locate>
		}
		sharp = ADC_Conversion(11);	//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
    25a8:	8b e0       	ldi	r24, 0x0B	; 11
    25aa:	0e 94 bf 0c 	call	0x197e	; 0x197e <ADC_Conversion>
    25ae:	8b 83       	std	Y+3, r24	; 0x03
		value = Sharp_GP2D12_estimation(sharp); //Stores Distance calsulated in a variable "value".
    25b0:	8b 81       	ldd	r24, Y+3	; 0x03
    25b2:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <Sharp_GP2D12_estimation>
    25b6:	9a 83       	std	Y+2, r25	; 0x02
    25b8:	89 83       	std	Y+1, r24	; 0x01
		lcd_print(2,1,value,3);
    25ba:	29 81       	ldd	r18, Y+1	; 0x01
    25bc:	3a 81       	ldd	r19, Y+2	; 0x02
    25be:	82 e0       	ldi	r24, 0x02	; 2
    25c0:	61 e0       	ldi	r22, 0x01	; 1
    25c2:	a9 01       	movw	r20, r18
    25c4:	23 e0       	ldi	r18, 0x03	; 3
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
    25cc:	e4 cf       	rjmp	.-56     	; 0x2596 <main+0x20>

000025ce <__fixunssfsi>:
    25ce:	ef 92       	push	r14
    25d0:	ff 92       	push	r15
    25d2:	0f 93       	push	r16
    25d4:	1f 93       	push	r17
    25d6:	7b 01       	movw	r14, r22
    25d8:	8c 01       	movw	r16, r24
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	40 e0       	ldi	r20, 0x00	; 0
    25e0:	5f e4       	ldi	r21, 0x4F	; 79
    25e2:	0e 94 93 16 	call	0x2d26	; 0x2d26 <__gesf2>
    25e6:	88 23       	and	r24, r24
    25e8:	8c f0       	brlt	.+34     	; 0x260c <__fixunssfsi+0x3e>
    25ea:	c8 01       	movw	r24, r16
    25ec:	b7 01       	movw	r22, r14
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	40 e0       	ldi	r20, 0x00	; 0
    25f4:	5f e4       	ldi	r21, 0x4F	; 79
    25f6:	0e 94 5f 14 	call	0x28be	; 0x28be <__subsf3>
    25fa:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__fixsfsi>
    25fe:	9b 01       	movw	r18, r22
    2600:	ac 01       	movw	r20, r24
    2602:	20 50       	subi	r18, 0x00	; 0
    2604:	30 40       	sbci	r19, 0x00	; 0
    2606:	40 40       	sbci	r20, 0x00	; 0
    2608:	50 48       	sbci	r21, 0x80	; 128
    260a:	06 c0       	rjmp	.+12     	; 0x2618 <__fixunssfsi+0x4a>
    260c:	c8 01       	movw	r24, r16
    260e:	b7 01       	movw	r22, r14
    2610:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__fixsfsi>
    2614:	9b 01       	movw	r18, r22
    2616:	ac 01       	movw	r20, r24
    2618:	b9 01       	movw	r22, r18
    261a:	ca 01       	movw	r24, r20
    261c:	1f 91       	pop	r17
    261e:	0f 91       	pop	r16
    2620:	ff 90       	pop	r15
    2622:	ef 90       	pop	r14
    2624:	08 95       	ret

00002626 <_fpadd_parts>:
    2626:	a0 e0       	ldi	r26, 0x00	; 0
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	e9 e1       	ldi	r30, 0x19	; 25
    262c:	f3 e1       	ldi	r31, 0x13	; 19
    262e:	0c 94 3a 1a 	jmp	0x3474	; 0x3474 <__prologue_saves__>
    2632:	dc 01       	movw	r26, r24
    2634:	2b 01       	movw	r4, r22
    2636:	fa 01       	movw	r30, r20
    2638:	9c 91       	ld	r25, X
    263a:	92 30       	cpi	r25, 0x02	; 2
    263c:	08 f4       	brcc	.+2      	; 0x2640 <_fpadd_parts+0x1a>
    263e:	39 c1       	rjmp	.+626    	; 0x28b2 <_fpadd_parts+0x28c>
    2640:	eb 01       	movw	r28, r22
    2642:	88 81       	ld	r24, Y
    2644:	82 30       	cpi	r24, 0x02	; 2
    2646:	08 f4       	brcc	.+2      	; 0x264a <_fpadd_parts+0x24>
    2648:	33 c1       	rjmp	.+614    	; 0x28b0 <_fpadd_parts+0x28a>
    264a:	94 30       	cpi	r25, 0x04	; 4
    264c:	69 f4       	brne	.+26     	; 0x2668 <_fpadd_parts+0x42>
    264e:	84 30       	cpi	r24, 0x04	; 4
    2650:	09 f0       	breq	.+2      	; 0x2654 <_fpadd_parts+0x2e>
    2652:	2f c1       	rjmp	.+606    	; 0x28b2 <_fpadd_parts+0x28c>
    2654:	11 96       	adiw	r26, 0x01	; 1
    2656:	9c 91       	ld	r25, X
    2658:	11 97       	sbiw	r26, 0x01	; 1
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	98 17       	cp	r25, r24
    265e:	09 f4       	brne	.+2      	; 0x2662 <_fpadd_parts+0x3c>
    2660:	28 c1       	rjmp	.+592    	; 0x28b2 <_fpadd_parts+0x28c>
    2662:	a3 e0       	ldi	r26, 0x03	; 3
    2664:	b2 e0       	ldi	r27, 0x02	; 2
    2666:	25 c1       	rjmp	.+586    	; 0x28b2 <_fpadd_parts+0x28c>
    2668:	84 30       	cpi	r24, 0x04	; 4
    266a:	09 f4       	brne	.+2      	; 0x266e <_fpadd_parts+0x48>
    266c:	21 c1       	rjmp	.+578    	; 0x28b0 <_fpadd_parts+0x28a>
    266e:	82 30       	cpi	r24, 0x02	; 2
    2670:	a9 f4       	brne	.+42     	; 0x269c <_fpadd_parts+0x76>
    2672:	92 30       	cpi	r25, 0x02	; 2
    2674:	09 f0       	breq	.+2      	; 0x2678 <_fpadd_parts+0x52>
    2676:	1d c1       	rjmp	.+570    	; 0x28b2 <_fpadd_parts+0x28c>
    2678:	9a 01       	movw	r18, r20
    267a:	ad 01       	movw	r20, r26
    267c:	88 e0       	ldi	r24, 0x08	; 8
    267e:	ea 01       	movw	r28, r20
    2680:	09 90       	ld	r0, Y+
    2682:	ae 01       	movw	r20, r28
    2684:	e9 01       	movw	r28, r18
    2686:	09 92       	st	Y+, r0
    2688:	9e 01       	movw	r18, r28
    268a:	81 50       	subi	r24, 0x01	; 1
    268c:	c1 f7       	brne	.-16     	; 0x267e <_fpadd_parts+0x58>
    268e:	e2 01       	movw	r28, r4
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	11 96       	adiw	r26, 0x01	; 1
    2694:	9c 91       	ld	r25, X
    2696:	89 23       	and	r24, r25
    2698:	81 83       	std	Z+1, r24	; 0x01
    269a:	08 c1       	rjmp	.+528    	; 0x28ac <_fpadd_parts+0x286>
    269c:	92 30       	cpi	r25, 0x02	; 2
    269e:	09 f4       	brne	.+2      	; 0x26a2 <_fpadd_parts+0x7c>
    26a0:	07 c1       	rjmp	.+526    	; 0x28b0 <_fpadd_parts+0x28a>
    26a2:	12 96       	adiw	r26, 0x02	; 2
    26a4:	2d 90       	ld	r2, X+
    26a6:	3c 90       	ld	r3, X
    26a8:	13 97       	sbiw	r26, 0x03	; 3
    26aa:	eb 01       	movw	r28, r22
    26ac:	8a 81       	ldd	r24, Y+2	; 0x02
    26ae:	9b 81       	ldd	r25, Y+3	; 0x03
    26b0:	14 96       	adiw	r26, 0x04	; 4
    26b2:	ad 90       	ld	r10, X+
    26b4:	bd 90       	ld	r11, X+
    26b6:	cd 90       	ld	r12, X+
    26b8:	dc 90       	ld	r13, X
    26ba:	17 97       	sbiw	r26, 0x07	; 7
    26bc:	ec 80       	ldd	r14, Y+4	; 0x04
    26be:	fd 80       	ldd	r15, Y+5	; 0x05
    26c0:	0e 81       	ldd	r16, Y+6	; 0x06
    26c2:	1f 81       	ldd	r17, Y+7	; 0x07
    26c4:	91 01       	movw	r18, r2
    26c6:	28 1b       	sub	r18, r24
    26c8:	39 0b       	sbc	r19, r25
    26ca:	b9 01       	movw	r22, r18
    26cc:	37 ff       	sbrs	r19, 7
    26ce:	04 c0       	rjmp	.+8      	; 0x26d8 <_fpadd_parts+0xb2>
    26d0:	66 27       	eor	r22, r22
    26d2:	77 27       	eor	r23, r23
    26d4:	62 1b       	sub	r22, r18
    26d6:	73 0b       	sbc	r23, r19
    26d8:	60 32       	cpi	r22, 0x20	; 32
    26da:	71 05       	cpc	r23, r1
    26dc:	0c f0       	brlt	.+2      	; 0x26e0 <_fpadd_parts+0xba>
    26de:	61 c0       	rjmp	.+194    	; 0x27a2 <_fpadd_parts+0x17c>
    26e0:	12 16       	cp	r1, r18
    26e2:	13 06       	cpc	r1, r19
    26e4:	6c f5       	brge	.+90     	; 0x2740 <_fpadd_parts+0x11a>
    26e6:	37 01       	movw	r6, r14
    26e8:	48 01       	movw	r8, r16
    26ea:	06 2e       	mov	r0, r22
    26ec:	04 c0       	rjmp	.+8      	; 0x26f6 <_fpadd_parts+0xd0>
    26ee:	96 94       	lsr	r9
    26f0:	87 94       	ror	r8
    26f2:	77 94       	ror	r7
    26f4:	67 94       	ror	r6
    26f6:	0a 94       	dec	r0
    26f8:	d2 f7       	brpl	.-12     	; 0x26ee <_fpadd_parts+0xc8>
    26fa:	21 e0       	ldi	r18, 0x01	; 1
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	40 e0       	ldi	r20, 0x00	; 0
    2700:	50 e0       	ldi	r21, 0x00	; 0
    2702:	04 c0       	rjmp	.+8      	; 0x270c <_fpadd_parts+0xe6>
    2704:	22 0f       	add	r18, r18
    2706:	33 1f       	adc	r19, r19
    2708:	44 1f       	adc	r20, r20
    270a:	55 1f       	adc	r21, r21
    270c:	6a 95       	dec	r22
    270e:	d2 f7       	brpl	.-12     	; 0x2704 <_fpadd_parts+0xde>
    2710:	21 50       	subi	r18, 0x01	; 1
    2712:	30 40       	sbci	r19, 0x00	; 0
    2714:	40 40       	sbci	r20, 0x00	; 0
    2716:	50 40       	sbci	r21, 0x00	; 0
    2718:	2e 21       	and	r18, r14
    271a:	3f 21       	and	r19, r15
    271c:	40 23       	and	r20, r16
    271e:	51 23       	and	r21, r17
    2720:	21 15       	cp	r18, r1
    2722:	31 05       	cpc	r19, r1
    2724:	41 05       	cpc	r20, r1
    2726:	51 05       	cpc	r21, r1
    2728:	21 f0       	breq	.+8      	; 0x2732 <_fpadd_parts+0x10c>
    272a:	21 e0       	ldi	r18, 0x01	; 1
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	40 e0       	ldi	r20, 0x00	; 0
    2730:	50 e0       	ldi	r21, 0x00	; 0
    2732:	79 01       	movw	r14, r18
    2734:	8a 01       	movw	r16, r20
    2736:	e6 28       	or	r14, r6
    2738:	f7 28       	or	r15, r7
    273a:	08 29       	or	r16, r8
    273c:	19 29       	or	r17, r9
    273e:	3c c0       	rjmp	.+120    	; 0x27b8 <_fpadd_parts+0x192>
    2740:	23 2b       	or	r18, r19
    2742:	d1 f1       	breq	.+116    	; 0x27b8 <_fpadd_parts+0x192>
    2744:	26 0e       	add	r2, r22
    2746:	37 1e       	adc	r3, r23
    2748:	35 01       	movw	r6, r10
    274a:	46 01       	movw	r8, r12
    274c:	06 2e       	mov	r0, r22
    274e:	04 c0       	rjmp	.+8      	; 0x2758 <_fpadd_parts+0x132>
    2750:	96 94       	lsr	r9
    2752:	87 94       	ror	r8
    2754:	77 94       	ror	r7
    2756:	67 94       	ror	r6
    2758:	0a 94       	dec	r0
    275a:	d2 f7       	brpl	.-12     	; 0x2750 <_fpadd_parts+0x12a>
    275c:	21 e0       	ldi	r18, 0x01	; 1
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	40 e0       	ldi	r20, 0x00	; 0
    2762:	50 e0       	ldi	r21, 0x00	; 0
    2764:	04 c0       	rjmp	.+8      	; 0x276e <_fpadd_parts+0x148>
    2766:	22 0f       	add	r18, r18
    2768:	33 1f       	adc	r19, r19
    276a:	44 1f       	adc	r20, r20
    276c:	55 1f       	adc	r21, r21
    276e:	6a 95       	dec	r22
    2770:	d2 f7       	brpl	.-12     	; 0x2766 <_fpadd_parts+0x140>
    2772:	21 50       	subi	r18, 0x01	; 1
    2774:	30 40       	sbci	r19, 0x00	; 0
    2776:	40 40       	sbci	r20, 0x00	; 0
    2778:	50 40       	sbci	r21, 0x00	; 0
    277a:	2a 21       	and	r18, r10
    277c:	3b 21       	and	r19, r11
    277e:	4c 21       	and	r20, r12
    2780:	5d 21       	and	r21, r13
    2782:	21 15       	cp	r18, r1
    2784:	31 05       	cpc	r19, r1
    2786:	41 05       	cpc	r20, r1
    2788:	51 05       	cpc	r21, r1
    278a:	21 f0       	breq	.+8      	; 0x2794 <_fpadd_parts+0x16e>
    278c:	21 e0       	ldi	r18, 0x01	; 1
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	40 e0       	ldi	r20, 0x00	; 0
    2792:	50 e0       	ldi	r21, 0x00	; 0
    2794:	59 01       	movw	r10, r18
    2796:	6a 01       	movw	r12, r20
    2798:	a6 28       	or	r10, r6
    279a:	b7 28       	or	r11, r7
    279c:	c8 28       	or	r12, r8
    279e:	d9 28       	or	r13, r9
    27a0:	0b c0       	rjmp	.+22     	; 0x27b8 <_fpadd_parts+0x192>
    27a2:	82 15       	cp	r24, r2
    27a4:	93 05       	cpc	r25, r3
    27a6:	2c f0       	brlt	.+10     	; 0x27b2 <_fpadd_parts+0x18c>
    27a8:	1c 01       	movw	r2, r24
    27aa:	aa 24       	eor	r10, r10
    27ac:	bb 24       	eor	r11, r11
    27ae:	65 01       	movw	r12, r10
    27b0:	03 c0       	rjmp	.+6      	; 0x27b8 <_fpadd_parts+0x192>
    27b2:	ee 24       	eor	r14, r14
    27b4:	ff 24       	eor	r15, r15
    27b6:	87 01       	movw	r16, r14
    27b8:	11 96       	adiw	r26, 0x01	; 1
    27ba:	9c 91       	ld	r25, X
    27bc:	d2 01       	movw	r26, r4
    27be:	11 96       	adiw	r26, 0x01	; 1
    27c0:	8c 91       	ld	r24, X
    27c2:	98 17       	cp	r25, r24
    27c4:	09 f4       	brne	.+2      	; 0x27c8 <_fpadd_parts+0x1a2>
    27c6:	45 c0       	rjmp	.+138    	; 0x2852 <_fpadd_parts+0x22c>
    27c8:	99 23       	and	r25, r25
    27ca:	39 f0       	breq	.+14     	; 0x27da <_fpadd_parts+0x1b4>
    27cc:	a8 01       	movw	r20, r16
    27ce:	97 01       	movw	r18, r14
    27d0:	2a 19       	sub	r18, r10
    27d2:	3b 09       	sbc	r19, r11
    27d4:	4c 09       	sbc	r20, r12
    27d6:	5d 09       	sbc	r21, r13
    27d8:	06 c0       	rjmp	.+12     	; 0x27e6 <_fpadd_parts+0x1c0>
    27da:	a6 01       	movw	r20, r12
    27dc:	95 01       	movw	r18, r10
    27de:	2e 19       	sub	r18, r14
    27e0:	3f 09       	sbc	r19, r15
    27e2:	40 0b       	sbc	r20, r16
    27e4:	51 0b       	sbc	r21, r17
    27e6:	57 fd       	sbrc	r21, 7
    27e8:	08 c0       	rjmp	.+16     	; 0x27fa <_fpadd_parts+0x1d4>
    27ea:	11 82       	std	Z+1, r1	; 0x01
    27ec:	33 82       	std	Z+3, r3	; 0x03
    27ee:	22 82       	std	Z+2, r2	; 0x02
    27f0:	24 83       	std	Z+4, r18	; 0x04
    27f2:	35 83       	std	Z+5, r19	; 0x05
    27f4:	46 83       	std	Z+6, r20	; 0x06
    27f6:	57 83       	std	Z+7, r21	; 0x07
    27f8:	1d c0       	rjmp	.+58     	; 0x2834 <_fpadd_parts+0x20e>
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	81 83       	std	Z+1, r24	; 0x01
    27fe:	33 82       	std	Z+3, r3	; 0x03
    2800:	22 82       	std	Z+2, r2	; 0x02
    2802:	88 27       	eor	r24, r24
    2804:	99 27       	eor	r25, r25
    2806:	dc 01       	movw	r26, r24
    2808:	82 1b       	sub	r24, r18
    280a:	93 0b       	sbc	r25, r19
    280c:	a4 0b       	sbc	r26, r20
    280e:	b5 0b       	sbc	r27, r21
    2810:	84 83       	std	Z+4, r24	; 0x04
    2812:	95 83       	std	Z+5, r25	; 0x05
    2814:	a6 83       	std	Z+6, r26	; 0x06
    2816:	b7 83       	std	Z+7, r27	; 0x07
    2818:	0d c0       	rjmp	.+26     	; 0x2834 <_fpadd_parts+0x20e>
    281a:	22 0f       	add	r18, r18
    281c:	33 1f       	adc	r19, r19
    281e:	44 1f       	adc	r20, r20
    2820:	55 1f       	adc	r21, r21
    2822:	24 83       	std	Z+4, r18	; 0x04
    2824:	35 83       	std	Z+5, r19	; 0x05
    2826:	46 83       	std	Z+6, r20	; 0x06
    2828:	57 83       	std	Z+7, r21	; 0x07
    282a:	82 81       	ldd	r24, Z+2	; 0x02
    282c:	93 81       	ldd	r25, Z+3	; 0x03
    282e:	01 97       	sbiw	r24, 0x01	; 1
    2830:	93 83       	std	Z+3, r25	; 0x03
    2832:	82 83       	std	Z+2, r24	; 0x02
    2834:	24 81       	ldd	r18, Z+4	; 0x04
    2836:	35 81       	ldd	r19, Z+5	; 0x05
    2838:	46 81       	ldd	r20, Z+6	; 0x06
    283a:	57 81       	ldd	r21, Z+7	; 0x07
    283c:	da 01       	movw	r26, r20
    283e:	c9 01       	movw	r24, r18
    2840:	01 97       	sbiw	r24, 0x01	; 1
    2842:	a1 09       	sbc	r26, r1
    2844:	b1 09       	sbc	r27, r1
    2846:	8f 5f       	subi	r24, 0xFF	; 255
    2848:	9f 4f       	sbci	r25, 0xFF	; 255
    284a:	af 4f       	sbci	r26, 0xFF	; 255
    284c:	bf 43       	sbci	r27, 0x3F	; 63
    284e:	28 f3       	brcs	.-54     	; 0x281a <_fpadd_parts+0x1f4>
    2850:	0b c0       	rjmp	.+22     	; 0x2868 <_fpadd_parts+0x242>
    2852:	91 83       	std	Z+1, r25	; 0x01
    2854:	33 82       	std	Z+3, r3	; 0x03
    2856:	22 82       	std	Z+2, r2	; 0x02
    2858:	ea 0c       	add	r14, r10
    285a:	fb 1c       	adc	r15, r11
    285c:	0c 1d       	adc	r16, r12
    285e:	1d 1d       	adc	r17, r13
    2860:	e4 82       	std	Z+4, r14	; 0x04
    2862:	f5 82       	std	Z+5, r15	; 0x05
    2864:	06 83       	std	Z+6, r16	; 0x06
    2866:	17 83       	std	Z+7, r17	; 0x07
    2868:	83 e0       	ldi	r24, 0x03	; 3
    286a:	80 83       	st	Z, r24
    286c:	24 81       	ldd	r18, Z+4	; 0x04
    286e:	35 81       	ldd	r19, Z+5	; 0x05
    2870:	46 81       	ldd	r20, Z+6	; 0x06
    2872:	57 81       	ldd	r21, Z+7	; 0x07
    2874:	57 ff       	sbrs	r21, 7
    2876:	1a c0       	rjmp	.+52     	; 0x28ac <_fpadd_parts+0x286>
    2878:	c9 01       	movw	r24, r18
    287a:	aa 27       	eor	r26, r26
    287c:	97 fd       	sbrc	r25, 7
    287e:	a0 95       	com	r26
    2880:	ba 2f       	mov	r27, r26
    2882:	81 70       	andi	r24, 0x01	; 1
    2884:	90 70       	andi	r25, 0x00	; 0
    2886:	a0 70       	andi	r26, 0x00	; 0
    2888:	b0 70       	andi	r27, 0x00	; 0
    288a:	56 95       	lsr	r21
    288c:	47 95       	ror	r20
    288e:	37 95       	ror	r19
    2890:	27 95       	ror	r18
    2892:	82 2b       	or	r24, r18
    2894:	93 2b       	or	r25, r19
    2896:	a4 2b       	or	r26, r20
    2898:	b5 2b       	or	r27, r21
    289a:	84 83       	std	Z+4, r24	; 0x04
    289c:	95 83       	std	Z+5, r25	; 0x05
    289e:	a6 83       	std	Z+6, r26	; 0x06
    28a0:	b7 83       	std	Z+7, r27	; 0x07
    28a2:	82 81       	ldd	r24, Z+2	; 0x02
    28a4:	93 81       	ldd	r25, Z+3	; 0x03
    28a6:	01 96       	adiw	r24, 0x01	; 1
    28a8:	93 83       	std	Z+3, r25	; 0x03
    28aa:	82 83       	std	Z+2, r24	; 0x02
    28ac:	df 01       	movw	r26, r30
    28ae:	01 c0       	rjmp	.+2      	; 0x28b2 <_fpadd_parts+0x28c>
    28b0:	d2 01       	movw	r26, r4
    28b2:	cd 01       	movw	r24, r26
    28b4:	cd b7       	in	r28, 0x3d	; 61
    28b6:	de b7       	in	r29, 0x3e	; 62
    28b8:	e2 e1       	ldi	r30, 0x12	; 18
    28ba:	0c 94 56 1a 	jmp	0x34ac	; 0x34ac <__epilogue_restores__>

000028be <__subsf3>:
    28be:	a0 e2       	ldi	r26, 0x20	; 32
    28c0:	b0 e0       	ldi	r27, 0x00	; 0
    28c2:	e5 e6       	ldi	r30, 0x65	; 101
    28c4:	f4 e1       	ldi	r31, 0x14	; 20
    28c6:	0c 94 46 1a 	jmp	0x348c	; 0x348c <__prologue_saves__+0x18>
    28ca:	69 83       	std	Y+1, r22	; 0x01
    28cc:	7a 83       	std	Y+2, r23	; 0x02
    28ce:	8b 83       	std	Y+3, r24	; 0x03
    28d0:	9c 83       	std	Y+4, r25	; 0x04
    28d2:	2d 83       	std	Y+5, r18	; 0x05
    28d4:	3e 83       	std	Y+6, r19	; 0x06
    28d6:	4f 83       	std	Y+7, r20	; 0x07
    28d8:	58 87       	std	Y+8, r21	; 0x08
    28da:	e9 e0       	ldi	r30, 0x09	; 9
    28dc:	ee 2e       	mov	r14, r30
    28de:	f1 2c       	mov	r15, r1
    28e0:	ec 0e       	add	r14, r28
    28e2:	fd 1e       	adc	r15, r29
    28e4:	ce 01       	movw	r24, r28
    28e6:	01 96       	adiw	r24, 0x01	; 1
    28e8:	b7 01       	movw	r22, r14
    28ea:	0e 94 42 19 	call	0x3284	; 0x3284 <__unpack_f>
    28ee:	8e 01       	movw	r16, r28
    28f0:	0f 5e       	subi	r16, 0xEF	; 239
    28f2:	1f 4f       	sbci	r17, 0xFF	; 255
    28f4:	ce 01       	movw	r24, r28
    28f6:	05 96       	adiw	r24, 0x05	; 5
    28f8:	b8 01       	movw	r22, r16
    28fa:	0e 94 42 19 	call	0x3284	; 0x3284 <__unpack_f>
    28fe:	8a 89       	ldd	r24, Y+18	; 0x12
    2900:	91 e0       	ldi	r25, 0x01	; 1
    2902:	89 27       	eor	r24, r25
    2904:	8a 8b       	std	Y+18, r24	; 0x12
    2906:	c7 01       	movw	r24, r14
    2908:	b8 01       	movw	r22, r16
    290a:	ae 01       	movw	r20, r28
    290c:	47 5e       	subi	r20, 0xE7	; 231
    290e:	5f 4f       	sbci	r21, 0xFF	; 255
    2910:	0e 94 13 13 	call	0x2626	; 0x2626 <_fpadd_parts>
    2914:	0e 94 6d 18 	call	0x30da	; 0x30da <__pack_f>
    2918:	a0 96       	adiw	r28, 0x20	; 32
    291a:	e6 e0       	ldi	r30, 0x06	; 6
    291c:	0c 94 62 1a 	jmp	0x34c4	; 0x34c4 <__epilogue_restores__+0x18>

00002920 <__addsf3>:
    2920:	a0 e2       	ldi	r26, 0x20	; 32
    2922:	b0 e0       	ldi	r27, 0x00	; 0
    2924:	e6 e9       	ldi	r30, 0x96	; 150
    2926:	f4 e1       	ldi	r31, 0x14	; 20
    2928:	0c 94 46 1a 	jmp	0x348c	; 0x348c <__prologue_saves__+0x18>
    292c:	69 83       	std	Y+1, r22	; 0x01
    292e:	7a 83       	std	Y+2, r23	; 0x02
    2930:	8b 83       	std	Y+3, r24	; 0x03
    2932:	9c 83       	std	Y+4, r25	; 0x04
    2934:	2d 83       	std	Y+5, r18	; 0x05
    2936:	3e 83       	std	Y+6, r19	; 0x06
    2938:	4f 83       	std	Y+7, r20	; 0x07
    293a:	58 87       	std	Y+8, r21	; 0x08
    293c:	f9 e0       	ldi	r31, 0x09	; 9
    293e:	ef 2e       	mov	r14, r31
    2940:	f1 2c       	mov	r15, r1
    2942:	ec 0e       	add	r14, r28
    2944:	fd 1e       	adc	r15, r29
    2946:	ce 01       	movw	r24, r28
    2948:	01 96       	adiw	r24, 0x01	; 1
    294a:	b7 01       	movw	r22, r14
    294c:	0e 94 42 19 	call	0x3284	; 0x3284 <__unpack_f>
    2950:	8e 01       	movw	r16, r28
    2952:	0f 5e       	subi	r16, 0xEF	; 239
    2954:	1f 4f       	sbci	r17, 0xFF	; 255
    2956:	ce 01       	movw	r24, r28
    2958:	05 96       	adiw	r24, 0x05	; 5
    295a:	b8 01       	movw	r22, r16
    295c:	0e 94 42 19 	call	0x3284	; 0x3284 <__unpack_f>
    2960:	c7 01       	movw	r24, r14
    2962:	b8 01       	movw	r22, r16
    2964:	ae 01       	movw	r20, r28
    2966:	47 5e       	subi	r20, 0xE7	; 231
    2968:	5f 4f       	sbci	r21, 0xFF	; 255
    296a:	0e 94 13 13 	call	0x2626	; 0x2626 <_fpadd_parts>
    296e:	0e 94 6d 18 	call	0x30da	; 0x30da <__pack_f>
    2972:	a0 96       	adiw	r28, 0x20	; 32
    2974:	e6 e0       	ldi	r30, 0x06	; 6
    2976:	0c 94 62 1a 	jmp	0x34c4	; 0x34c4 <__epilogue_restores__+0x18>

0000297a <__mulsf3>:
    297a:	a0 e2       	ldi	r26, 0x20	; 32
    297c:	b0 e0       	ldi	r27, 0x00	; 0
    297e:	e3 ec       	ldi	r30, 0xC3	; 195
    2980:	f4 e1       	ldi	r31, 0x14	; 20
    2982:	0c 94 3a 1a 	jmp	0x3474	; 0x3474 <__prologue_saves__>
    2986:	69 83       	std	Y+1, r22	; 0x01
    2988:	7a 83       	std	Y+2, r23	; 0x02
    298a:	8b 83       	std	Y+3, r24	; 0x03
    298c:	9c 83       	std	Y+4, r25	; 0x04
    298e:	2d 83       	std	Y+5, r18	; 0x05
    2990:	3e 83       	std	Y+6, r19	; 0x06
    2992:	4f 83       	std	Y+7, r20	; 0x07
    2994:	58 87       	std	Y+8, r21	; 0x08
    2996:	ce 01       	movw	r24, r28
    2998:	01 96       	adiw	r24, 0x01	; 1
    299a:	be 01       	movw	r22, r28
    299c:	67 5f       	subi	r22, 0xF7	; 247
    299e:	7f 4f       	sbci	r23, 0xFF	; 255
    29a0:	0e 94 42 19 	call	0x3284	; 0x3284 <__unpack_f>
    29a4:	ce 01       	movw	r24, r28
    29a6:	05 96       	adiw	r24, 0x05	; 5
    29a8:	be 01       	movw	r22, r28
    29aa:	6f 5e       	subi	r22, 0xEF	; 239
    29ac:	7f 4f       	sbci	r23, 0xFF	; 255
    29ae:	0e 94 42 19 	call	0x3284	; 0x3284 <__unpack_f>
    29b2:	99 85       	ldd	r25, Y+9	; 0x09
    29b4:	92 30       	cpi	r25, 0x02	; 2
    29b6:	88 f0       	brcs	.+34     	; 0x29da <__mulsf3+0x60>
    29b8:	89 89       	ldd	r24, Y+17	; 0x11
    29ba:	82 30       	cpi	r24, 0x02	; 2
    29bc:	c8 f0       	brcs	.+50     	; 0x29f0 <__mulsf3+0x76>
    29be:	94 30       	cpi	r25, 0x04	; 4
    29c0:	19 f4       	brne	.+6      	; 0x29c8 <__mulsf3+0x4e>
    29c2:	82 30       	cpi	r24, 0x02	; 2
    29c4:	51 f4       	brne	.+20     	; 0x29da <__mulsf3+0x60>
    29c6:	04 c0       	rjmp	.+8      	; 0x29d0 <__mulsf3+0x56>
    29c8:	84 30       	cpi	r24, 0x04	; 4
    29ca:	29 f4       	brne	.+10     	; 0x29d6 <__mulsf3+0x5c>
    29cc:	92 30       	cpi	r25, 0x02	; 2
    29ce:	81 f4       	brne	.+32     	; 0x29f0 <__mulsf3+0x76>
    29d0:	83 e0       	ldi	r24, 0x03	; 3
    29d2:	92 e0       	ldi	r25, 0x02	; 2
    29d4:	c6 c0       	rjmp	.+396    	; 0x2b62 <__mulsf3+0x1e8>
    29d6:	92 30       	cpi	r25, 0x02	; 2
    29d8:	49 f4       	brne	.+18     	; 0x29ec <__mulsf3+0x72>
    29da:	20 e0       	ldi	r18, 0x00	; 0
    29dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29de:	8a 89       	ldd	r24, Y+18	; 0x12
    29e0:	98 13       	cpse	r25, r24
    29e2:	21 e0       	ldi	r18, 0x01	; 1
    29e4:	2a 87       	std	Y+10, r18	; 0x0a
    29e6:	ce 01       	movw	r24, r28
    29e8:	09 96       	adiw	r24, 0x09	; 9
    29ea:	bb c0       	rjmp	.+374    	; 0x2b62 <__mulsf3+0x1e8>
    29ec:	82 30       	cpi	r24, 0x02	; 2
    29ee:	49 f4       	brne	.+18     	; 0x2a02 <__mulsf3+0x88>
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f4:	8a 89       	ldd	r24, Y+18	; 0x12
    29f6:	98 13       	cpse	r25, r24
    29f8:	21 e0       	ldi	r18, 0x01	; 1
    29fa:	2a 8b       	std	Y+18, r18	; 0x12
    29fc:	ce 01       	movw	r24, r28
    29fe:	41 96       	adiw	r24, 0x11	; 17
    2a00:	b0 c0       	rjmp	.+352    	; 0x2b62 <__mulsf3+0x1e8>
    2a02:	2d 84       	ldd	r2, Y+13	; 0x0d
    2a04:	3e 84       	ldd	r3, Y+14	; 0x0e
    2a06:	4f 84       	ldd	r4, Y+15	; 0x0f
    2a08:	58 88       	ldd	r5, Y+16	; 0x10
    2a0a:	6d 88       	ldd	r6, Y+21	; 0x15
    2a0c:	7e 88       	ldd	r7, Y+22	; 0x16
    2a0e:	8f 88       	ldd	r8, Y+23	; 0x17
    2a10:	98 8c       	ldd	r9, Y+24	; 0x18
    2a12:	ee 24       	eor	r14, r14
    2a14:	ff 24       	eor	r15, r15
    2a16:	87 01       	movw	r16, r14
    2a18:	aa 24       	eor	r10, r10
    2a1a:	bb 24       	eor	r11, r11
    2a1c:	65 01       	movw	r12, r10
    2a1e:	40 e0       	ldi	r20, 0x00	; 0
    2a20:	50 e0       	ldi	r21, 0x00	; 0
    2a22:	60 e0       	ldi	r22, 0x00	; 0
    2a24:	70 e0       	ldi	r23, 0x00	; 0
    2a26:	e0 e0       	ldi	r30, 0x00	; 0
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	c1 01       	movw	r24, r2
    2a2c:	81 70       	andi	r24, 0x01	; 1
    2a2e:	90 70       	andi	r25, 0x00	; 0
    2a30:	89 2b       	or	r24, r25
    2a32:	e9 f0       	breq	.+58     	; 0x2a6e <__mulsf3+0xf4>
    2a34:	e6 0c       	add	r14, r6
    2a36:	f7 1c       	adc	r15, r7
    2a38:	08 1d       	adc	r16, r8
    2a3a:	19 1d       	adc	r17, r9
    2a3c:	9a 01       	movw	r18, r20
    2a3e:	ab 01       	movw	r20, r22
    2a40:	2a 0d       	add	r18, r10
    2a42:	3b 1d       	adc	r19, r11
    2a44:	4c 1d       	adc	r20, r12
    2a46:	5d 1d       	adc	r21, r13
    2a48:	80 e0       	ldi	r24, 0x00	; 0
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	a0 e0       	ldi	r26, 0x00	; 0
    2a4e:	b0 e0       	ldi	r27, 0x00	; 0
    2a50:	e6 14       	cp	r14, r6
    2a52:	f7 04       	cpc	r15, r7
    2a54:	08 05       	cpc	r16, r8
    2a56:	19 05       	cpc	r17, r9
    2a58:	20 f4       	brcc	.+8      	; 0x2a62 <__mulsf3+0xe8>
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	a0 e0       	ldi	r26, 0x00	; 0
    2a60:	b0 e0       	ldi	r27, 0x00	; 0
    2a62:	ba 01       	movw	r22, r20
    2a64:	a9 01       	movw	r20, r18
    2a66:	48 0f       	add	r20, r24
    2a68:	59 1f       	adc	r21, r25
    2a6a:	6a 1f       	adc	r22, r26
    2a6c:	7b 1f       	adc	r23, r27
    2a6e:	aa 0c       	add	r10, r10
    2a70:	bb 1c       	adc	r11, r11
    2a72:	cc 1c       	adc	r12, r12
    2a74:	dd 1c       	adc	r13, r13
    2a76:	97 fe       	sbrs	r9, 7
    2a78:	08 c0       	rjmp	.+16     	; 0x2a8a <__mulsf3+0x110>
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	a0 e0       	ldi	r26, 0x00	; 0
    2a80:	b0 e0       	ldi	r27, 0x00	; 0
    2a82:	a8 2a       	or	r10, r24
    2a84:	b9 2a       	or	r11, r25
    2a86:	ca 2a       	or	r12, r26
    2a88:	db 2a       	or	r13, r27
    2a8a:	31 96       	adiw	r30, 0x01	; 1
    2a8c:	e0 32       	cpi	r30, 0x20	; 32
    2a8e:	f1 05       	cpc	r31, r1
    2a90:	49 f0       	breq	.+18     	; 0x2aa4 <__mulsf3+0x12a>
    2a92:	66 0c       	add	r6, r6
    2a94:	77 1c       	adc	r7, r7
    2a96:	88 1c       	adc	r8, r8
    2a98:	99 1c       	adc	r9, r9
    2a9a:	56 94       	lsr	r5
    2a9c:	47 94       	ror	r4
    2a9e:	37 94       	ror	r3
    2aa0:	27 94       	ror	r2
    2aa2:	c3 cf       	rjmp	.-122    	; 0x2a2a <__mulsf3+0xb0>
    2aa4:	fa 85       	ldd	r31, Y+10	; 0x0a
    2aa6:	ea 89       	ldd	r30, Y+18	; 0x12
    2aa8:	2b 89       	ldd	r18, Y+19	; 0x13
    2aaa:	3c 89       	ldd	r19, Y+20	; 0x14
    2aac:	8b 85       	ldd	r24, Y+11	; 0x0b
    2aae:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ab0:	28 0f       	add	r18, r24
    2ab2:	39 1f       	adc	r19, r25
    2ab4:	2e 5f       	subi	r18, 0xFE	; 254
    2ab6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ab8:	17 c0       	rjmp	.+46     	; 0x2ae8 <__mulsf3+0x16e>
    2aba:	ca 01       	movw	r24, r20
    2abc:	81 70       	andi	r24, 0x01	; 1
    2abe:	90 70       	andi	r25, 0x00	; 0
    2ac0:	89 2b       	or	r24, r25
    2ac2:	61 f0       	breq	.+24     	; 0x2adc <__mulsf3+0x162>
    2ac4:	16 95       	lsr	r17
    2ac6:	07 95       	ror	r16
    2ac8:	f7 94       	ror	r15
    2aca:	e7 94       	ror	r14
    2acc:	80 e0       	ldi	r24, 0x00	; 0
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	a0 e0       	ldi	r26, 0x00	; 0
    2ad2:	b0 e8       	ldi	r27, 0x80	; 128
    2ad4:	e8 2a       	or	r14, r24
    2ad6:	f9 2a       	or	r15, r25
    2ad8:	0a 2b       	or	r16, r26
    2ada:	1b 2b       	or	r17, r27
    2adc:	76 95       	lsr	r23
    2ade:	67 95       	ror	r22
    2ae0:	57 95       	ror	r21
    2ae2:	47 95       	ror	r20
    2ae4:	2f 5f       	subi	r18, 0xFF	; 255
    2ae6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ae8:	77 fd       	sbrc	r23, 7
    2aea:	e7 cf       	rjmp	.-50     	; 0x2aba <__mulsf3+0x140>
    2aec:	0c c0       	rjmp	.+24     	; 0x2b06 <__mulsf3+0x18c>
    2aee:	44 0f       	add	r20, r20
    2af0:	55 1f       	adc	r21, r21
    2af2:	66 1f       	adc	r22, r22
    2af4:	77 1f       	adc	r23, r23
    2af6:	17 fd       	sbrc	r17, 7
    2af8:	41 60       	ori	r20, 0x01	; 1
    2afa:	ee 0c       	add	r14, r14
    2afc:	ff 1c       	adc	r15, r15
    2afe:	00 1f       	adc	r16, r16
    2b00:	11 1f       	adc	r17, r17
    2b02:	21 50       	subi	r18, 0x01	; 1
    2b04:	30 40       	sbci	r19, 0x00	; 0
    2b06:	40 30       	cpi	r20, 0x00	; 0
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	59 07       	cpc	r21, r25
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	69 07       	cpc	r22, r25
    2b10:	90 e4       	ldi	r25, 0x40	; 64
    2b12:	79 07       	cpc	r23, r25
    2b14:	60 f3       	brcs	.-40     	; 0x2aee <__mulsf3+0x174>
    2b16:	2b 8f       	std	Y+27, r18	; 0x1b
    2b18:	3c 8f       	std	Y+28, r19	; 0x1c
    2b1a:	db 01       	movw	r26, r22
    2b1c:	ca 01       	movw	r24, r20
    2b1e:	8f 77       	andi	r24, 0x7F	; 127
    2b20:	90 70       	andi	r25, 0x00	; 0
    2b22:	a0 70       	andi	r26, 0x00	; 0
    2b24:	b0 70       	andi	r27, 0x00	; 0
    2b26:	80 34       	cpi	r24, 0x40	; 64
    2b28:	91 05       	cpc	r25, r1
    2b2a:	a1 05       	cpc	r26, r1
    2b2c:	b1 05       	cpc	r27, r1
    2b2e:	61 f4       	brne	.+24     	; 0x2b48 <__mulsf3+0x1ce>
    2b30:	47 fd       	sbrc	r20, 7
    2b32:	0a c0       	rjmp	.+20     	; 0x2b48 <__mulsf3+0x1ce>
    2b34:	e1 14       	cp	r14, r1
    2b36:	f1 04       	cpc	r15, r1
    2b38:	01 05       	cpc	r16, r1
    2b3a:	11 05       	cpc	r17, r1
    2b3c:	29 f0       	breq	.+10     	; 0x2b48 <__mulsf3+0x1ce>
    2b3e:	40 5c       	subi	r20, 0xC0	; 192
    2b40:	5f 4f       	sbci	r21, 0xFF	; 255
    2b42:	6f 4f       	sbci	r22, 0xFF	; 255
    2b44:	7f 4f       	sbci	r23, 0xFF	; 255
    2b46:	40 78       	andi	r20, 0x80	; 128
    2b48:	1a 8e       	std	Y+26, r1	; 0x1a
    2b4a:	fe 17       	cp	r31, r30
    2b4c:	11 f0       	breq	.+4      	; 0x2b52 <__mulsf3+0x1d8>
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	8a 8f       	std	Y+26, r24	; 0x1a
    2b52:	4d 8f       	std	Y+29, r20	; 0x1d
    2b54:	5e 8f       	std	Y+30, r21	; 0x1e
    2b56:	6f 8f       	std	Y+31, r22	; 0x1f
    2b58:	78 a3       	std	Y+32, r23	; 0x20
    2b5a:	83 e0       	ldi	r24, 0x03	; 3
    2b5c:	89 8f       	std	Y+25, r24	; 0x19
    2b5e:	ce 01       	movw	r24, r28
    2b60:	49 96       	adiw	r24, 0x19	; 25
    2b62:	0e 94 6d 18 	call	0x30da	; 0x30da <__pack_f>
    2b66:	a0 96       	adiw	r28, 0x20	; 32
    2b68:	e2 e1       	ldi	r30, 0x12	; 18
    2b6a:	0c 94 56 1a 	jmp	0x34ac	; 0x34ac <__epilogue_restores__>

00002b6e <__divsf3>:
    2b6e:	a8 e1       	ldi	r26, 0x18	; 24
    2b70:	b0 e0       	ldi	r27, 0x00	; 0
    2b72:	ed eb       	ldi	r30, 0xBD	; 189
    2b74:	f5 e1       	ldi	r31, 0x15	; 21
    2b76:	0c 94 42 1a 	jmp	0x3484	; 0x3484 <__prologue_saves__+0x10>
    2b7a:	69 83       	std	Y+1, r22	; 0x01
    2b7c:	7a 83       	std	Y+2, r23	; 0x02
    2b7e:	8b 83       	std	Y+3, r24	; 0x03
    2b80:	9c 83       	std	Y+4, r25	; 0x04
    2b82:	2d 83       	std	Y+5, r18	; 0x05
    2b84:	3e 83       	std	Y+6, r19	; 0x06
    2b86:	4f 83       	std	Y+7, r20	; 0x07
    2b88:	58 87       	std	Y+8, r21	; 0x08
    2b8a:	b9 e0       	ldi	r27, 0x09	; 9
    2b8c:	eb 2e       	mov	r14, r27
    2b8e:	f1 2c       	mov	r15, r1
    2b90:	ec 0e       	add	r14, r28
    2b92:	fd 1e       	adc	r15, r29
    2b94:	ce 01       	movw	r24, r28
    2b96:	01 96       	adiw	r24, 0x01	; 1
    2b98:	b7 01       	movw	r22, r14
    2b9a:	0e 94 42 19 	call	0x3284	; 0x3284 <__unpack_f>
    2b9e:	8e 01       	movw	r16, r28
    2ba0:	0f 5e       	subi	r16, 0xEF	; 239
    2ba2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba4:	ce 01       	movw	r24, r28
    2ba6:	05 96       	adiw	r24, 0x05	; 5
    2ba8:	b8 01       	movw	r22, r16
    2baa:	0e 94 42 19 	call	0x3284	; 0x3284 <__unpack_f>
    2bae:	29 85       	ldd	r18, Y+9	; 0x09
    2bb0:	22 30       	cpi	r18, 0x02	; 2
    2bb2:	08 f4       	brcc	.+2      	; 0x2bb6 <__divsf3+0x48>
    2bb4:	7e c0       	rjmp	.+252    	; 0x2cb2 <__divsf3+0x144>
    2bb6:	39 89       	ldd	r19, Y+17	; 0x11
    2bb8:	32 30       	cpi	r19, 0x02	; 2
    2bba:	10 f4       	brcc	.+4      	; 0x2bc0 <__divsf3+0x52>
    2bbc:	b8 01       	movw	r22, r16
    2bbe:	7c c0       	rjmp	.+248    	; 0x2cb8 <__divsf3+0x14a>
    2bc0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bc2:	9a 89       	ldd	r25, Y+18	; 0x12
    2bc4:	89 27       	eor	r24, r25
    2bc6:	8a 87       	std	Y+10, r24	; 0x0a
    2bc8:	24 30       	cpi	r18, 0x04	; 4
    2bca:	11 f0       	breq	.+4      	; 0x2bd0 <__divsf3+0x62>
    2bcc:	22 30       	cpi	r18, 0x02	; 2
    2bce:	31 f4       	brne	.+12     	; 0x2bdc <__divsf3+0x6e>
    2bd0:	23 17       	cp	r18, r19
    2bd2:	09 f0       	breq	.+2      	; 0x2bd6 <__divsf3+0x68>
    2bd4:	6e c0       	rjmp	.+220    	; 0x2cb2 <__divsf3+0x144>
    2bd6:	63 e0       	ldi	r22, 0x03	; 3
    2bd8:	72 e0       	ldi	r23, 0x02	; 2
    2bda:	6e c0       	rjmp	.+220    	; 0x2cb8 <__divsf3+0x14a>
    2bdc:	34 30       	cpi	r19, 0x04	; 4
    2bde:	39 f4       	brne	.+14     	; 0x2bee <__divsf3+0x80>
    2be0:	1d 86       	std	Y+13, r1	; 0x0d
    2be2:	1e 86       	std	Y+14, r1	; 0x0e
    2be4:	1f 86       	std	Y+15, r1	; 0x0f
    2be6:	18 8a       	std	Y+16, r1	; 0x10
    2be8:	1c 86       	std	Y+12, r1	; 0x0c
    2bea:	1b 86       	std	Y+11, r1	; 0x0b
    2bec:	04 c0       	rjmp	.+8      	; 0x2bf6 <__divsf3+0x88>
    2bee:	32 30       	cpi	r19, 0x02	; 2
    2bf0:	21 f4       	brne	.+8      	; 0x2bfa <__divsf3+0x8c>
    2bf2:	84 e0       	ldi	r24, 0x04	; 4
    2bf4:	89 87       	std	Y+9, r24	; 0x09
    2bf6:	b7 01       	movw	r22, r14
    2bf8:	5f c0       	rjmp	.+190    	; 0x2cb8 <__divsf3+0x14a>
    2bfa:	2b 85       	ldd	r18, Y+11	; 0x0b
    2bfc:	3c 85       	ldd	r19, Y+12	; 0x0c
    2bfe:	8b 89       	ldd	r24, Y+19	; 0x13
    2c00:	9c 89       	ldd	r25, Y+20	; 0x14
    2c02:	28 1b       	sub	r18, r24
    2c04:	39 0b       	sbc	r19, r25
    2c06:	3c 87       	std	Y+12, r19	; 0x0c
    2c08:	2b 87       	std	Y+11, r18	; 0x0b
    2c0a:	ed 84       	ldd	r14, Y+13	; 0x0d
    2c0c:	fe 84       	ldd	r15, Y+14	; 0x0e
    2c0e:	0f 85       	ldd	r16, Y+15	; 0x0f
    2c10:	18 89       	ldd	r17, Y+16	; 0x10
    2c12:	ad 88       	ldd	r10, Y+21	; 0x15
    2c14:	be 88       	ldd	r11, Y+22	; 0x16
    2c16:	cf 88       	ldd	r12, Y+23	; 0x17
    2c18:	d8 8c       	ldd	r13, Y+24	; 0x18
    2c1a:	ea 14       	cp	r14, r10
    2c1c:	fb 04       	cpc	r15, r11
    2c1e:	0c 05       	cpc	r16, r12
    2c20:	1d 05       	cpc	r17, r13
    2c22:	40 f4       	brcc	.+16     	; 0x2c34 <__divsf3+0xc6>
    2c24:	ee 0c       	add	r14, r14
    2c26:	ff 1c       	adc	r15, r15
    2c28:	00 1f       	adc	r16, r16
    2c2a:	11 1f       	adc	r17, r17
    2c2c:	21 50       	subi	r18, 0x01	; 1
    2c2e:	30 40       	sbci	r19, 0x00	; 0
    2c30:	3c 87       	std	Y+12, r19	; 0x0c
    2c32:	2b 87       	std	Y+11, r18	; 0x0b
    2c34:	20 e0       	ldi	r18, 0x00	; 0
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	40 e0       	ldi	r20, 0x00	; 0
    2c3a:	50 e0       	ldi	r21, 0x00	; 0
    2c3c:	80 e0       	ldi	r24, 0x00	; 0
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	a0 e0       	ldi	r26, 0x00	; 0
    2c42:	b0 e4       	ldi	r27, 0x40	; 64
    2c44:	60 e0       	ldi	r22, 0x00	; 0
    2c46:	70 e0       	ldi	r23, 0x00	; 0
    2c48:	ea 14       	cp	r14, r10
    2c4a:	fb 04       	cpc	r15, r11
    2c4c:	0c 05       	cpc	r16, r12
    2c4e:	1d 05       	cpc	r17, r13
    2c50:	40 f0       	brcs	.+16     	; 0x2c62 <__divsf3+0xf4>
    2c52:	28 2b       	or	r18, r24
    2c54:	39 2b       	or	r19, r25
    2c56:	4a 2b       	or	r20, r26
    2c58:	5b 2b       	or	r21, r27
    2c5a:	ea 18       	sub	r14, r10
    2c5c:	fb 08       	sbc	r15, r11
    2c5e:	0c 09       	sbc	r16, r12
    2c60:	1d 09       	sbc	r17, r13
    2c62:	b6 95       	lsr	r27
    2c64:	a7 95       	ror	r26
    2c66:	97 95       	ror	r25
    2c68:	87 95       	ror	r24
    2c6a:	ee 0c       	add	r14, r14
    2c6c:	ff 1c       	adc	r15, r15
    2c6e:	00 1f       	adc	r16, r16
    2c70:	11 1f       	adc	r17, r17
    2c72:	6f 5f       	subi	r22, 0xFF	; 255
    2c74:	7f 4f       	sbci	r23, 0xFF	; 255
    2c76:	6f 31       	cpi	r22, 0x1F	; 31
    2c78:	71 05       	cpc	r23, r1
    2c7a:	31 f7       	brne	.-52     	; 0x2c48 <__divsf3+0xda>
    2c7c:	da 01       	movw	r26, r20
    2c7e:	c9 01       	movw	r24, r18
    2c80:	8f 77       	andi	r24, 0x7F	; 127
    2c82:	90 70       	andi	r25, 0x00	; 0
    2c84:	a0 70       	andi	r26, 0x00	; 0
    2c86:	b0 70       	andi	r27, 0x00	; 0
    2c88:	80 34       	cpi	r24, 0x40	; 64
    2c8a:	91 05       	cpc	r25, r1
    2c8c:	a1 05       	cpc	r26, r1
    2c8e:	b1 05       	cpc	r27, r1
    2c90:	61 f4       	brne	.+24     	; 0x2caa <__divsf3+0x13c>
    2c92:	27 fd       	sbrc	r18, 7
    2c94:	0a c0       	rjmp	.+20     	; 0x2caa <__divsf3+0x13c>
    2c96:	e1 14       	cp	r14, r1
    2c98:	f1 04       	cpc	r15, r1
    2c9a:	01 05       	cpc	r16, r1
    2c9c:	11 05       	cpc	r17, r1
    2c9e:	29 f0       	breq	.+10     	; 0x2caa <__divsf3+0x13c>
    2ca0:	20 5c       	subi	r18, 0xC0	; 192
    2ca2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ca4:	4f 4f       	sbci	r20, 0xFF	; 255
    2ca6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ca8:	20 78       	andi	r18, 0x80	; 128
    2caa:	2d 87       	std	Y+13, r18	; 0x0d
    2cac:	3e 87       	std	Y+14, r19	; 0x0e
    2cae:	4f 87       	std	Y+15, r20	; 0x0f
    2cb0:	58 8b       	std	Y+16, r21	; 0x10
    2cb2:	be 01       	movw	r22, r28
    2cb4:	67 5f       	subi	r22, 0xF7	; 247
    2cb6:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb8:	cb 01       	movw	r24, r22
    2cba:	0e 94 6d 18 	call	0x30da	; 0x30da <__pack_f>
    2cbe:	68 96       	adiw	r28, 0x18	; 24
    2cc0:	ea e0       	ldi	r30, 0x0A	; 10
    2cc2:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__epilogue_restores__+0x10>

00002cc6 <__gtsf2>:
    2cc6:	a8 e1       	ldi	r26, 0x18	; 24
    2cc8:	b0 e0       	ldi	r27, 0x00	; 0
    2cca:	e9 e6       	ldi	r30, 0x69	; 105
    2ccc:	f6 e1       	ldi	r31, 0x16	; 22
    2cce:	0c 94 46 1a 	jmp	0x348c	; 0x348c <__prologue_saves__+0x18>
    2cd2:	69 83       	std	Y+1, r22	; 0x01
    2cd4:	7a 83       	std	Y+2, r23	; 0x02
    2cd6:	8b 83       	std	Y+3, r24	; 0x03
    2cd8:	9c 83       	std	Y+4, r25	; 0x04
    2cda:	2d 83       	std	Y+5, r18	; 0x05
    2cdc:	3e 83       	std	Y+6, r19	; 0x06
    2cde:	4f 83       	std	Y+7, r20	; 0x07
    2ce0:	58 87       	std	Y+8, r21	; 0x08
    2ce2:	89 e0       	ldi	r24, 0x09	; 9
    2ce4:	e8 2e       	mov	r14, r24
    2ce6:	f1 2c       	mov	r15, r1
    2ce8:	ec 0e       	add	r14, r28
    2cea:	fd 1e       	adc	r15, r29
    2cec:	ce 01       	movw	r24, r28
    2cee:	01 96       	adiw	r24, 0x01	; 1
    2cf0:	b7 01       	movw	r22, r14
    2cf2:	0e 94 42 19 	call	0x3284	; 0x3284 <__unpack_f>
    2cf6:	8e 01       	movw	r16, r28
    2cf8:	0f 5e       	subi	r16, 0xEF	; 239
    2cfa:	1f 4f       	sbci	r17, 0xFF	; 255
    2cfc:	ce 01       	movw	r24, r28
    2cfe:	05 96       	adiw	r24, 0x05	; 5
    2d00:	b8 01       	movw	r22, r16
    2d02:	0e 94 42 19 	call	0x3284	; 0x3284 <__unpack_f>
    2d06:	89 85       	ldd	r24, Y+9	; 0x09
    2d08:	82 30       	cpi	r24, 0x02	; 2
    2d0a:	40 f0       	brcs	.+16     	; 0x2d1c <__gtsf2+0x56>
    2d0c:	89 89       	ldd	r24, Y+17	; 0x11
    2d0e:	82 30       	cpi	r24, 0x02	; 2
    2d10:	28 f0       	brcs	.+10     	; 0x2d1c <__gtsf2+0x56>
    2d12:	c7 01       	movw	r24, r14
    2d14:	b8 01       	movw	r22, r16
    2d16:	0e 94 ba 19 	call	0x3374	; 0x3374 <__fpcmp_parts_f>
    2d1a:	01 c0       	rjmp	.+2      	; 0x2d1e <__gtsf2+0x58>
    2d1c:	8f ef       	ldi	r24, 0xFF	; 255
    2d1e:	68 96       	adiw	r28, 0x18	; 24
    2d20:	e6 e0       	ldi	r30, 0x06	; 6
    2d22:	0c 94 62 1a 	jmp	0x34c4	; 0x34c4 <__epilogue_restores__+0x18>

00002d26 <__gesf2>:
    2d26:	a8 e1       	ldi	r26, 0x18	; 24
    2d28:	b0 e0       	ldi	r27, 0x00	; 0
    2d2a:	e9 e9       	ldi	r30, 0x99	; 153
    2d2c:	f6 e1       	ldi	r31, 0x16	; 22
    2d2e:	0c 94 46 1a 	jmp	0x348c	; 0x348c <__prologue_saves__+0x18>
    2d32:	69 83       	std	Y+1, r22	; 0x01
    2d34:	7a 83       	std	Y+2, r23	; 0x02
    2d36:	8b 83       	std	Y+3, r24	; 0x03
    2d38:	9c 83       	std	Y+4, r25	; 0x04
    2d3a:	2d 83       	std	Y+5, r18	; 0x05
    2d3c:	3e 83       	std	Y+6, r19	; 0x06
    2d3e:	4f 83       	std	Y+7, r20	; 0x07
    2d40:	58 87       	std	Y+8, r21	; 0x08
    2d42:	89 e0       	ldi	r24, 0x09	; 9
    2d44:	e8 2e       	mov	r14, r24
    2d46:	f1 2c       	mov	r15, r1
    2d48:	ec 0e       	add	r14, r28
    2d4a:	fd 1e       	adc	r15, r29
    2d4c:	ce 01       	movw	r24, r28
    2d4e:	01 96       	adiw	r24, 0x01	; 1
    2d50:	b7 01       	movw	r22, r14
    2d52:	0e 94 42 19 	call	0x3284	; 0x3284 <__unpack_f>
    2d56:	8e 01       	movw	r16, r28
    2d58:	0f 5e       	subi	r16, 0xEF	; 239
    2d5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d5c:	ce 01       	movw	r24, r28
    2d5e:	05 96       	adiw	r24, 0x05	; 5
    2d60:	b8 01       	movw	r22, r16
    2d62:	0e 94 42 19 	call	0x3284	; 0x3284 <__unpack_f>
    2d66:	89 85       	ldd	r24, Y+9	; 0x09
    2d68:	82 30       	cpi	r24, 0x02	; 2
    2d6a:	40 f0       	brcs	.+16     	; 0x2d7c <__gesf2+0x56>
    2d6c:	89 89       	ldd	r24, Y+17	; 0x11
    2d6e:	82 30       	cpi	r24, 0x02	; 2
    2d70:	28 f0       	brcs	.+10     	; 0x2d7c <__gesf2+0x56>
    2d72:	c7 01       	movw	r24, r14
    2d74:	b8 01       	movw	r22, r16
    2d76:	0e 94 ba 19 	call	0x3374	; 0x3374 <__fpcmp_parts_f>
    2d7a:	01 c0       	rjmp	.+2      	; 0x2d7e <__gesf2+0x58>
    2d7c:	8f ef       	ldi	r24, 0xFF	; 255
    2d7e:	68 96       	adiw	r28, 0x18	; 24
    2d80:	e6 e0       	ldi	r30, 0x06	; 6
    2d82:	0c 94 62 1a 	jmp	0x34c4	; 0x34c4 <__epilogue_restores__+0x18>

00002d86 <__ltsf2>:
    2d86:	a8 e1       	ldi	r26, 0x18	; 24
    2d88:	b0 e0       	ldi	r27, 0x00	; 0
    2d8a:	e9 ec       	ldi	r30, 0xC9	; 201
    2d8c:	f6 e1       	ldi	r31, 0x16	; 22
    2d8e:	0c 94 46 1a 	jmp	0x348c	; 0x348c <__prologue_saves__+0x18>
    2d92:	69 83       	std	Y+1, r22	; 0x01
    2d94:	7a 83       	std	Y+2, r23	; 0x02
    2d96:	8b 83       	std	Y+3, r24	; 0x03
    2d98:	9c 83       	std	Y+4, r25	; 0x04
    2d9a:	2d 83       	std	Y+5, r18	; 0x05
    2d9c:	3e 83       	std	Y+6, r19	; 0x06
    2d9e:	4f 83       	std	Y+7, r20	; 0x07
    2da0:	58 87       	std	Y+8, r21	; 0x08
    2da2:	89 e0       	ldi	r24, 0x09	; 9
    2da4:	e8 2e       	mov	r14, r24
    2da6:	f1 2c       	mov	r15, r1
    2da8:	ec 0e       	add	r14, r28
    2daa:	fd 1e       	adc	r15, r29
    2dac:	ce 01       	movw	r24, r28
    2dae:	01 96       	adiw	r24, 0x01	; 1
    2db0:	b7 01       	movw	r22, r14
    2db2:	0e 94 42 19 	call	0x3284	; 0x3284 <__unpack_f>
    2db6:	8e 01       	movw	r16, r28
    2db8:	0f 5e       	subi	r16, 0xEF	; 239
    2dba:	1f 4f       	sbci	r17, 0xFF	; 255
    2dbc:	ce 01       	movw	r24, r28
    2dbe:	05 96       	adiw	r24, 0x05	; 5
    2dc0:	b8 01       	movw	r22, r16
    2dc2:	0e 94 42 19 	call	0x3284	; 0x3284 <__unpack_f>
    2dc6:	89 85       	ldd	r24, Y+9	; 0x09
    2dc8:	82 30       	cpi	r24, 0x02	; 2
    2dca:	40 f0       	brcs	.+16     	; 0x2ddc <__ltsf2+0x56>
    2dcc:	89 89       	ldd	r24, Y+17	; 0x11
    2dce:	82 30       	cpi	r24, 0x02	; 2
    2dd0:	28 f0       	brcs	.+10     	; 0x2ddc <__ltsf2+0x56>
    2dd2:	c7 01       	movw	r24, r14
    2dd4:	b8 01       	movw	r22, r16
    2dd6:	0e 94 ba 19 	call	0x3374	; 0x3374 <__fpcmp_parts_f>
    2dda:	01 c0       	rjmp	.+2      	; 0x2dde <__ltsf2+0x58>
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	68 96       	adiw	r28, 0x18	; 24
    2de0:	e6 e0       	ldi	r30, 0x06	; 6
    2de2:	0c 94 62 1a 	jmp	0x34c4	; 0x34c4 <__epilogue_restores__+0x18>

00002de6 <__floatsisf>:
    2de6:	a8 e0       	ldi	r26, 0x08	; 8
    2de8:	b0 e0       	ldi	r27, 0x00	; 0
    2dea:	e9 ef       	ldi	r30, 0xF9	; 249
    2dec:	f6 e1       	ldi	r31, 0x16	; 22
    2dee:	0c 94 43 1a 	jmp	0x3486	; 0x3486 <__prologue_saves__+0x12>
    2df2:	9b 01       	movw	r18, r22
    2df4:	ac 01       	movw	r20, r24
    2df6:	83 e0       	ldi	r24, 0x03	; 3
    2df8:	89 83       	std	Y+1, r24	; 0x01
    2dfa:	da 01       	movw	r26, r20
    2dfc:	c9 01       	movw	r24, r18
    2dfe:	88 27       	eor	r24, r24
    2e00:	b7 fd       	sbrc	r27, 7
    2e02:	83 95       	inc	r24
    2e04:	99 27       	eor	r25, r25
    2e06:	aa 27       	eor	r26, r26
    2e08:	bb 27       	eor	r27, r27
    2e0a:	b8 2e       	mov	r11, r24
    2e0c:	21 15       	cp	r18, r1
    2e0e:	31 05       	cpc	r19, r1
    2e10:	41 05       	cpc	r20, r1
    2e12:	51 05       	cpc	r21, r1
    2e14:	19 f4       	brne	.+6      	; 0x2e1c <__floatsisf+0x36>
    2e16:	82 e0       	ldi	r24, 0x02	; 2
    2e18:	89 83       	std	Y+1, r24	; 0x01
    2e1a:	3a c0       	rjmp	.+116    	; 0x2e90 <__floatsisf+0xaa>
    2e1c:	88 23       	and	r24, r24
    2e1e:	a9 f0       	breq	.+42     	; 0x2e4a <__floatsisf+0x64>
    2e20:	20 30       	cpi	r18, 0x00	; 0
    2e22:	80 e0       	ldi	r24, 0x00	; 0
    2e24:	38 07       	cpc	r19, r24
    2e26:	80 e0       	ldi	r24, 0x00	; 0
    2e28:	48 07       	cpc	r20, r24
    2e2a:	80 e8       	ldi	r24, 0x80	; 128
    2e2c:	58 07       	cpc	r21, r24
    2e2e:	29 f4       	brne	.+10     	; 0x2e3a <__floatsisf+0x54>
    2e30:	60 e0       	ldi	r22, 0x00	; 0
    2e32:	70 e0       	ldi	r23, 0x00	; 0
    2e34:	80 e0       	ldi	r24, 0x00	; 0
    2e36:	9f ec       	ldi	r25, 0xCF	; 207
    2e38:	30 c0       	rjmp	.+96     	; 0x2e9a <__floatsisf+0xb4>
    2e3a:	ee 24       	eor	r14, r14
    2e3c:	ff 24       	eor	r15, r15
    2e3e:	87 01       	movw	r16, r14
    2e40:	e2 1a       	sub	r14, r18
    2e42:	f3 0a       	sbc	r15, r19
    2e44:	04 0b       	sbc	r16, r20
    2e46:	15 0b       	sbc	r17, r21
    2e48:	02 c0       	rjmp	.+4      	; 0x2e4e <__floatsisf+0x68>
    2e4a:	79 01       	movw	r14, r18
    2e4c:	8a 01       	movw	r16, r20
    2e4e:	8e e1       	ldi	r24, 0x1E	; 30
    2e50:	c8 2e       	mov	r12, r24
    2e52:	d1 2c       	mov	r13, r1
    2e54:	dc 82       	std	Y+4, r13	; 0x04
    2e56:	cb 82       	std	Y+3, r12	; 0x03
    2e58:	ed 82       	std	Y+5, r14	; 0x05
    2e5a:	fe 82       	std	Y+6, r15	; 0x06
    2e5c:	0f 83       	std	Y+7, r16	; 0x07
    2e5e:	18 87       	std	Y+8, r17	; 0x08
    2e60:	c8 01       	movw	r24, r16
    2e62:	b7 01       	movw	r22, r14
    2e64:	0e 94 1e 18 	call	0x303c	; 0x303c <__clzsi2>
    2e68:	01 97       	sbiw	r24, 0x01	; 1
    2e6a:	18 16       	cp	r1, r24
    2e6c:	19 06       	cpc	r1, r25
    2e6e:	84 f4       	brge	.+32     	; 0x2e90 <__floatsisf+0xaa>
    2e70:	08 2e       	mov	r0, r24
    2e72:	04 c0       	rjmp	.+8      	; 0x2e7c <__floatsisf+0x96>
    2e74:	ee 0c       	add	r14, r14
    2e76:	ff 1c       	adc	r15, r15
    2e78:	00 1f       	adc	r16, r16
    2e7a:	11 1f       	adc	r17, r17
    2e7c:	0a 94       	dec	r0
    2e7e:	d2 f7       	brpl	.-12     	; 0x2e74 <__floatsisf+0x8e>
    2e80:	ed 82       	std	Y+5, r14	; 0x05
    2e82:	fe 82       	std	Y+6, r15	; 0x06
    2e84:	0f 83       	std	Y+7, r16	; 0x07
    2e86:	18 87       	std	Y+8, r17	; 0x08
    2e88:	c8 1a       	sub	r12, r24
    2e8a:	d9 0a       	sbc	r13, r25
    2e8c:	dc 82       	std	Y+4, r13	; 0x04
    2e8e:	cb 82       	std	Y+3, r12	; 0x03
    2e90:	ba 82       	std	Y+2, r11	; 0x02
    2e92:	ce 01       	movw	r24, r28
    2e94:	01 96       	adiw	r24, 0x01	; 1
    2e96:	0e 94 6d 18 	call	0x30da	; 0x30da <__pack_f>
    2e9a:	28 96       	adiw	r28, 0x08	; 8
    2e9c:	e9 e0       	ldi	r30, 0x09	; 9
    2e9e:	0c 94 5f 1a 	jmp	0x34be	; 0x34be <__epilogue_restores__+0x12>

00002ea2 <__fixsfsi>:
    2ea2:	ac e0       	ldi	r26, 0x0C	; 12
    2ea4:	b0 e0       	ldi	r27, 0x00	; 0
    2ea6:	e7 e5       	ldi	r30, 0x57	; 87
    2ea8:	f7 e1       	ldi	r31, 0x17	; 23
    2eaa:	0c 94 4a 1a 	jmp	0x3494	; 0x3494 <__prologue_saves__+0x20>
    2eae:	69 83       	std	Y+1, r22	; 0x01
    2eb0:	7a 83       	std	Y+2, r23	; 0x02
    2eb2:	8b 83       	std	Y+3, r24	; 0x03
    2eb4:	9c 83       	std	Y+4, r25	; 0x04
    2eb6:	ce 01       	movw	r24, r28
    2eb8:	01 96       	adiw	r24, 0x01	; 1
    2eba:	be 01       	movw	r22, r28
    2ebc:	6b 5f       	subi	r22, 0xFB	; 251
    2ebe:	7f 4f       	sbci	r23, 0xFF	; 255
    2ec0:	0e 94 42 19 	call	0x3284	; 0x3284 <__unpack_f>
    2ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec6:	82 30       	cpi	r24, 0x02	; 2
    2ec8:	61 f1       	breq	.+88     	; 0x2f22 <__fixsfsi+0x80>
    2eca:	82 30       	cpi	r24, 0x02	; 2
    2ecc:	50 f1       	brcs	.+84     	; 0x2f22 <__fixsfsi+0x80>
    2ece:	84 30       	cpi	r24, 0x04	; 4
    2ed0:	21 f4       	brne	.+8      	; 0x2eda <__fixsfsi+0x38>
    2ed2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ed4:	88 23       	and	r24, r24
    2ed6:	51 f1       	breq	.+84     	; 0x2f2c <__fixsfsi+0x8a>
    2ed8:	2e c0       	rjmp	.+92     	; 0x2f36 <__fixsfsi+0x94>
    2eda:	2f 81       	ldd	r18, Y+7	; 0x07
    2edc:	38 85       	ldd	r19, Y+8	; 0x08
    2ede:	37 fd       	sbrc	r19, 7
    2ee0:	20 c0       	rjmp	.+64     	; 0x2f22 <__fixsfsi+0x80>
    2ee2:	6e 81       	ldd	r22, Y+6	; 0x06
    2ee4:	2f 31       	cpi	r18, 0x1F	; 31
    2ee6:	31 05       	cpc	r19, r1
    2ee8:	1c f0       	brlt	.+6      	; 0x2ef0 <__fixsfsi+0x4e>
    2eea:	66 23       	and	r22, r22
    2eec:	f9 f0       	breq	.+62     	; 0x2f2c <__fixsfsi+0x8a>
    2eee:	23 c0       	rjmp	.+70     	; 0x2f36 <__fixsfsi+0x94>
    2ef0:	8e e1       	ldi	r24, 0x1E	; 30
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	82 1b       	sub	r24, r18
    2ef6:	93 0b       	sbc	r25, r19
    2ef8:	29 85       	ldd	r18, Y+9	; 0x09
    2efa:	3a 85       	ldd	r19, Y+10	; 0x0a
    2efc:	4b 85       	ldd	r20, Y+11	; 0x0b
    2efe:	5c 85       	ldd	r21, Y+12	; 0x0c
    2f00:	04 c0       	rjmp	.+8      	; 0x2f0a <__fixsfsi+0x68>
    2f02:	56 95       	lsr	r21
    2f04:	47 95       	ror	r20
    2f06:	37 95       	ror	r19
    2f08:	27 95       	ror	r18
    2f0a:	8a 95       	dec	r24
    2f0c:	d2 f7       	brpl	.-12     	; 0x2f02 <__fixsfsi+0x60>
    2f0e:	66 23       	and	r22, r22
    2f10:	b1 f0       	breq	.+44     	; 0x2f3e <__fixsfsi+0x9c>
    2f12:	50 95       	com	r21
    2f14:	40 95       	com	r20
    2f16:	30 95       	com	r19
    2f18:	21 95       	neg	r18
    2f1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f1c:	4f 4f       	sbci	r20, 0xFF	; 255
    2f1e:	5f 4f       	sbci	r21, 0xFF	; 255
    2f20:	0e c0       	rjmp	.+28     	; 0x2f3e <__fixsfsi+0x9c>
    2f22:	20 e0       	ldi	r18, 0x00	; 0
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	40 e0       	ldi	r20, 0x00	; 0
    2f28:	50 e0       	ldi	r21, 0x00	; 0
    2f2a:	09 c0       	rjmp	.+18     	; 0x2f3e <__fixsfsi+0x9c>
    2f2c:	2f ef       	ldi	r18, 0xFF	; 255
    2f2e:	3f ef       	ldi	r19, 0xFF	; 255
    2f30:	4f ef       	ldi	r20, 0xFF	; 255
    2f32:	5f e7       	ldi	r21, 0x7F	; 127
    2f34:	04 c0       	rjmp	.+8      	; 0x2f3e <__fixsfsi+0x9c>
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	40 e0       	ldi	r20, 0x00	; 0
    2f3c:	50 e8       	ldi	r21, 0x80	; 128
    2f3e:	b9 01       	movw	r22, r18
    2f40:	ca 01       	movw	r24, r20
    2f42:	2c 96       	adiw	r28, 0x0c	; 12
    2f44:	e2 e0       	ldi	r30, 0x02	; 2
    2f46:	0c 94 66 1a 	jmp	0x34cc	; 0x34cc <__epilogue_restores__+0x20>

00002f4a <__floatunsisf>:
    2f4a:	a8 e0       	ldi	r26, 0x08	; 8
    2f4c:	b0 e0       	ldi	r27, 0x00	; 0
    2f4e:	eb ea       	ldi	r30, 0xAB	; 171
    2f50:	f7 e1       	ldi	r31, 0x17	; 23
    2f52:	0c 94 42 1a 	jmp	0x3484	; 0x3484 <__prologue_saves__+0x10>
    2f56:	7b 01       	movw	r14, r22
    2f58:	8c 01       	movw	r16, r24
    2f5a:	61 15       	cp	r22, r1
    2f5c:	71 05       	cpc	r23, r1
    2f5e:	81 05       	cpc	r24, r1
    2f60:	91 05       	cpc	r25, r1
    2f62:	19 f4       	brne	.+6      	; 0x2f6a <__floatunsisf+0x20>
    2f64:	82 e0       	ldi	r24, 0x02	; 2
    2f66:	89 83       	std	Y+1, r24	; 0x01
    2f68:	60 c0       	rjmp	.+192    	; 0x302a <__floatunsisf+0xe0>
    2f6a:	83 e0       	ldi	r24, 0x03	; 3
    2f6c:	89 83       	std	Y+1, r24	; 0x01
    2f6e:	8e e1       	ldi	r24, 0x1E	; 30
    2f70:	c8 2e       	mov	r12, r24
    2f72:	d1 2c       	mov	r13, r1
    2f74:	dc 82       	std	Y+4, r13	; 0x04
    2f76:	cb 82       	std	Y+3, r12	; 0x03
    2f78:	ed 82       	std	Y+5, r14	; 0x05
    2f7a:	fe 82       	std	Y+6, r15	; 0x06
    2f7c:	0f 83       	std	Y+7, r16	; 0x07
    2f7e:	18 87       	std	Y+8, r17	; 0x08
    2f80:	c8 01       	movw	r24, r16
    2f82:	b7 01       	movw	r22, r14
    2f84:	0e 94 1e 18 	call	0x303c	; 0x303c <__clzsi2>
    2f88:	fc 01       	movw	r30, r24
    2f8a:	31 97       	sbiw	r30, 0x01	; 1
    2f8c:	f7 ff       	sbrs	r31, 7
    2f8e:	3b c0       	rjmp	.+118    	; 0x3006 <__floatunsisf+0xbc>
    2f90:	22 27       	eor	r18, r18
    2f92:	33 27       	eor	r19, r19
    2f94:	2e 1b       	sub	r18, r30
    2f96:	3f 0b       	sbc	r19, r31
    2f98:	57 01       	movw	r10, r14
    2f9a:	68 01       	movw	r12, r16
    2f9c:	02 2e       	mov	r0, r18
    2f9e:	04 c0       	rjmp	.+8      	; 0x2fa8 <__floatunsisf+0x5e>
    2fa0:	d6 94       	lsr	r13
    2fa2:	c7 94       	ror	r12
    2fa4:	b7 94       	ror	r11
    2fa6:	a7 94       	ror	r10
    2fa8:	0a 94       	dec	r0
    2faa:	d2 f7       	brpl	.-12     	; 0x2fa0 <__floatunsisf+0x56>
    2fac:	40 e0       	ldi	r20, 0x00	; 0
    2fae:	50 e0       	ldi	r21, 0x00	; 0
    2fb0:	60 e0       	ldi	r22, 0x00	; 0
    2fb2:	70 e0       	ldi	r23, 0x00	; 0
    2fb4:	81 e0       	ldi	r24, 0x01	; 1
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	a0 e0       	ldi	r26, 0x00	; 0
    2fba:	b0 e0       	ldi	r27, 0x00	; 0
    2fbc:	04 c0       	rjmp	.+8      	; 0x2fc6 <__floatunsisf+0x7c>
    2fbe:	88 0f       	add	r24, r24
    2fc0:	99 1f       	adc	r25, r25
    2fc2:	aa 1f       	adc	r26, r26
    2fc4:	bb 1f       	adc	r27, r27
    2fc6:	2a 95       	dec	r18
    2fc8:	d2 f7       	brpl	.-12     	; 0x2fbe <__floatunsisf+0x74>
    2fca:	01 97       	sbiw	r24, 0x01	; 1
    2fcc:	a1 09       	sbc	r26, r1
    2fce:	b1 09       	sbc	r27, r1
    2fd0:	8e 21       	and	r24, r14
    2fd2:	9f 21       	and	r25, r15
    2fd4:	a0 23       	and	r26, r16
    2fd6:	b1 23       	and	r27, r17
    2fd8:	00 97       	sbiw	r24, 0x00	; 0
    2fda:	a1 05       	cpc	r26, r1
    2fdc:	b1 05       	cpc	r27, r1
    2fde:	21 f0       	breq	.+8      	; 0x2fe8 <__floatunsisf+0x9e>
    2fe0:	41 e0       	ldi	r20, 0x01	; 1
    2fe2:	50 e0       	ldi	r21, 0x00	; 0
    2fe4:	60 e0       	ldi	r22, 0x00	; 0
    2fe6:	70 e0       	ldi	r23, 0x00	; 0
    2fe8:	4a 29       	or	r20, r10
    2fea:	5b 29       	or	r21, r11
    2fec:	6c 29       	or	r22, r12
    2fee:	7d 29       	or	r23, r13
    2ff0:	4d 83       	std	Y+5, r20	; 0x05
    2ff2:	5e 83       	std	Y+6, r21	; 0x06
    2ff4:	6f 83       	std	Y+7, r22	; 0x07
    2ff6:	78 87       	std	Y+8, r23	; 0x08
    2ff8:	8e e1       	ldi	r24, 0x1E	; 30
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	8e 1b       	sub	r24, r30
    2ffe:	9f 0b       	sbc	r25, r31
    3000:	9c 83       	std	Y+4, r25	; 0x04
    3002:	8b 83       	std	Y+3, r24	; 0x03
    3004:	12 c0       	rjmp	.+36     	; 0x302a <__floatunsisf+0xe0>
    3006:	30 97       	sbiw	r30, 0x00	; 0
    3008:	81 f0       	breq	.+32     	; 0x302a <__floatunsisf+0xe0>
    300a:	0e 2e       	mov	r0, r30
    300c:	04 c0       	rjmp	.+8      	; 0x3016 <__floatunsisf+0xcc>
    300e:	ee 0c       	add	r14, r14
    3010:	ff 1c       	adc	r15, r15
    3012:	00 1f       	adc	r16, r16
    3014:	11 1f       	adc	r17, r17
    3016:	0a 94       	dec	r0
    3018:	d2 f7       	brpl	.-12     	; 0x300e <__floatunsisf+0xc4>
    301a:	ed 82       	std	Y+5, r14	; 0x05
    301c:	fe 82       	std	Y+6, r15	; 0x06
    301e:	0f 83       	std	Y+7, r16	; 0x07
    3020:	18 87       	std	Y+8, r17	; 0x08
    3022:	ce 1a       	sub	r12, r30
    3024:	df 0a       	sbc	r13, r31
    3026:	dc 82       	std	Y+4, r13	; 0x04
    3028:	cb 82       	std	Y+3, r12	; 0x03
    302a:	1a 82       	std	Y+2, r1	; 0x02
    302c:	ce 01       	movw	r24, r28
    302e:	01 96       	adiw	r24, 0x01	; 1
    3030:	0e 94 6d 18 	call	0x30da	; 0x30da <__pack_f>
    3034:	28 96       	adiw	r28, 0x08	; 8
    3036:	ea e0       	ldi	r30, 0x0A	; 10
    3038:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__epilogue_restores__+0x10>

0000303c <__clzsi2>:
    303c:	ef 92       	push	r14
    303e:	ff 92       	push	r15
    3040:	0f 93       	push	r16
    3042:	1f 93       	push	r17
    3044:	7b 01       	movw	r14, r22
    3046:	8c 01       	movw	r16, r24
    3048:	80 e0       	ldi	r24, 0x00	; 0
    304a:	e8 16       	cp	r14, r24
    304c:	80 e0       	ldi	r24, 0x00	; 0
    304e:	f8 06       	cpc	r15, r24
    3050:	81 e0       	ldi	r24, 0x01	; 1
    3052:	08 07       	cpc	r16, r24
    3054:	80 e0       	ldi	r24, 0x00	; 0
    3056:	18 07       	cpc	r17, r24
    3058:	88 f4       	brcc	.+34     	; 0x307c <__clzsi2+0x40>
    305a:	8f ef       	ldi	r24, 0xFF	; 255
    305c:	e8 16       	cp	r14, r24
    305e:	f1 04       	cpc	r15, r1
    3060:	01 05       	cpc	r16, r1
    3062:	11 05       	cpc	r17, r1
    3064:	31 f0       	breq	.+12     	; 0x3072 <__clzsi2+0x36>
    3066:	28 f0       	brcs	.+10     	; 0x3072 <__clzsi2+0x36>
    3068:	88 e0       	ldi	r24, 0x08	; 8
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	a0 e0       	ldi	r26, 0x00	; 0
    306e:	b0 e0       	ldi	r27, 0x00	; 0
    3070:	17 c0       	rjmp	.+46     	; 0x30a0 <__clzsi2+0x64>
    3072:	80 e0       	ldi	r24, 0x00	; 0
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	a0 e0       	ldi	r26, 0x00	; 0
    3078:	b0 e0       	ldi	r27, 0x00	; 0
    307a:	12 c0       	rjmp	.+36     	; 0x30a0 <__clzsi2+0x64>
    307c:	80 e0       	ldi	r24, 0x00	; 0
    307e:	e8 16       	cp	r14, r24
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	f8 06       	cpc	r15, r24
    3084:	80 e0       	ldi	r24, 0x00	; 0
    3086:	08 07       	cpc	r16, r24
    3088:	81 e0       	ldi	r24, 0x01	; 1
    308a:	18 07       	cpc	r17, r24
    308c:	28 f0       	brcs	.+10     	; 0x3098 <__clzsi2+0x5c>
    308e:	88 e1       	ldi	r24, 0x18	; 24
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	a0 e0       	ldi	r26, 0x00	; 0
    3094:	b0 e0       	ldi	r27, 0x00	; 0
    3096:	04 c0       	rjmp	.+8      	; 0x30a0 <__clzsi2+0x64>
    3098:	80 e1       	ldi	r24, 0x10	; 16
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	a0 e0       	ldi	r26, 0x00	; 0
    309e:	b0 e0       	ldi	r27, 0x00	; 0
    30a0:	20 e2       	ldi	r18, 0x20	; 32
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	40 e0       	ldi	r20, 0x00	; 0
    30a6:	50 e0       	ldi	r21, 0x00	; 0
    30a8:	28 1b       	sub	r18, r24
    30aa:	39 0b       	sbc	r19, r25
    30ac:	4a 0b       	sbc	r20, r26
    30ae:	5b 0b       	sbc	r21, r27
    30b0:	04 c0       	rjmp	.+8      	; 0x30ba <__clzsi2+0x7e>
    30b2:	16 95       	lsr	r17
    30b4:	07 95       	ror	r16
    30b6:	f7 94       	ror	r15
    30b8:	e7 94       	ror	r14
    30ba:	8a 95       	dec	r24
    30bc:	d2 f7       	brpl	.-12     	; 0x30b2 <__clzsi2+0x76>
    30be:	f7 01       	movw	r30, r14
    30c0:	e5 5f       	subi	r30, 0xF5	; 245
    30c2:	fd 4f       	sbci	r31, 0xFD	; 253
    30c4:	80 81       	ld	r24, Z
    30c6:	28 1b       	sub	r18, r24
    30c8:	31 09       	sbc	r19, r1
    30ca:	41 09       	sbc	r20, r1
    30cc:	51 09       	sbc	r21, r1
    30ce:	c9 01       	movw	r24, r18
    30d0:	1f 91       	pop	r17
    30d2:	0f 91       	pop	r16
    30d4:	ff 90       	pop	r15
    30d6:	ef 90       	pop	r14
    30d8:	08 95       	ret

000030da <__pack_f>:
    30da:	df 92       	push	r13
    30dc:	ef 92       	push	r14
    30de:	ff 92       	push	r15
    30e0:	0f 93       	push	r16
    30e2:	1f 93       	push	r17
    30e4:	fc 01       	movw	r30, r24
    30e6:	e4 80       	ldd	r14, Z+4	; 0x04
    30e8:	f5 80       	ldd	r15, Z+5	; 0x05
    30ea:	06 81       	ldd	r16, Z+6	; 0x06
    30ec:	17 81       	ldd	r17, Z+7	; 0x07
    30ee:	d1 80       	ldd	r13, Z+1	; 0x01
    30f0:	80 81       	ld	r24, Z
    30f2:	82 30       	cpi	r24, 0x02	; 2
    30f4:	48 f4       	brcc	.+18     	; 0x3108 <__pack_f+0x2e>
    30f6:	80 e0       	ldi	r24, 0x00	; 0
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	a0 e1       	ldi	r26, 0x10	; 16
    30fc:	b0 e0       	ldi	r27, 0x00	; 0
    30fe:	e8 2a       	or	r14, r24
    3100:	f9 2a       	or	r15, r25
    3102:	0a 2b       	or	r16, r26
    3104:	1b 2b       	or	r17, r27
    3106:	a5 c0       	rjmp	.+330    	; 0x3252 <__pack_f+0x178>
    3108:	84 30       	cpi	r24, 0x04	; 4
    310a:	09 f4       	brne	.+2      	; 0x310e <__pack_f+0x34>
    310c:	9f c0       	rjmp	.+318    	; 0x324c <__pack_f+0x172>
    310e:	82 30       	cpi	r24, 0x02	; 2
    3110:	21 f4       	brne	.+8      	; 0x311a <__pack_f+0x40>
    3112:	ee 24       	eor	r14, r14
    3114:	ff 24       	eor	r15, r15
    3116:	87 01       	movw	r16, r14
    3118:	05 c0       	rjmp	.+10     	; 0x3124 <__pack_f+0x4a>
    311a:	e1 14       	cp	r14, r1
    311c:	f1 04       	cpc	r15, r1
    311e:	01 05       	cpc	r16, r1
    3120:	11 05       	cpc	r17, r1
    3122:	19 f4       	brne	.+6      	; 0x312a <__pack_f+0x50>
    3124:	e0 e0       	ldi	r30, 0x00	; 0
    3126:	f0 e0       	ldi	r31, 0x00	; 0
    3128:	96 c0       	rjmp	.+300    	; 0x3256 <__pack_f+0x17c>
    312a:	62 81       	ldd	r22, Z+2	; 0x02
    312c:	73 81       	ldd	r23, Z+3	; 0x03
    312e:	9f ef       	ldi	r25, 0xFF	; 255
    3130:	62 38       	cpi	r22, 0x82	; 130
    3132:	79 07       	cpc	r23, r25
    3134:	0c f0       	brlt	.+2      	; 0x3138 <__pack_f+0x5e>
    3136:	5b c0       	rjmp	.+182    	; 0x31ee <__pack_f+0x114>
    3138:	22 e8       	ldi	r18, 0x82	; 130
    313a:	3f ef       	ldi	r19, 0xFF	; 255
    313c:	26 1b       	sub	r18, r22
    313e:	37 0b       	sbc	r19, r23
    3140:	2a 31       	cpi	r18, 0x1A	; 26
    3142:	31 05       	cpc	r19, r1
    3144:	2c f0       	brlt	.+10     	; 0x3150 <__pack_f+0x76>
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	40 e0       	ldi	r20, 0x00	; 0
    314c:	50 e0       	ldi	r21, 0x00	; 0
    314e:	2a c0       	rjmp	.+84     	; 0x31a4 <__pack_f+0xca>
    3150:	b8 01       	movw	r22, r16
    3152:	a7 01       	movw	r20, r14
    3154:	02 2e       	mov	r0, r18
    3156:	04 c0       	rjmp	.+8      	; 0x3160 <__pack_f+0x86>
    3158:	76 95       	lsr	r23
    315a:	67 95       	ror	r22
    315c:	57 95       	ror	r21
    315e:	47 95       	ror	r20
    3160:	0a 94       	dec	r0
    3162:	d2 f7       	brpl	.-12     	; 0x3158 <__pack_f+0x7e>
    3164:	81 e0       	ldi	r24, 0x01	; 1
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	a0 e0       	ldi	r26, 0x00	; 0
    316a:	b0 e0       	ldi	r27, 0x00	; 0
    316c:	04 c0       	rjmp	.+8      	; 0x3176 <__pack_f+0x9c>
    316e:	88 0f       	add	r24, r24
    3170:	99 1f       	adc	r25, r25
    3172:	aa 1f       	adc	r26, r26
    3174:	bb 1f       	adc	r27, r27
    3176:	2a 95       	dec	r18
    3178:	d2 f7       	brpl	.-12     	; 0x316e <__pack_f+0x94>
    317a:	01 97       	sbiw	r24, 0x01	; 1
    317c:	a1 09       	sbc	r26, r1
    317e:	b1 09       	sbc	r27, r1
    3180:	8e 21       	and	r24, r14
    3182:	9f 21       	and	r25, r15
    3184:	a0 23       	and	r26, r16
    3186:	b1 23       	and	r27, r17
    3188:	00 97       	sbiw	r24, 0x00	; 0
    318a:	a1 05       	cpc	r26, r1
    318c:	b1 05       	cpc	r27, r1
    318e:	21 f0       	breq	.+8      	; 0x3198 <__pack_f+0xbe>
    3190:	81 e0       	ldi	r24, 0x01	; 1
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	a0 e0       	ldi	r26, 0x00	; 0
    3196:	b0 e0       	ldi	r27, 0x00	; 0
    3198:	9a 01       	movw	r18, r20
    319a:	ab 01       	movw	r20, r22
    319c:	28 2b       	or	r18, r24
    319e:	39 2b       	or	r19, r25
    31a0:	4a 2b       	or	r20, r26
    31a2:	5b 2b       	or	r21, r27
    31a4:	da 01       	movw	r26, r20
    31a6:	c9 01       	movw	r24, r18
    31a8:	8f 77       	andi	r24, 0x7F	; 127
    31aa:	90 70       	andi	r25, 0x00	; 0
    31ac:	a0 70       	andi	r26, 0x00	; 0
    31ae:	b0 70       	andi	r27, 0x00	; 0
    31b0:	80 34       	cpi	r24, 0x40	; 64
    31b2:	91 05       	cpc	r25, r1
    31b4:	a1 05       	cpc	r26, r1
    31b6:	b1 05       	cpc	r27, r1
    31b8:	39 f4       	brne	.+14     	; 0x31c8 <__pack_f+0xee>
    31ba:	27 ff       	sbrs	r18, 7
    31bc:	09 c0       	rjmp	.+18     	; 0x31d0 <__pack_f+0xf6>
    31be:	20 5c       	subi	r18, 0xC0	; 192
    31c0:	3f 4f       	sbci	r19, 0xFF	; 255
    31c2:	4f 4f       	sbci	r20, 0xFF	; 255
    31c4:	5f 4f       	sbci	r21, 0xFF	; 255
    31c6:	04 c0       	rjmp	.+8      	; 0x31d0 <__pack_f+0xf6>
    31c8:	21 5c       	subi	r18, 0xC1	; 193
    31ca:	3f 4f       	sbci	r19, 0xFF	; 255
    31cc:	4f 4f       	sbci	r20, 0xFF	; 255
    31ce:	5f 4f       	sbci	r21, 0xFF	; 255
    31d0:	e0 e0       	ldi	r30, 0x00	; 0
    31d2:	f0 e0       	ldi	r31, 0x00	; 0
    31d4:	20 30       	cpi	r18, 0x00	; 0
    31d6:	a0 e0       	ldi	r26, 0x00	; 0
    31d8:	3a 07       	cpc	r19, r26
    31da:	a0 e0       	ldi	r26, 0x00	; 0
    31dc:	4a 07       	cpc	r20, r26
    31de:	a0 e4       	ldi	r26, 0x40	; 64
    31e0:	5a 07       	cpc	r21, r26
    31e2:	10 f0       	brcs	.+4      	; 0x31e8 <__pack_f+0x10e>
    31e4:	e1 e0       	ldi	r30, 0x01	; 1
    31e6:	f0 e0       	ldi	r31, 0x00	; 0
    31e8:	79 01       	movw	r14, r18
    31ea:	8a 01       	movw	r16, r20
    31ec:	27 c0       	rjmp	.+78     	; 0x323c <__pack_f+0x162>
    31ee:	60 38       	cpi	r22, 0x80	; 128
    31f0:	71 05       	cpc	r23, r1
    31f2:	64 f5       	brge	.+88     	; 0x324c <__pack_f+0x172>
    31f4:	fb 01       	movw	r30, r22
    31f6:	e1 58       	subi	r30, 0x81	; 129
    31f8:	ff 4f       	sbci	r31, 0xFF	; 255
    31fa:	d8 01       	movw	r26, r16
    31fc:	c7 01       	movw	r24, r14
    31fe:	8f 77       	andi	r24, 0x7F	; 127
    3200:	90 70       	andi	r25, 0x00	; 0
    3202:	a0 70       	andi	r26, 0x00	; 0
    3204:	b0 70       	andi	r27, 0x00	; 0
    3206:	80 34       	cpi	r24, 0x40	; 64
    3208:	91 05       	cpc	r25, r1
    320a:	a1 05       	cpc	r26, r1
    320c:	b1 05       	cpc	r27, r1
    320e:	39 f4       	brne	.+14     	; 0x321e <__pack_f+0x144>
    3210:	e7 fe       	sbrs	r14, 7
    3212:	0d c0       	rjmp	.+26     	; 0x322e <__pack_f+0x154>
    3214:	80 e4       	ldi	r24, 0x40	; 64
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	a0 e0       	ldi	r26, 0x00	; 0
    321a:	b0 e0       	ldi	r27, 0x00	; 0
    321c:	04 c0       	rjmp	.+8      	; 0x3226 <__pack_f+0x14c>
    321e:	8f e3       	ldi	r24, 0x3F	; 63
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	a0 e0       	ldi	r26, 0x00	; 0
    3224:	b0 e0       	ldi	r27, 0x00	; 0
    3226:	e8 0e       	add	r14, r24
    3228:	f9 1e       	adc	r15, r25
    322a:	0a 1f       	adc	r16, r26
    322c:	1b 1f       	adc	r17, r27
    322e:	17 ff       	sbrs	r17, 7
    3230:	05 c0       	rjmp	.+10     	; 0x323c <__pack_f+0x162>
    3232:	16 95       	lsr	r17
    3234:	07 95       	ror	r16
    3236:	f7 94       	ror	r15
    3238:	e7 94       	ror	r14
    323a:	31 96       	adiw	r30, 0x01	; 1
    323c:	87 e0       	ldi	r24, 0x07	; 7
    323e:	16 95       	lsr	r17
    3240:	07 95       	ror	r16
    3242:	f7 94       	ror	r15
    3244:	e7 94       	ror	r14
    3246:	8a 95       	dec	r24
    3248:	d1 f7       	brne	.-12     	; 0x323e <__pack_f+0x164>
    324a:	05 c0       	rjmp	.+10     	; 0x3256 <__pack_f+0x17c>
    324c:	ee 24       	eor	r14, r14
    324e:	ff 24       	eor	r15, r15
    3250:	87 01       	movw	r16, r14
    3252:	ef ef       	ldi	r30, 0xFF	; 255
    3254:	f0 e0       	ldi	r31, 0x00	; 0
    3256:	6e 2f       	mov	r22, r30
    3258:	67 95       	ror	r22
    325a:	66 27       	eor	r22, r22
    325c:	67 95       	ror	r22
    325e:	90 2f       	mov	r25, r16
    3260:	9f 77       	andi	r25, 0x7F	; 127
    3262:	d7 94       	ror	r13
    3264:	dd 24       	eor	r13, r13
    3266:	d7 94       	ror	r13
    3268:	8e 2f       	mov	r24, r30
    326a:	86 95       	lsr	r24
    326c:	49 2f       	mov	r20, r25
    326e:	46 2b       	or	r20, r22
    3270:	58 2f       	mov	r21, r24
    3272:	5d 29       	or	r21, r13
    3274:	b7 01       	movw	r22, r14
    3276:	ca 01       	movw	r24, r20
    3278:	1f 91       	pop	r17
    327a:	0f 91       	pop	r16
    327c:	ff 90       	pop	r15
    327e:	ef 90       	pop	r14
    3280:	df 90       	pop	r13
    3282:	08 95       	ret

00003284 <__unpack_f>:
    3284:	fc 01       	movw	r30, r24
    3286:	db 01       	movw	r26, r22
    3288:	40 81       	ld	r20, Z
    328a:	51 81       	ldd	r21, Z+1	; 0x01
    328c:	22 81       	ldd	r18, Z+2	; 0x02
    328e:	62 2f       	mov	r22, r18
    3290:	6f 77       	andi	r22, 0x7F	; 127
    3292:	70 e0       	ldi	r23, 0x00	; 0
    3294:	22 1f       	adc	r18, r18
    3296:	22 27       	eor	r18, r18
    3298:	22 1f       	adc	r18, r18
    329a:	93 81       	ldd	r25, Z+3	; 0x03
    329c:	89 2f       	mov	r24, r25
    329e:	88 0f       	add	r24, r24
    32a0:	82 2b       	or	r24, r18
    32a2:	28 2f       	mov	r18, r24
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	99 1f       	adc	r25, r25
    32a8:	99 27       	eor	r25, r25
    32aa:	99 1f       	adc	r25, r25
    32ac:	11 96       	adiw	r26, 0x01	; 1
    32ae:	9c 93       	st	X, r25
    32b0:	11 97       	sbiw	r26, 0x01	; 1
    32b2:	21 15       	cp	r18, r1
    32b4:	31 05       	cpc	r19, r1
    32b6:	a9 f5       	brne	.+106    	; 0x3322 <__unpack_f+0x9e>
    32b8:	41 15       	cp	r20, r1
    32ba:	51 05       	cpc	r21, r1
    32bc:	61 05       	cpc	r22, r1
    32be:	71 05       	cpc	r23, r1
    32c0:	11 f4       	brne	.+4      	; 0x32c6 <__unpack_f+0x42>
    32c2:	82 e0       	ldi	r24, 0x02	; 2
    32c4:	37 c0       	rjmp	.+110    	; 0x3334 <__unpack_f+0xb0>
    32c6:	82 e8       	ldi	r24, 0x82	; 130
    32c8:	9f ef       	ldi	r25, 0xFF	; 255
    32ca:	13 96       	adiw	r26, 0x03	; 3
    32cc:	9c 93       	st	X, r25
    32ce:	8e 93       	st	-X, r24
    32d0:	12 97       	sbiw	r26, 0x02	; 2
    32d2:	9a 01       	movw	r18, r20
    32d4:	ab 01       	movw	r20, r22
    32d6:	67 e0       	ldi	r22, 0x07	; 7
    32d8:	22 0f       	add	r18, r18
    32da:	33 1f       	adc	r19, r19
    32dc:	44 1f       	adc	r20, r20
    32de:	55 1f       	adc	r21, r21
    32e0:	6a 95       	dec	r22
    32e2:	d1 f7       	brne	.-12     	; 0x32d8 <__unpack_f+0x54>
    32e4:	83 e0       	ldi	r24, 0x03	; 3
    32e6:	8c 93       	st	X, r24
    32e8:	0d c0       	rjmp	.+26     	; 0x3304 <__unpack_f+0x80>
    32ea:	22 0f       	add	r18, r18
    32ec:	33 1f       	adc	r19, r19
    32ee:	44 1f       	adc	r20, r20
    32f0:	55 1f       	adc	r21, r21
    32f2:	12 96       	adiw	r26, 0x02	; 2
    32f4:	8d 91       	ld	r24, X+
    32f6:	9c 91       	ld	r25, X
    32f8:	13 97       	sbiw	r26, 0x03	; 3
    32fa:	01 97       	sbiw	r24, 0x01	; 1
    32fc:	13 96       	adiw	r26, 0x03	; 3
    32fe:	9c 93       	st	X, r25
    3300:	8e 93       	st	-X, r24
    3302:	12 97       	sbiw	r26, 0x02	; 2
    3304:	20 30       	cpi	r18, 0x00	; 0
    3306:	80 e0       	ldi	r24, 0x00	; 0
    3308:	38 07       	cpc	r19, r24
    330a:	80 e0       	ldi	r24, 0x00	; 0
    330c:	48 07       	cpc	r20, r24
    330e:	80 e4       	ldi	r24, 0x40	; 64
    3310:	58 07       	cpc	r21, r24
    3312:	58 f3       	brcs	.-42     	; 0x32ea <__unpack_f+0x66>
    3314:	14 96       	adiw	r26, 0x04	; 4
    3316:	2d 93       	st	X+, r18
    3318:	3d 93       	st	X+, r19
    331a:	4d 93       	st	X+, r20
    331c:	5c 93       	st	X, r21
    331e:	17 97       	sbiw	r26, 0x07	; 7
    3320:	08 95       	ret
    3322:	2f 3f       	cpi	r18, 0xFF	; 255
    3324:	31 05       	cpc	r19, r1
    3326:	79 f4       	brne	.+30     	; 0x3346 <__unpack_f+0xc2>
    3328:	41 15       	cp	r20, r1
    332a:	51 05       	cpc	r21, r1
    332c:	61 05       	cpc	r22, r1
    332e:	71 05       	cpc	r23, r1
    3330:	19 f4       	brne	.+6      	; 0x3338 <__unpack_f+0xb4>
    3332:	84 e0       	ldi	r24, 0x04	; 4
    3334:	8c 93       	st	X, r24
    3336:	08 95       	ret
    3338:	64 ff       	sbrs	r22, 4
    333a:	03 c0       	rjmp	.+6      	; 0x3342 <__unpack_f+0xbe>
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	8c 93       	st	X, r24
    3340:	12 c0       	rjmp	.+36     	; 0x3366 <__unpack_f+0xe2>
    3342:	1c 92       	st	X, r1
    3344:	10 c0       	rjmp	.+32     	; 0x3366 <__unpack_f+0xe2>
    3346:	2f 57       	subi	r18, 0x7F	; 127
    3348:	30 40       	sbci	r19, 0x00	; 0
    334a:	13 96       	adiw	r26, 0x03	; 3
    334c:	3c 93       	st	X, r19
    334e:	2e 93       	st	-X, r18
    3350:	12 97       	sbiw	r26, 0x02	; 2
    3352:	83 e0       	ldi	r24, 0x03	; 3
    3354:	8c 93       	st	X, r24
    3356:	87 e0       	ldi	r24, 0x07	; 7
    3358:	44 0f       	add	r20, r20
    335a:	55 1f       	adc	r21, r21
    335c:	66 1f       	adc	r22, r22
    335e:	77 1f       	adc	r23, r23
    3360:	8a 95       	dec	r24
    3362:	d1 f7       	brne	.-12     	; 0x3358 <__unpack_f+0xd4>
    3364:	70 64       	ori	r23, 0x40	; 64
    3366:	14 96       	adiw	r26, 0x04	; 4
    3368:	4d 93       	st	X+, r20
    336a:	5d 93       	st	X+, r21
    336c:	6d 93       	st	X+, r22
    336e:	7c 93       	st	X, r23
    3370:	17 97       	sbiw	r26, 0x07	; 7
    3372:	08 95       	ret

00003374 <__fpcmp_parts_f>:
    3374:	1f 93       	push	r17
    3376:	dc 01       	movw	r26, r24
    3378:	fb 01       	movw	r30, r22
    337a:	9c 91       	ld	r25, X
    337c:	92 30       	cpi	r25, 0x02	; 2
    337e:	08 f4       	brcc	.+2      	; 0x3382 <__fpcmp_parts_f+0xe>
    3380:	47 c0       	rjmp	.+142    	; 0x3410 <__fpcmp_parts_f+0x9c>
    3382:	80 81       	ld	r24, Z
    3384:	82 30       	cpi	r24, 0x02	; 2
    3386:	08 f4       	brcc	.+2      	; 0x338a <__fpcmp_parts_f+0x16>
    3388:	43 c0       	rjmp	.+134    	; 0x3410 <__fpcmp_parts_f+0x9c>
    338a:	94 30       	cpi	r25, 0x04	; 4
    338c:	51 f4       	brne	.+20     	; 0x33a2 <__fpcmp_parts_f+0x2e>
    338e:	11 96       	adiw	r26, 0x01	; 1
    3390:	1c 91       	ld	r17, X
    3392:	84 30       	cpi	r24, 0x04	; 4
    3394:	99 f5       	brne	.+102    	; 0x33fc <__fpcmp_parts_f+0x88>
    3396:	81 81       	ldd	r24, Z+1	; 0x01
    3398:	68 2f       	mov	r22, r24
    339a:	70 e0       	ldi	r23, 0x00	; 0
    339c:	61 1b       	sub	r22, r17
    339e:	71 09       	sbc	r23, r1
    33a0:	3f c0       	rjmp	.+126    	; 0x3420 <__fpcmp_parts_f+0xac>
    33a2:	84 30       	cpi	r24, 0x04	; 4
    33a4:	21 f0       	breq	.+8      	; 0x33ae <__fpcmp_parts_f+0x3a>
    33a6:	92 30       	cpi	r25, 0x02	; 2
    33a8:	31 f4       	brne	.+12     	; 0x33b6 <__fpcmp_parts_f+0x42>
    33aa:	82 30       	cpi	r24, 0x02	; 2
    33ac:	b9 f1       	breq	.+110    	; 0x341c <__fpcmp_parts_f+0xa8>
    33ae:	81 81       	ldd	r24, Z+1	; 0x01
    33b0:	88 23       	and	r24, r24
    33b2:	89 f1       	breq	.+98     	; 0x3416 <__fpcmp_parts_f+0xa2>
    33b4:	2d c0       	rjmp	.+90     	; 0x3410 <__fpcmp_parts_f+0x9c>
    33b6:	11 96       	adiw	r26, 0x01	; 1
    33b8:	1c 91       	ld	r17, X
    33ba:	11 97       	sbiw	r26, 0x01	; 1
    33bc:	82 30       	cpi	r24, 0x02	; 2
    33be:	f1 f0       	breq	.+60     	; 0x33fc <__fpcmp_parts_f+0x88>
    33c0:	81 81       	ldd	r24, Z+1	; 0x01
    33c2:	18 17       	cp	r17, r24
    33c4:	d9 f4       	brne	.+54     	; 0x33fc <__fpcmp_parts_f+0x88>
    33c6:	12 96       	adiw	r26, 0x02	; 2
    33c8:	2d 91       	ld	r18, X+
    33ca:	3c 91       	ld	r19, X
    33cc:	13 97       	sbiw	r26, 0x03	; 3
    33ce:	82 81       	ldd	r24, Z+2	; 0x02
    33d0:	93 81       	ldd	r25, Z+3	; 0x03
    33d2:	82 17       	cp	r24, r18
    33d4:	93 07       	cpc	r25, r19
    33d6:	94 f0       	brlt	.+36     	; 0x33fc <__fpcmp_parts_f+0x88>
    33d8:	28 17       	cp	r18, r24
    33da:	39 07       	cpc	r19, r25
    33dc:	bc f0       	brlt	.+46     	; 0x340c <__fpcmp_parts_f+0x98>
    33de:	14 96       	adiw	r26, 0x04	; 4
    33e0:	8d 91       	ld	r24, X+
    33e2:	9d 91       	ld	r25, X+
    33e4:	0d 90       	ld	r0, X+
    33e6:	bc 91       	ld	r27, X
    33e8:	a0 2d       	mov	r26, r0
    33ea:	24 81       	ldd	r18, Z+4	; 0x04
    33ec:	35 81       	ldd	r19, Z+5	; 0x05
    33ee:	46 81       	ldd	r20, Z+6	; 0x06
    33f0:	57 81       	ldd	r21, Z+7	; 0x07
    33f2:	28 17       	cp	r18, r24
    33f4:	39 07       	cpc	r19, r25
    33f6:	4a 07       	cpc	r20, r26
    33f8:	5b 07       	cpc	r21, r27
    33fa:	18 f4       	brcc	.+6      	; 0x3402 <__fpcmp_parts_f+0x8e>
    33fc:	11 23       	and	r17, r17
    33fe:	41 f0       	breq	.+16     	; 0x3410 <__fpcmp_parts_f+0x9c>
    3400:	0a c0       	rjmp	.+20     	; 0x3416 <__fpcmp_parts_f+0xa2>
    3402:	82 17       	cp	r24, r18
    3404:	93 07       	cpc	r25, r19
    3406:	a4 07       	cpc	r26, r20
    3408:	b5 07       	cpc	r27, r21
    340a:	40 f4       	brcc	.+16     	; 0x341c <__fpcmp_parts_f+0xa8>
    340c:	11 23       	and	r17, r17
    340e:	19 f0       	breq	.+6      	; 0x3416 <__fpcmp_parts_f+0xa2>
    3410:	61 e0       	ldi	r22, 0x01	; 1
    3412:	70 e0       	ldi	r23, 0x00	; 0
    3414:	05 c0       	rjmp	.+10     	; 0x3420 <__fpcmp_parts_f+0xac>
    3416:	6f ef       	ldi	r22, 0xFF	; 255
    3418:	7f ef       	ldi	r23, 0xFF	; 255
    341a:	02 c0       	rjmp	.+4      	; 0x3420 <__fpcmp_parts_f+0xac>
    341c:	60 e0       	ldi	r22, 0x00	; 0
    341e:	70 e0       	ldi	r23, 0x00	; 0
    3420:	cb 01       	movw	r24, r22
    3422:	1f 91       	pop	r17
    3424:	08 95       	ret

00003426 <__udivmodhi4>:
    3426:	aa 1b       	sub	r26, r26
    3428:	bb 1b       	sub	r27, r27
    342a:	51 e1       	ldi	r21, 0x11	; 17
    342c:	07 c0       	rjmp	.+14     	; 0x343c <__udivmodhi4_ep>

0000342e <__udivmodhi4_loop>:
    342e:	aa 1f       	adc	r26, r26
    3430:	bb 1f       	adc	r27, r27
    3432:	a6 17       	cp	r26, r22
    3434:	b7 07       	cpc	r27, r23
    3436:	10 f0       	brcs	.+4      	; 0x343c <__udivmodhi4_ep>
    3438:	a6 1b       	sub	r26, r22
    343a:	b7 0b       	sbc	r27, r23

0000343c <__udivmodhi4_ep>:
    343c:	88 1f       	adc	r24, r24
    343e:	99 1f       	adc	r25, r25
    3440:	5a 95       	dec	r21
    3442:	a9 f7       	brne	.-22     	; 0x342e <__udivmodhi4_loop>
    3444:	80 95       	com	r24
    3446:	90 95       	com	r25
    3448:	bc 01       	movw	r22, r24
    344a:	cd 01       	movw	r24, r26
    344c:	08 95       	ret

0000344e <__divmodhi4>:
    344e:	97 fb       	bst	r25, 7
    3450:	09 2e       	mov	r0, r25
    3452:	07 26       	eor	r0, r23
    3454:	0a d0       	rcall	.+20     	; 0x346a <__divmodhi4_neg1>
    3456:	77 fd       	sbrc	r23, 7
    3458:	04 d0       	rcall	.+8      	; 0x3462 <__divmodhi4_neg2>
    345a:	e5 df       	rcall	.-54     	; 0x3426 <__udivmodhi4>
    345c:	06 d0       	rcall	.+12     	; 0x346a <__divmodhi4_neg1>
    345e:	00 20       	and	r0, r0
    3460:	1a f4       	brpl	.+6      	; 0x3468 <__divmodhi4_exit>

00003462 <__divmodhi4_neg2>:
    3462:	70 95       	com	r23
    3464:	61 95       	neg	r22
    3466:	7f 4f       	sbci	r23, 0xFF	; 255

00003468 <__divmodhi4_exit>:
    3468:	08 95       	ret

0000346a <__divmodhi4_neg1>:
    346a:	f6 f7       	brtc	.-4      	; 0x3468 <__divmodhi4_exit>
    346c:	90 95       	com	r25
    346e:	81 95       	neg	r24
    3470:	9f 4f       	sbci	r25, 0xFF	; 255
    3472:	08 95       	ret

00003474 <__prologue_saves__>:
    3474:	2f 92       	push	r2
    3476:	3f 92       	push	r3
    3478:	4f 92       	push	r4
    347a:	5f 92       	push	r5
    347c:	6f 92       	push	r6
    347e:	7f 92       	push	r7
    3480:	8f 92       	push	r8
    3482:	9f 92       	push	r9
    3484:	af 92       	push	r10
    3486:	bf 92       	push	r11
    3488:	cf 92       	push	r12
    348a:	df 92       	push	r13
    348c:	ef 92       	push	r14
    348e:	ff 92       	push	r15
    3490:	0f 93       	push	r16
    3492:	1f 93       	push	r17
    3494:	cf 93       	push	r28
    3496:	df 93       	push	r29
    3498:	cd b7       	in	r28, 0x3d	; 61
    349a:	de b7       	in	r29, 0x3e	; 62
    349c:	ca 1b       	sub	r28, r26
    349e:	db 0b       	sbc	r29, r27
    34a0:	0f b6       	in	r0, 0x3f	; 63
    34a2:	f8 94       	cli
    34a4:	de bf       	out	0x3e, r29	; 62
    34a6:	0f be       	out	0x3f, r0	; 63
    34a8:	cd bf       	out	0x3d, r28	; 61
    34aa:	19 94       	eijmp

000034ac <__epilogue_restores__>:
    34ac:	2a 88       	ldd	r2, Y+18	; 0x12
    34ae:	39 88       	ldd	r3, Y+17	; 0x11
    34b0:	48 88       	ldd	r4, Y+16	; 0x10
    34b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    34b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    34b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    34b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    34ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    34bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    34be:	b9 84       	ldd	r11, Y+9	; 0x09
    34c0:	c8 84       	ldd	r12, Y+8	; 0x08
    34c2:	df 80       	ldd	r13, Y+7	; 0x07
    34c4:	ee 80       	ldd	r14, Y+6	; 0x06
    34c6:	fd 80       	ldd	r15, Y+5	; 0x05
    34c8:	0c 81       	ldd	r16, Y+4	; 0x04
    34ca:	1b 81       	ldd	r17, Y+3	; 0x03
    34cc:	aa 81       	ldd	r26, Y+2	; 0x02
    34ce:	b9 81       	ldd	r27, Y+1	; 0x01
    34d0:	ce 0f       	add	r28, r30
    34d2:	d1 1d       	adc	r29, r1
    34d4:	0f b6       	in	r0, 0x3f	; 63
    34d6:	f8 94       	cli
    34d8:	de bf       	out	0x3e, r29	; 62
    34da:	0f be       	out	0x3f, r0	; 63
    34dc:	cd bf       	out	0x3d, r28	; 61
    34de:	ed 01       	movw	r28, r26
    34e0:	08 95       	ret

000034e2 <pow>:
    34e2:	fa 01       	movw	r30, r20
    34e4:	ee 0f       	add	r30, r30
    34e6:	ff 1f       	adc	r31, r31
    34e8:	30 96       	adiw	r30, 0x00	; 0
    34ea:	21 05       	cpc	r18, r1
    34ec:	31 05       	cpc	r19, r1
    34ee:	99 f1       	breq	.+102    	; 0x3556 <pow+0x74>
    34f0:	61 15       	cp	r22, r1
    34f2:	71 05       	cpc	r23, r1
    34f4:	61 f4       	brne	.+24     	; 0x350e <pow+0x2c>
    34f6:	80 38       	cpi	r24, 0x80	; 128
    34f8:	bf e3       	ldi	r27, 0x3F	; 63
    34fa:	9b 07       	cpc	r25, r27
    34fc:	49 f1       	breq	.+82     	; 0x3550 <pow+0x6e>
    34fe:	68 94       	set
    3500:	90 38       	cpi	r25, 0x80	; 128
    3502:	81 05       	cpc	r24, r1
    3504:	61 f0       	breq	.+24     	; 0x351e <pow+0x3c>
    3506:	80 38       	cpi	r24, 0x80	; 128
    3508:	bf ef       	ldi	r27, 0xFF	; 255
    350a:	9b 07       	cpc	r25, r27
    350c:	41 f0       	breq	.+16     	; 0x351e <pow+0x3c>
    350e:	99 23       	and	r25, r25
    3510:	42 f5       	brpl	.+80     	; 0x3562 <pow+0x80>
    3512:	ff 3f       	cpi	r31, 0xFF	; 255
    3514:	e1 05       	cpc	r30, r1
    3516:	31 05       	cpc	r19, r1
    3518:	21 05       	cpc	r18, r1
    351a:	11 f1       	breq	.+68     	; 0x3560 <pow+0x7e>
    351c:	e8 94       	clt
    351e:	08 94       	sec
    3520:	e7 95       	ror	r30
    3522:	d9 01       	movw	r26, r18
    3524:	aa 23       	and	r26, r26
    3526:	29 f4       	brne	.+10     	; 0x3532 <pow+0x50>
    3528:	ab 2f       	mov	r26, r27
    352a:	be 2f       	mov	r27, r30
    352c:	f8 5f       	subi	r31, 0xF8	; 248
    352e:	d0 f3       	brcs	.-12     	; 0x3524 <pow+0x42>
    3530:	10 c0       	rjmp	.+32     	; 0x3552 <pow+0x70>
    3532:	ff 5f       	subi	r31, 0xFF	; 255
    3534:	70 f4       	brcc	.+28     	; 0x3552 <pow+0x70>
    3536:	a6 95       	lsr	r26
    3538:	e0 f7       	brcc	.-8      	; 0x3532 <pow+0x50>
    353a:	f7 39       	cpi	r31, 0x97	; 151
    353c:	50 f0       	brcs	.+20     	; 0x3552 <pow+0x70>
    353e:	19 f0       	breq	.+6      	; 0x3546 <pow+0x64>
    3540:	ff 3a       	cpi	r31, 0xAF	; 175
    3542:	38 f4       	brcc	.+14     	; 0x3552 <pow+0x70>
    3544:	9f 77       	andi	r25, 0x7F	; 127
    3546:	9f 93       	push	r25
    3548:	0c d0       	rcall	.+24     	; 0x3562 <pow+0x80>
    354a:	0f 90       	pop	r0
    354c:	07 fc       	sbrc	r0, 7
    354e:	90 58       	subi	r25, 0x80	; 128
    3550:	08 95       	ret
    3552:	3e f0       	brts	.+14     	; 0x3562 <pow+0x80>
    3554:	49 c0       	rjmp	.+146    	; 0x35e8 <__fp_nan>
    3556:	60 e0       	ldi	r22, 0x00	; 0
    3558:	70 e0       	ldi	r23, 0x00	; 0
    355a:	80 e8       	ldi	r24, 0x80	; 128
    355c:	9f e3       	ldi	r25, 0x3F	; 63
    355e:	08 95       	ret
    3560:	4f e7       	ldi	r20, 0x7F	; 127
    3562:	9f 77       	andi	r25, 0x7F	; 127
    3564:	5f 93       	push	r21
    3566:	4f 93       	push	r20
    3568:	3f 93       	push	r19
    356a:	2f 93       	push	r18
    356c:	d0 d0       	rcall	.+416    	; 0x370e <log>
    356e:	2f 91       	pop	r18
    3570:	3f 91       	pop	r19
    3572:	4f 91       	pop	r20
    3574:	5f 91       	pop	r21
    3576:	01 da       	rcall	.-3070   	; 0x297a <__mulsf3>
    3578:	05 c0       	rjmp	.+10     	; 0x3584 <exp>
    357a:	19 f4       	brne	.+6      	; 0x3582 <pow+0xa0>
    357c:	0e f0       	brts	.+2      	; 0x3580 <pow+0x9e>
    357e:	2e c0       	rjmp	.+92     	; 0x35dc <__fp_inf>
    3580:	7d c0       	rjmp	.+250    	; 0x367c <__fp_zero>
    3582:	32 c0       	rjmp	.+100    	; 0x35e8 <__fp_nan>

00003584 <exp>:
    3584:	61 d0       	rcall	.+194    	; 0x3648 <__fp_splitA>
    3586:	c8 f3       	brcs	.-14     	; 0x357a <pow+0x98>
    3588:	96 38       	cpi	r25, 0x86	; 134
    358a:	c0 f7       	brcc	.-16     	; 0x357c <pow+0x9a>
    358c:	07 f8       	bld	r0, 7
    358e:	0f 92       	push	r0
    3590:	e8 94       	clt
    3592:	2b e3       	ldi	r18, 0x3B	; 59
    3594:	3a ea       	ldi	r19, 0xAA	; 170
    3596:	48 eb       	ldi	r20, 0xB8	; 184
    3598:	5f e7       	ldi	r21, 0x7F	; 127
    359a:	38 d1       	rcall	.+624    	; 0x380c <__mulsf3_pse>
    359c:	0f 92       	push	r0
    359e:	0f 92       	push	r0
    35a0:	0f 92       	push	r0
    35a2:	4d b7       	in	r20, 0x3d	; 61
    35a4:	5e b7       	in	r21, 0x3e	; 62
    35a6:	0f 92       	push	r0
    35a8:	f2 d0       	rcall	.+484    	; 0x378e <modf>
    35aa:	e4 ee       	ldi	r30, 0xE4	; 228
    35ac:	f0 e0       	ldi	r31, 0x00	; 0
    35ae:	1f d0       	rcall	.+62     	; 0x35ee <__fp_powser>
    35b0:	4f 91       	pop	r20
    35b2:	5f 91       	pop	r21
    35b4:	ef 91       	pop	r30
    35b6:	ff 91       	pop	r31
    35b8:	e5 95       	asr	r30
    35ba:	ee 1f       	adc	r30, r30
    35bc:	ff 1f       	adc	r31, r31
    35be:	49 f0       	breq	.+18     	; 0x35d2 <exp+0x4e>
    35c0:	fe 57       	subi	r31, 0x7E	; 126
    35c2:	e0 68       	ori	r30, 0x80	; 128
    35c4:	44 27       	eor	r20, r20
    35c6:	ee 0f       	add	r30, r30
    35c8:	44 1f       	adc	r20, r20
    35ca:	fa 95       	dec	r31
    35cc:	e1 f7       	brne	.-8      	; 0x35c6 <exp+0x42>
    35ce:	41 95       	neg	r20
    35d0:	55 0b       	sbc	r21, r21
    35d2:	64 d0       	rcall	.+200    	; 0x369c <ldexp>
    35d4:	0f 90       	pop	r0
    35d6:	07 fe       	sbrs	r0, 7
    35d8:	58 c0       	rjmp	.+176    	; 0x368a <inverse>
    35da:	08 95       	ret

000035dc <__fp_inf>:
    35dc:	97 f9       	bld	r25, 7
    35de:	9f 67       	ori	r25, 0x7F	; 127
    35e0:	80 e8       	ldi	r24, 0x80	; 128
    35e2:	70 e0       	ldi	r23, 0x00	; 0
    35e4:	60 e0       	ldi	r22, 0x00	; 0
    35e6:	08 95       	ret

000035e8 <__fp_nan>:
    35e8:	9f ef       	ldi	r25, 0xFF	; 255
    35ea:	80 ec       	ldi	r24, 0xC0	; 192
    35ec:	08 95       	ret

000035ee <__fp_powser>:
    35ee:	df 93       	push	r29
    35f0:	cf 93       	push	r28
    35f2:	1f 93       	push	r17
    35f4:	0f 93       	push	r16
    35f6:	ff 92       	push	r15
    35f8:	ef 92       	push	r14
    35fa:	df 92       	push	r13
    35fc:	7b 01       	movw	r14, r22
    35fe:	8c 01       	movw	r16, r24
    3600:	68 94       	set
    3602:	05 c0       	rjmp	.+10     	; 0x360e <__fp_powser+0x20>
    3604:	da 2e       	mov	r13, r26
    3606:	ef 01       	movw	r28, r30
    3608:	ff d0       	rcall	.+510    	; 0x3808 <__mulsf3x>
    360a:	fe 01       	movw	r30, r28
    360c:	e8 94       	clt
    360e:	a5 91       	lpm	r26, Z+
    3610:	25 91       	lpm	r18, Z+
    3612:	35 91       	lpm	r19, Z+
    3614:	45 91       	lpm	r20, Z+
    3616:	55 91       	lpm	r21, Z+
    3618:	ae f3       	brts	.-22     	; 0x3604 <__fp_powser+0x16>
    361a:	ef 01       	movw	r28, r30
    361c:	59 d1       	rcall	.+690    	; 0x38d0 <__addsf3x>
    361e:	fe 01       	movw	r30, r28
    3620:	97 01       	movw	r18, r14
    3622:	a8 01       	movw	r20, r16
    3624:	da 94       	dec	r13
    3626:	79 f7       	brne	.-34     	; 0x3606 <__fp_powser+0x18>
    3628:	df 90       	pop	r13
    362a:	ef 90       	pop	r14
    362c:	ff 90       	pop	r15
    362e:	0f 91       	pop	r16
    3630:	1f 91       	pop	r17
    3632:	cf 91       	pop	r28
    3634:	df 91       	pop	r29
    3636:	08 95       	ret

00003638 <__fp_split3>:
    3638:	57 fd       	sbrc	r21, 7
    363a:	90 58       	subi	r25, 0x80	; 128
    363c:	44 0f       	add	r20, r20
    363e:	55 1f       	adc	r21, r21
    3640:	59 f0       	breq	.+22     	; 0x3658 <__fp_splitA+0x10>
    3642:	5f 3f       	cpi	r21, 0xFF	; 255
    3644:	71 f0       	breq	.+28     	; 0x3662 <__fp_splitA+0x1a>
    3646:	47 95       	ror	r20

00003648 <__fp_splitA>:
    3648:	88 0f       	add	r24, r24
    364a:	97 fb       	bst	r25, 7
    364c:	99 1f       	adc	r25, r25
    364e:	61 f0       	breq	.+24     	; 0x3668 <__fp_splitA+0x20>
    3650:	9f 3f       	cpi	r25, 0xFF	; 255
    3652:	79 f0       	breq	.+30     	; 0x3672 <__fp_splitA+0x2a>
    3654:	87 95       	ror	r24
    3656:	08 95       	ret
    3658:	12 16       	cp	r1, r18
    365a:	13 06       	cpc	r1, r19
    365c:	14 06       	cpc	r1, r20
    365e:	55 1f       	adc	r21, r21
    3660:	f2 cf       	rjmp	.-28     	; 0x3646 <__fp_split3+0xe>
    3662:	46 95       	lsr	r20
    3664:	f1 df       	rcall	.-30     	; 0x3648 <__fp_splitA>
    3666:	08 c0       	rjmp	.+16     	; 0x3678 <__fp_splitA+0x30>
    3668:	16 16       	cp	r1, r22
    366a:	17 06       	cpc	r1, r23
    366c:	18 06       	cpc	r1, r24
    366e:	99 1f       	adc	r25, r25
    3670:	f1 cf       	rjmp	.-30     	; 0x3654 <__fp_splitA+0xc>
    3672:	86 95       	lsr	r24
    3674:	71 05       	cpc	r23, r1
    3676:	61 05       	cpc	r22, r1
    3678:	08 94       	sec
    367a:	08 95       	ret

0000367c <__fp_zero>:
    367c:	e8 94       	clt

0000367e <__fp_szero>:
    367e:	bb 27       	eor	r27, r27
    3680:	66 27       	eor	r22, r22
    3682:	77 27       	eor	r23, r23
    3684:	cb 01       	movw	r24, r22
    3686:	97 f9       	bld	r25, 7
    3688:	08 95       	ret

0000368a <inverse>:
    368a:	9b 01       	movw	r18, r22
    368c:	ac 01       	movw	r20, r24
    368e:	60 e0       	ldi	r22, 0x00	; 0
    3690:	70 e0       	ldi	r23, 0x00	; 0
    3692:	80 e8       	ldi	r24, 0x80	; 128
    3694:	9f e3       	ldi	r25, 0x3F	; 63
    3696:	6b ca       	rjmp	.-2858   	; 0x2b6e <__divsf3>
    3698:	a1 cf       	rjmp	.-190    	; 0x35dc <__fp_inf>
    369a:	6d c1       	rjmp	.+730    	; 0x3976 <__fp_mpack>

0000369c <ldexp>:
    369c:	d5 df       	rcall	.-86     	; 0x3648 <__fp_splitA>
    369e:	e8 f3       	brcs	.-6      	; 0x369a <inverse+0x10>
    36a0:	99 23       	and	r25, r25
    36a2:	d9 f3       	breq	.-10     	; 0x369a <inverse+0x10>
    36a4:	94 0f       	add	r25, r20
    36a6:	51 1d       	adc	r21, r1
    36a8:	bb f3       	brvs	.-18     	; 0x3698 <inverse+0xe>
    36aa:	91 50       	subi	r25, 0x01	; 1
    36ac:	50 40       	sbci	r21, 0x00	; 0
    36ae:	94 f0       	brlt	.+36     	; 0x36d4 <ldexp+0x38>
    36b0:	59 f0       	breq	.+22     	; 0x36c8 <ldexp+0x2c>
    36b2:	88 23       	and	r24, r24
    36b4:	32 f0       	brmi	.+12     	; 0x36c2 <ldexp+0x26>
    36b6:	66 0f       	add	r22, r22
    36b8:	77 1f       	adc	r23, r23
    36ba:	88 1f       	adc	r24, r24
    36bc:	91 50       	subi	r25, 0x01	; 1
    36be:	50 40       	sbci	r21, 0x00	; 0
    36c0:	c1 f7       	brne	.-16     	; 0x36b2 <ldexp+0x16>
    36c2:	9e 3f       	cpi	r25, 0xFE	; 254
    36c4:	51 05       	cpc	r21, r1
    36c6:	44 f7       	brge	.-48     	; 0x3698 <inverse+0xe>
    36c8:	88 0f       	add	r24, r24
    36ca:	91 1d       	adc	r25, r1
    36cc:	96 95       	lsr	r25
    36ce:	87 95       	ror	r24
    36d0:	97 f9       	bld	r25, 7
    36d2:	08 95       	ret
    36d4:	5f 3f       	cpi	r21, 0xFF	; 255
    36d6:	ac f0       	brlt	.+42     	; 0x3702 <ldexp+0x66>
    36d8:	98 3e       	cpi	r25, 0xE8	; 232
    36da:	9c f0       	brlt	.+38     	; 0x3702 <ldexp+0x66>
    36dc:	bb 27       	eor	r27, r27
    36de:	86 95       	lsr	r24
    36e0:	77 95       	ror	r23
    36e2:	67 95       	ror	r22
    36e4:	b7 95       	ror	r27
    36e6:	08 f4       	brcc	.+2      	; 0x36ea <ldexp+0x4e>
    36e8:	b1 60       	ori	r27, 0x01	; 1
    36ea:	93 95       	inc	r25
    36ec:	c1 f7       	brne	.-16     	; 0x36de <ldexp+0x42>
    36ee:	bb 0f       	add	r27, r27
    36f0:	58 f7       	brcc	.-42     	; 0x36c8 <ldexp+0x2c>
    36f2:	11 f4       	brne	.+4      	; 0x36f8 <ldexp+0x5c>
    36f4:	60 ff       	sbrs	r22, 0
    36f6:	e8 cf       	rjmp	.-48     	; 0x36c8 <ldexp+0x2c>
    36f8:	6f 5f       	subi	r22, 0xFF	; 255
    36fa:	7f 4f       	sbci	r23, 0xFF	; 255
    36fc:	8f 4f       	sbci	r24, 0xFF	; 255
    36fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3700:	e3 cf       	rjmp	.-58     	; 0x36c8 <ldexp+0x2c>
    3702:	bd cf       	rjmp	.-134    	; 0x367e <__fp_szero>
    3704:	0e f0       	brts	.+2      	; 0x3708 <ldexp+0x6c>
    3706:	37 c1       	rjmp	.+622    	; 0x3976 <__fp_mpack>
    3708:	6f cf       	rjmp	.-290    	; 0x35e8 <__fp_nan>
    370a:	68 94       	set
    370c:	67 cf       	rjmp	.-306    	; 0x35dc <__fp_inf>

0000370e <log>:
    370e:	9c df       	rcall	.-200    	; 0x3648 <__fp_splitA>
    3710:	c8 f3       	brcs	.-14     	; 0x3704 <ldexp+0x68>
    3712:	99 23       	and	r25, r25
    3714:	d1 f3       	breq	.-12     	; 0x370a <ldexp+0x6e>
    3716:	c6 f3       	brts	.-16     	; 0x3708 <ldexp+0x6c>
    3718:	df 93       	push	r29
    371a:	cf 93       	push	r28
    371c:	1f 93       	push	r17
    371e:	0f 93       	push	r16
    3720:	ff 92       	push	r15
    3722:	c9 2f       	mov	r28, r25
    3724:	dd 27       	eor	r29, r29
    3726:	88 23       	and	r24, r24
    3728:	2a f0       	brmi	.+10     	; 0x3734 <log+0x26>
    372a:	21 97       	sbiw	r28, 0x01	; 1
    372c:	66 0f       	add	r22, r22
    372e:	77 1f       	adc	r23, r23
    3730:	88 1f       	adc	r24, r24
    3732:	da f7       	brpl	.-10     	; 0x372a <log+0x1c>
    3734:	20 e0       	ldi	r18, 0x00	; 0
    3736:	30 e0       	ldi	r19, 0x00	; 0
    3738:	40 e8       	ldi	r20, 0x80	; 128
    373a:	5f eb       	ldi	r21, 0xBF	; 191
    373c:	9f e3       	ldi	r25, 0x3F	; 63
    373e:	88 39       	cpi	r24, 0x98	; 152
    3740:	20 f0       	brcs	.+8      	; 0x374a <log+0x3c>
    3742:	80 3e       	cpi	r24, 0xE0	; 224
    3744:	30 f0       	brcs	.+12     	; 0x3752 <log+0x44>
    3746:	21 96       	adiw	r28, 0x01	; 1
    3748:	8f 77       	andi	r24, 0x7F	; 127
    374a:	ea d8       	rcall	.-3628   	; 0x2920 <__addsf3>
    374c:	ec e0       	ldi	r30, 0x0C	; 12
    374e:	f1 e0       	ldi	r31, 0x01	; 1
    3750:	03 c0       	rjmp	.+6      	; 0x3758 <log+0x4a>
    3752:	e6 d8       	rcall	.-3636   	; 0x2920 <__addsf3>
    3754:	e9 e3       	ldi	r30, 0x39	; 57
    3756:	f1 e0       	ldi	r31, 0x01	; 1
    3758:	4a df       	rcall	.-364    	; 0x35ee <__fp_powser>
    375a:	8b 01       	movw	r16, r22
    375c:	be 01       	movw	r22, r28
    375e:	ec 01       	movw	r28, r24
    3760:	fb 2e       	mov	r15, r27
    3762:	6f 57       	subi	r22, 0x7F	; 127
    3764:	71 09       	sbc	r23, r1
    3766:	75 95       	asr	r23
    3768:	77 1f       	adc	r23, r23
    376a:	88 0b       	sbc	r24, r24
    376c:	99 0b       	sbc	r25, r25
    376e:	3b db       	rcall	.-2442   	; 0x2de6 <__floatsisf>
    3770:	28 e1       	ldi	r18, 0x18	; 24
    3772:	32 e7       	ldi	r19, 0x72	; 114
    3774:	41 e3       	ldi	r20, 0x31	; 49
    3776:	5f e3       	ldi	r21, 0x3F	; 63
    3778:	47 d0       	rcall	.+142    	; 0x3808 <__mulsf3x>
    377a:	af 2d       	mov	r26, r15
    377c:	98 01       	movw	r18, r16
    377e:	ae 01       	movw	r20, r28
    3780:	ff 90       	pop	r15
    3782:	0f 91       	pop	r16
    3784:	1f 91       	pop	r17
    3786:	cf 91       	pop	r28
    3788:	df 91       	pop	r29
    378a:	a2 d0       	rcall	.+324    	; 0x38d0 <__addsf3x>
    378c:	10 c1       	rjmp	.+544    	; 0x39ae <__fp_round>

0000378e <modf>:
    378e:	fa 01       	movw	r30, r20
    3790:	dc 01       	movw	r26, r24
    3792:	aa 0f       	add	r26, r26
    3794:	bb 1f       	adc	r27, r27
    3796:	9b 01       	movw	r18, r22
    3798:	ac 01       	movw	r20, r24
    379a:	bf 57       	subi	r27, 0x7F	; 127
    379c:	28 f4       	brcc	.+10     	; 0x37a8 <modf+0x1a>
    379e:	22 27       	eor	r18, r18
    37a0:	33 27       	eor	r19, r19
    37a2:	44 27       	eor	r20, r20
    37a4:	50 78       	andi	r21, 0x80	; 128
    37a6:	1f c0       	rjmp	.+62     	; 0x37e6 <modf+0x58>
    37a8:	b7 51       	subi	r27, 0x17	; 23
    37aa:	88 f4       	brcc	.+34     	; 0x37ce <modf+0x40>
    37ac:	ab 2f       	mov	r26, r27
    37ae:	00 24       	eor	r0, r0
    37b0:	46 95       	lsr	r20
    37b2:	37 95       	ror	r19
    37b4:	27 95       	ror	r18
    37b6:	01 1c       	adc	r0, r1
    37b8:	a3 95       	inc	r26
    37ba:	d2 f3       	brmi	.-12     	; 0x37b0 <modf+0x22>
    37bc:	00 20       	and	r0, r0
    37be:	69 f0       	breq	.+26     	; 0x37da <modf+0x4c>
    37c0:	22 0f       	add	r18, r18
    37c2:	33 1f       	adc	r19, r19
    37c4:	44 1f       	adc	r20, r20
    37c6:	b3 95       	inc	r27
    37c8:	da f3       	brmi	.-10     	; 0x37c0 <modf+0x32>
    37ca:	0d d0       	rcall	.+26     	; 0x37e6 <modf+0x58>
    37cc:	78 c8       	rjmp	.-3856   	; 0x28be <__subsf3>
    37ce:	61 30       	cpi	r22, 0x01	; 1
    37d0:	71 05       	cpc	r23, r1
    37d2:	a0 e8       	ldi	r26, 0x80	; 128
    37d4:	8a 07       	cpc	r24, r26
    37d6:	b9 46       	sbci	r27, 0x69	; 105
    37d8:	30 f4       	brcc	.+12     	; 0x37e6 <modf+0x58>
    37da:	9b 01       	movw	r18, r22
    37dc:	ac 01       	movw	r20, r24
    37de:	66 27       	eor	r22, r22
    37e0:	77 27       	eor	r23, r23
    37e2:	88 27       	eor	r24, r24
    37e4:	90 78       	andi	r25, 0x80	; 128
    37e6:	30 96       	adiw	r30, 0x00	; 0
    37e8:	21 f0       	breq	.+8      	; 0x37f2 <modf+0x64>
    37ea:	20 83       	st	Z, r18
    37ec:	31 83       	std	Z+1, r19	; 0x01
    37ee:	42 83       	std	Z+2, r20	; 0x02
    37f0:	53 83       	std	Z+3, r21	; 0x03
    37f2:	08 95       	ret
    37f4:	ce d0       	rcall	.+412    	; 0x3992 <__fp_pscA>
    37f6:	28 f0       	brcs	.+10     	; 0x3802 <modf+0x74>
    37f8:	d3 d0       	rcall	.+422    	; 0x39a0 <__fp_pscB>
    37fa:	18 f0       	brcs	.+6      	; 0x3802 <modf+0x74>
    37fc:	95 23       	and	r25, r21
    37fe:	09 f0       	breq	.+2      	; 0x3802 <modf+0x74>
    3800:	ed ce       	rjmp	.-550    	; 0x35dc <__fp_inf>
    3802:	f2 ce       	rjmp	.-540    	; 0x35e8 <__fp_nan>
    3804:	11 24       	eor	r1, r1
    3806:	3b cf       	rjmp	.-394    	; 0x367e <__fp_szero>

00003808 <__mulsf3x>:
    3808:	17 df       	rcall	.-466    	; 0x3638 <__fp_split3>
    380a:	a0 f3       	brcs	.-24     	; 0x37f4 <modf+0x66>

0000380c <__mulsf3_pse>:
    380c:	95 9f       	mul	r25, r21
    380e:	d1 f3       	breq	.-12     	; 0x3804 <modf+0x76>
    3810:	95 0f       	add	r25, r21
    3812:	50 e0       	ldi	r21, 0x00	; 0
    3814:	55 1f       	adc	r21, r21
    3816:	62 9f       	mul	r22, r18
    3818:	f0 01       	movw	r30, r0
    381a:	72 9f       	mul	r23, r18
    381c:	bb 27       	eor	r27, r27
    381e:	f0 0d       	add	r31, r0
    3820:	b1 1d       	adc	r27, r1
    3822:	63 9f       	mul	r22, r19
    3824:	aa 27       	eor	r26, r26
    3826:	f0 0d       	add	r31, r0
    3828:	b1 1d       	adc	r27, r1
    382a:	aa 1f       	adc	r26, r26
    382c:	64 9f       	mul	r22, r20
    382e:	66 27       	eor	r22, r22
    3830:	b0 0d       	add	r27, r0
    3832:	a1 1d       	adc	r26, r1
    3834:	66 1f       	adc	r22, r22
    3836:	82 9f       	mul	r24, r18
    3838:	22 27       	eor	r18, r18
    383a:	b0 0d       	add	r27, r0
    383c:	a1 1d       	adc	r26, r1
    383e:	62 1f       	adc	r22, r18
    3840:	73 9f       	mul	r23, r19
    3842:	b0 0d       	add	r27, r0
    3844:	a1 1d       	adc	r26, r1
    3846:	62 1f       	adc	r22, r18
    3848:	83 9f       	mul	r24, r19
    384a:	a0 0d       	add	r26, r0
    384c:	61 1d       	adc	r22, r1
    384e:	22 1f       	adc	r18, r18
    3850:	74 9f       	mul	r23, r20
    3852:	33 27       	eor	r19, r19
    3854:	a0 0d       	add	r26, r0
    3856:	61 1d       	adc	r22, r1
    3858:	23 1f       	adc	r18, r19
    385a:	84 9f       	mul	r24, r20
    385c:	60 0d       	add	r22, r0
    385e:	21 1d       	adc	r18, r1
    3860:	82 2f       	mov	r24, r18
    3862:	76 2f       	mov	r23, r22
    3864:	6a 2f       	mov	r22, r26
    3866:	11 24       	eor	r1, r1
    3868:	9f 57       	subi	r25, 0x7F	; 127
    386a:	50 40       	sbci	r21, 0x00	; 0
    386c:	8a f0       	brmi	.+34     	; 0x3890 <__mulsf3_pse+0x84>
    386e:	e1 f0       	breq	.+56     	; 0x38a8 <__mulsf3_pse+0x9c>
    3870:	88 23       	and	r24, r24
    3872:	4a f0       	brmi	.+18     	; 0x3886 <__mulsf3_pse+0x7a>
    3874:	ee 0f       	add	r30, r30
    3876:	ff 1f       	adc	r31, r31
    3878:	bb 1f       	adc	r27, r27
    387a:	66 1f       	adc	r22, r22
    387c:	77 1f       	adc	r23, r23
    387e:	88 1f       	adc	r24, r24
    3880:	91 50       	subi	r25, 0x01	; 1
    3882:	50 40       	sbci	r21, 0x00	; 0
    3884:	a9 f7       	brne	.-22     	; 0x3870 <__mulsf3_pse+0x64>
    3886:	9e 3f       	cpi	r25, 0xFE	; 254
    3888:	51 05       	cpc	r21, r1
    388a:	70 f0       	brcs	.+28     	; 0x38a8 <__mulsf3_pse+0x9c>
    388c:	a7 ce       	rjmp	.-690    	; 0x35dc <__fp_inf>
    388e:	f7 ce       	rjmp	.-530    	; 0x367e <__fp_szero>
    3890:	5f 3f       	cpi	r21, 0xFF	; 255
    3892:	ec f3       	brlt	.-6      	; 0x388e <__mulsf3_pse+0x82>
    3894:	98 3e       	cpi	r25, 0xE8	; 232
    3896:	dc f3       	brlt	.-10     	; 0x388e <__mulsf3_pse+0x82>
    3898:	86 95       	lsr	r24
    389a:	77 95       	ror	r23
    389c:	67 95       	ror	r22
    389e:	b7 95       	ror	r27
    38a0:	f7 95       	ror	r31
    38a2:	e7 95       	ror	r30
    38a4:	9f 5f       	subi	r25, 0xFF	; 255
    38a6:	c1 f7       	brne	.-16     	; 0x3898 <__mulsf3_pse+0x8c>
    38a8:	fe 2b       	or	r31, r30
    38aa:	88 0f       	add	r24, r24
    38ac:	91 1d       	adc	r25, r1
    38ae:	96 95       	lsr	r25
    38b0:	87 95       	ror	r24
    38b2:	97 f9       	bld	r25, 7
    38b4:	08 95       	ret
    38b6:	6d d0       	rcall	.+218    	; 0x3992 <__fp_pscA>
    38b8:	30 f0       	brcs	.+12     	; 0x38c6 <__mulsf3_pse+0xba>
    38ba:	72 d0       	rcall	.+228    	; 0x39a0 <__fp_pscB>
    38bc:	20 f0       	brcs	.+8      	; 0x38c6 <__mulsf3_pse+0xba>
    38be:	31 f4       	brne	.+12     	; 0x38cc <__mulsf3_pse+0xc0>
    38c0:	9f 3f       	cpi	r25, 0xFF	; 255
    38c2:	11 f4       	brne	.+4      	; 0x38c8 <__mulsf3_pse+0xbc>
    38c4:	1e f4       	brtc	.+6      	; 0x38cc <__mulsf3_pse+0xc0>
    38c6:	90 ce       	rjmp	.-736    	; 0x35e8 <__fp_nan>
    38c8:	0e f4       	brtc	.+2      	; 0x38cc <__mulsf3_pse+0xc0>
    38ca:	e0 95       	com	r30
    38cc:	e7 fb       	bst	r30, 7
    38ce:	86 ce       	rjmp	.-756    	; 0x35dc <__fp_inf>

000038d0 <__addsf3x>:
    38d0:	e9 2f       	mov	r30, r25
    38d2:	b2 de       	rcall	.-668    	; 0x3638 <__fp_split3>
    38d4:	80 f3       	brcs	.-32     	; 0x38b6 <__mulsf3_pse+0xaa>
    38d6:	ba 17       	cp	r27, r26
    38d8:	62 07       	cpc	r22, r18
    38da:	73 07       	cpc	r23, r19
    38dc:	84 07       	cpc	r24, r20
    38de:	95 07       	cpc	r25, r21
    38e0:	18 f0       	brcs	.+6      	; 0x38e8 <__addsf3x+0x18>
    38e2:	71 f4       	brne	.+28     	; 0x3900 <__addsf3x+0x30>
    38e4:	9e f5       	brtc	.+102    	; 0x394c <__addsf3x+0x7c>
    38e6:	ca ce       	rjmp	.-620    	; 0x367c <__fp_zero>
    38e8:	0e f4       	brtc	.+2      	; 0x38ec <__addsf3x+0x1c>
    38ea:	e0 95       	com	r30
    38ec:	0b 2e       	mov	r0, r27
    38ee:	ba 2f       	mov	r27, r26
    38f0:	a0 2d       	mov	r26, r0
    38f2:	0b 01       	movw	r0, r22
    38f4:	b9 01       	movw	r22, r18
    38f6:	90 01       	movw	r18, r0
    38f8:	0c 01       	movw	r0, r24
    38fa:	ca 01       	movw	r24, r20
    38fc:	a0 01       	movw	r20, r0
    38fe:	11 24       	eor	r1, r1
    3900:	ff 27       	eor	r31, r31
    3902:	59 1b       	sub	r21, r25
    3904:	99 f0       	breq	.+38     	; 0x392c <__addsf3x+0x5c>
    3906:	59 3f       	cpi	r21, 0xF9	; 249
    3908:	50 f4       	brcc	.+20     	; 0x391e <__addsf3x+0x4e>
    390a:	50 3e       	cpi	r21, 0xE0	; 224
    390c:	68 f1       	brcs	.+90     	; 0x3968 <__addsf3x+0x98>
    390e:	1a 16       	cp	r1, r26
    3910:	f0 40       	sbci	r31, 0x00	; 0
    3912:	a2 2f       	mov	r26, r18
    3914:	23 2f       	mov	r18, r19
    3916:	34 2f       	mov	r19, r20
    3918:	44 27       	eor	r20, r20
    391a:	58 5f       	subi	r21, 0xF8	; 248
    391c:	f3 cf       	rjmp	.-26     	; 0x3904 <__addsf3x+0x34>
    391e:	46 95       	lsr	r20
    3920:	37 95       	ror	r19
    3922:	27 95       	ror	r18
    3924:	a7 95       	ror	r26
    3926:	f0 40       	sbci	r31, 0x00	; 0
    3928:	53 95       	inc	r21
    392a:	c9 f7       	brne	.-14     	; 0x391e <__addsf3x+0x4e>
    392c:	7e f4       	brtc	.+30     	; 0x394c <__addsf3x+0x7c>
    392e:	1f 16       	cp	r1, r31
    3930:	ba 0b       	sbc	r27, r26
    3932:	62 0b       	sbc	r22, r18
    3934:	73 0b       	sbc	r23, r19
    3936:	84 0b       	sbc	r24, r20
    3938:	ba f0       	brmi	.+46     	; 0x3968 <__addsf3x+0x98>
    393a:	91 50       	subi	r25, 0x01	; 1
    393c:	a1 f0       	breq	.+40     	; 0x3966 <__addsf3x+0x96>
    393e:	ff 0f       	add	r31, r31
    3940:	bb 1f       	adc	r27, r27
    3942:	66 1f       	adc	r22, r22
    3944:	77 1f       	adc	r23, r23
    3946:	88 1f       	adc	r24, r24
    3948:	c2 f7       	brpl	.-16     	; 0x393a <__addsf3x+0x6a>
    394a:	0e c0       	rjmp	.+28     	; 0x3968 <__addsf3x+0x98>
    394c:	ba 0f       	add	r27, r26
    394e:	62 1f       	adc	r22, r18
    3950:	73 1f       	adc	r23, r19
    3952:	84 1f       	adc	r24, r20
    3954:	48 f4       	brcc	.+18     	; 0x3968 <__addsf3x+0x98>
    3956:	87 95       	ror	r24
    3958:	77 95       	ror	r23
    395a:	67 95       	ror	r22
    395c:	b7 95       	ror	r27
    395e:	f7 95       	ror	r31
    3960:	9e 3f       	cpi	r25, 0xFE	; 254
    3962:	08 f0       	brcs	.+2      	; 0x3966 <__addsf3x+0x96>
    3964:	b3 cf       	rjmp	.-154    	; 0x38cc <__mulsf3_pse+0xc0>
    3966:	93 95       	inc	r25
    3968:	88 0f       	add	r24, r24
    396a:	08 f0       	brcs	.+2      	; 0x396e <__addsf3x+0x9e>
    396c:	99 27       	eor	r25, r25
    396e:	ee 0f       	add	r30, r30
    3970:	97 95       	ror	r25
    3972:	87 95       	ror	r24
    3974:	08 95       	ret

00003976 <__fp_mpack>:
    3976:	9f 3f       	cpi	r25, 0xFF	; 255
    3978:	31 f0       	breq	.+12     	; 0x3986 <__fp_mpack_finite+0xc>

0000397a <__fp_mpack_finite>:
    397a:	91 50       	subi	r25, 0x01	; 1
    397c:	20 f4       	brcc	.+8      	; 0x3986 <__fp_mpack_finite+0xc>
    397e:	87 95       	ror	r24
    3980:	77 95       	ror	r23
    3982:	67 95       	ror	r22
    3984:	b7 95       	ror	r27
    3986:	88 0f       	add	r24, r24
    3988:	91 1d       	adc	r25, r1
    398a:	96 95       	lsr	r25
    398c:	87 95       	ror	r24
    398e:	97 f9       	bld	r25, 7
    3990:	08 95       	ret

00003992 <__fp_pscA>:
    3992:	00 24       	eor	r0, r0
    3994:	0a 94       	dec	r0
    3996:	16 16       	cp	r1, r22
    3998:	17 06       	cpc	r1, r23
    399a:	18 06       	cpc	r1, r24
    399c:	09 06       	cpc	r0, r25
    399e:	08 95       	ret

000039a0 <__fp_pscB>:
    39a0:	00 24       	eor	r0, r0
    39a2:	0a 94       	dec	r0
    39a4:	12 16       	cp	r1, r18
    39a6:	13 06       	cpc	r1, r19
    39a8:	14 06       	cpc	r1, r20
    39aa:	05 06       	cpc	r0, r21
    39ac:	08 95       	ret

000039ae <__fp_round>:
    39ae:	09 2e       	mov	r0, r25
    39b0:	03 94       	inc	r0
    39b2:	00 0c       	add	r0, r0
    39b4:	11 f4       	brne	.+4      	; 0x39ba <__fp_round+0xc>
    39b6:	88 23       	and	r24, r24
    39b8:	52 f0       	brmi	.+20     	; 0x39ce <__fp_round+0x20>
    39ba:	bb 0f       	add	r27, r27
    39bc:	40 f4       	brcc	.+16     	; 0x39ce <__fp_round+0x20>
    39be:	bf 2b       	or	r27, r31
    39c0:	11 f4       	brne	.+4      	; 0x39c6 <__fp_round+0x18>
    39c2:	60 ff       	sbrs	r22, 0
    39c4:	04 c0       	rjmp	.+8      	; 0x39ce <__fp_round+0x20>
    39c6:	6f 5f       	subi	r22, 0xFF	; 255
    39c8:	7f 4f       	sbci	r23, 0xFF	; 255
    39ca:	8f 4f       	sbci	r24, 0xFF	; 255
    39cc:	9f 4f       	sbci	r25, 0xFF	; 255
    39ce:	08 95       	ret

000039d0 <_exit>:
    39d0:	f8 94       	cli

000039d2 <__stop_program>:
    39d2:	ff cf       	rjmp	.-2      	; 0x39d2 <__stop_program>
